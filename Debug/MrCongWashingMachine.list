
MrCongWashingMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000654c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800665c  0800665c  0001665c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006968  08006968  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08006968  08006968  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006968  08006968  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800696c  0800696c  0001696c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000008c  080069fc  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  080069fc  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e98b  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002396  00000000  00000000  0002ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00030dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00031c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c4b  00000000  00000000  000329d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001122a  00000000  00000000  0004b623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000900b7  00000000  00000000  0005c84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec904  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004158  00000000  00000000  000ec954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006644 	.word	0x08006644

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	08006644 	.word	0x08006644

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2iz>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d215      	bcs.n	8000752 <__aeabi_d2iz+0x36>
 8000726:	d511      	bpl.n	800074c <__aeabi_d2iz+0x30>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d912      	bls.n	8000758 <__aeabi_d2iz+0x3c>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000742:	fa23 f002 	lsr.w	r0, r3, r2
 8000746:	bf18      	it	ne
 8000748:	4240      	negne	r0, r0
 800074a:	4770      	bx	lr
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	4770      	bx	lr
 8000752:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000756:	d105      	bne.n	8000764 <__aeabi_d2iz+0x48>
 8000758:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <at24_isConnected>:
 * @brief  Checks if memory device is ready for communication.
 * @param  none
 * @retval bool status
 */
bool at24_isConnected(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&hi2c2, _EEPROM_ADDRESS, 2, 100) == HAL_OK)
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	2202      	movs	r2, #2
 8000774:	21a0      	movs	r1, #160	; 0xa0
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <at24_isConnected+0x20>)
 8000778:	f003 f99e 	bl	8003ab8 <HAL_I2C_IsDeviceReady>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d101      	bne.n	8000786 <at24_isConnected+0x1a>
		return true;
 8000782:	2301      	movs	r3, #1
 8000784:	e000      	b.n	8000788 <at24_isConnected+0x1c>
	else
		return false;
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000130 	.word	0x20000130

08000790 <at24_write>:
 * @param  len Amount of data to be sent
 * @param  timeout Timeout duration
 * @retval bool status
 */
bool at24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af04      	add	r7, sp, #16
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	4603      	mov	r3, r0
 800079e:	81fb      	strh	r3, [r7, #14]
	if (at24_lock == 1)
 80007a0:	4b29      	ldr	r3, [pc, #164]	; (8000848 <at24_write+0xb8>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d101      	bne.n	80007ac <at24_write+0x1c>
		return false;
 80007a8:	2300      	movs	r3, #0
 80007aa:	e049      	b.n	8000840 <at24_write+0xb0>

	at24_lock = 1;
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <at24_write+0xb8>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
	uint16_t w;
	uint32_t startTime = HAL_GetTick();
 80007b2:	f001 fe9b 	bl	80024ec <HAL_GetTick>
 80007b6:	6138      	str	r0, [r7, #16]

	while (1)
	{
		w = _EEPROM_PSIZE - (address % _EEPROM_PSIZE);
 80007b8:	89fb      	ldrh	r3, [r7, #14]
 80007ba:	f003 031f 	and.w	r3, r3, #31
 80007be:	b29b      	uxth	r3, r3
 80007c0:	f1c3 0320 	rsb	r3, r3, #32
 80007c4:	82fb      	strh	r3, [r7, #22]
		if (w > len)
 80007c6:	8afb      	ldrh	r3, [r7, #22]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d201      	bcs.n	80007d2 <at24_write+0x42>
			w = len;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	82fb      	strh	r3, [r7, #22]
#elif (_EEPROM_SIZE_KBIT == 8)
		if (HAL_I2C_Mem_Write(&hi2c2, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
#elif (_EEPROM_SIZE_KBIT == 16)
		if (HAL_I2C_Mem_Write(&hi2c2, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&hi2c2, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 100) == HAL_OK)
 80007d2:	89fa      	ldrh	r2, [r7, #14]
 80007d4:	2364      	movs	r3, #100	; 0x64
 80007d6:	9302      	str	r3, [sp, #8]
 80007d8:	8afb      	ldrh	r3, [r7, #22]
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2310      	movs	r3, #16
 80007e2:	21a0      	movs	r1, #160	; 0xa0
 80007e4:	4819      	ldr	r0, [pc, #100]	; (800084c <at24_write+0xbc>)
 80007e6:	f002 fdf9 	bl	80033dc <HAL_I2C_Mem_Write>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d123      	bne.n	8000838 <at24_write+0xa8>
#endif
		{
			at24_delay(10);
 80007f0:	200a      	movs	r0, #10
 80007f2:	f001 fe85 	bl	8002500 <HAL_Delay>
			len -= w;
 80007f6:	8afb      	ldrh	r3, [r7, #22]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	607b      	str	r3, [r7, #4]
			data += w;
 80007fe:	8afb      	ldrh	r3, [r7, #22]
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	4413      	add	r3, r2
 8000804:	60bb      	str	r3, [r7, #8]
			address += w;
 8000806:	89fa      	ldrh	r2, [r7, #14]
 8000808:	8afb      	ldrh	r3, [r7, #22]
 800080a:	4413      	add	r3, r2
 800080c:	81fb      	strh	r3, [r7, #14]
			if (len == 0)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d104      	bne.n	800081e <at24_write+0x8e>
			{
				at24_lock = 0;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <at24_write+0xb8>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
				return true;
 800081a:	2301      	movs	r3, #1
 800081c:	e010      	b.n	8000840 <at24_write+0xb0>
			}
			if (HAL_GetTick() - startTime >= timeout)
 800081e:	f001 fe65 	bl	80024ec <HAL_GetTick>
 8000822:	4602      	mov	r2, r0
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	683a      	ldr	r2, [r7, #0]
 800082a:	429a      	cmp	r2, r3
 800082c:	d8c4      	bhi.n	80007b8 <at24_write+0x28>
			{
				at24_lock = 0;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <at24_write+0xb8>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
				return false;
 8000834:	2300      	movs	r3, #0
 8000836:	e003      	b.n	8000840 <at24_write+0xb0>
			}
		}
		else
		{
			at24_lock = 0;
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <at24_write+0xb8>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
			return false;
 800083e:	2300      	movs	r3, #0
		}
	}
}
 8000840:	4618      	mov	r0, r3
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000a8 	.word	0x200000a8
 800084c:	20000130 	.word	0x20000130

08000850 <at24_read>:
 * @param  len Amount of data to be sent
 * @param  timeout Timeout duration
 * @retval bool status
 */
bool at24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af04      	add	r7, sp, #16
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	4603      	mov	r3, r0
 800085e:	81fb      	strh	r3, [r7, #14]
	if (at24_lock == 1)
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <at24_read+0x58>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d101      	bne.n	800086c <at24_read+0x1c>
		return false;
 8000868:	2300      	movs	r3, #0
 800086a:	e019      	b.n	80008a0 <at24_read+0x50>
#elif (_EEPROM_SIZE_KBIT == 8)
	if (HAL_I2C_Mem_Read(&hi2c2, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
#elif (_EEPROM_SIZE_KBIT == 16)
	if (HAL_I2C_Mem_Read(&hi2c2, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
#else
	if (HAL_I2C_Mem_Read(&hi2c2, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	b29b      	uxth	r3, r3
 8000870:	89f9      	ldrh	r1, [r7, #14]
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	9202      	str	r2, [sp, #8]
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2310      	movs	r3, #16
 800087e:	460a      	mov	r2, r1
 8000880:	21a0      	movs	r1, #160	; 0xa0
 8000882:	480a      	ldr	r0, [pc, #40]	; (80008ac <at24_read+0x5c>)
 8000884:	f002 fea4 	bl	80035d0 <HAL_I2C_Mem_Read>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d104      	bne.n	8000898 <at24_read+0x48>
#endif
	{
		at24_lock = 0;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <at24_read+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
		return true;
 8000894:	2301      	movs	r3, #1
 8000896:	e003      	b.n	80008a0 <at24_read+0x50>
	}
	else
	{
		at24_lock = 0;
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <at24_read+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
		return false;
 800089e:	2300      	movs	r3, #0
	}
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000a8 	.word	0x200000a8
 80008ac:	20000130 	.word	0x20000130

080008b0 <check_eeprom>:
	}
	return true;
}

int8_t check_eeprom(uint8_t backupData_eeprom[])
{
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval -1: no eeprom found, 0: no backup data saved, 1: have backup data
	 */

	if (at24_isConnected())
 80008b8:	f7ff ff58 	bl	800076c <at24_isConnected>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d02a      	beq.n	8000918 <check_eeprom+0x68>
	{
		at24_read(0, backupData_eeprom, 6, 500);
 80008c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008c6:	2206      	movs	r2, #6
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff ffc0 	bl	8000850 <at24_read>
		for (int i = 0; i < 5; i++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008d4:	e01b      	b.n	800090e <check_eeprom+0x5e>
		{
			if (backupData_eeprom[i] != 0xFF)
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2bff      	cmp	r3, #255	; 0xff
 80008e0:	d012      	beq.n	8000908 <check_eeprom+0x58>
			{
				const uint8_t eraseData[32] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <check_eeprom+0x74>)
 80008e4:	f107 040c 	add.w	r4, r7, #12
 80008e8:	461d      	mov	r5, r3
 80008ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				at24_write(0, (uint8_t *)eraseData, sizeof(eraseData), 100);
 80008f6:	f107 010c 	add.w	r1, r7, #12
 80008fa:	2364      	movs	r3, #100	; 0x64
 80008fc:	2220      	movs	r2, #32
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff ff46 	bl	8000790 <at24_write>
				return 1; // return 1 if any of data_read == 0xFF ( has backup data )
 8000904:	2301      	movs	r3, #1
 8000906:	e009      	b.n	800091c <check_eeprom+0x6c>
		for (int i = 0; i < 5; i++)
 8000908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090a:	3301      	adds	r3, #1
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000910:	2b04      	cmp	r3, #4
 8000912:	dde0      	ble.n	80008d6 <check_eeprom+0x26>
			}
		}
		return 0; // return 0 if all data_read == 0xFF ( no backup data )
 8000914:	2300      	movs	r3, #0
 8000916:	e001      	b.n	800091c <check_eeprom+0x6c>
	}
	else
	{
		return -1;
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800091c:	4618      	mov	r0, r3
 800091e:	3730      	adds	r7, #48	; 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bdb0      	pop	{r4, r5, r7, pc}
 8000924:	0800665c 	.word	0x0800665c

08000928 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x7E // some lcd 0x3F

void lcd_send_cmd (char cmd)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af02      	add	r7, sp, #8
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	f023 030f 	bic.w	r3, r3, #15
 8000938:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	011b      	lsls	r3, r3, #4
 800093e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	f043 030c 	orr.w	r3, r3, #12
 8000946:	b2db      	uxtb	r3, r3
 8000948:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	b2db      	uxtb	r3, r3
 8000952:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000954:	7bbb      	ldrb	r3, [r7, #14]
 8000956:	f043 030c 	orr.w	r3, r3, #12
 800095a:	b2db      	uxtb	r3, r3
 800095c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	b2db      	uxtb	r3, r3
 8000966:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000968:	f107 0208 	add.w	r2, r7, #8
 800096c:	2364      	movs	r3, #100	; 0x64
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2304      	movs	r3, #4
 8000972:	217e      	movs	r1, #126	; 0x7e
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <lcd_send_cmd+0x5c>)
 8000976:	f002 fc33 	bl	80031e0 <HAL_I2C_Master_Transmit>
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000dc 	.word	0x200000dc

08000988 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af02      	add	r7, sp, #8
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f023 030f 	bic.w	r3, r3, #15
 8000998:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	011b      	lsls	r3, r3, #4
 800099e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	f043 030d 	orr.w	r3, r3, #13
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	f043 0309 	orr.w	r3, r3, #9
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80009b4:	7bbb      	ldrb	r3, [r7, #14]
 80009b6:	f043 030d 	orr.w	r3, r3, #13
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80009be:	7bbb      	ldrb	r3, [r7, #14]
 80009c0:	f043 0309 	orr.w	r3, r3, #9
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009c8:	f107 0208 	add.w	r2, r7, #8
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2304      	movs	r3, #4
 80009d2:	217e      	movs	r1, #126	; 0x7e
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <lcd_send_data+0x5c>)
 80009d6:	f002 fc03 	bl	80031e0 <HAL_I2C_Master_Transmit>
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000dc 	.word	0x200000dc

080009e8 <lcd_init>:

void lcd_init (void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80009ec:	2033      	movs	r0, #51	; 0x33
 80009ee:	f7ff ff9b 	bl	8000928 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80009f2:	2032      	movs	r0, #50	; 0x32
 80009f4:	f7ff ff98 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(50);
 80009f8:	2032      	movs	r0, #50	; 0x32
 80009fa:	f001 fd81 	bl	8002500 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80009fe:	2028      	movs	r0, #40	; 0x28
 8000a00:	f7ff ff92 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(50);
 8000a04:	2032      	movs	r0, #50	; 0x32
 8000a06:	f001 fd7b 	bl	8002500 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff ff8c 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(50);
 8000a10:	2032      	movs	r0, #50	; 0x32
 8000a12:	f001 fd75 	bl	8002500 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000a16:	2006      	movs	r0, #6
 8000a18:	f7ff ff86 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(50);
 8000a1c:	2032      	movs	r0, #50	; 0x32
 8000a1e:	f001 fd6f 	bl	8002500 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000a22:	200c      	movs	r0, #12
 8000a24:	f7ff ff80 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(50);
 8000a28:	2032      	movs	r0, #50	; 0x32
 8000a2a:	f001 fd69 	bl	8002500 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f7ff ff7a 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(50);
 8000a34:	2032      	movs	r0, #50	; 0x32
 8000a36:	f001 fd63 	bl	8002500 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000a3a:	2080      	movs	r0, #128	; 0x80
 8000a3c:	f7ff ff74 	bl	8000928 <lcd_send_cmd>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000a4c:	e006      	b.n	8000a5c <lcd_send_string+0x18>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	607a      	str	r2, [r7, #4]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ff96 	bl	8000988 <lcd_send_data>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1f4      	bne.n	8000a4e <lcd_send_string+0xa>
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <lcd_clear_display>:
	for (int i; i < sizeof(str_data); i++) {
		lcd_send_data(str_data[i]);
	}
}
void lcd_clear_display (void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	// lcd_send_cmd (0x01); //clear display - cais nafy dung nhu cut
	lcd_goto_XY(1,0); lcd_send_string("                ");
 8000a74:	2100      	movs	r1, #0
 8000a76:	2001      	movs	r0, #1
 8000a78:	f000 f80e 	bl	8000a98 <lcd_goto_XY>
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <lcd_clear_display+0x24>)
 8000a7e:	f7ff ffe1 	bl	8000a44 <lcd_send_string>
	lcd_goto_XY(2,0); lcd_send_string("                ");
 8000a82:	2100      	movs	r1, #0
 8000a84:	2002      	movs	r0, #2
 8000a86:	f000 f807 	bl	8000a98 <lcd_goto_XY>
 8000a8a:	4802      	ldr	r0, [pc, #8]	; (8000a94 <lcd_clear_display+0x24>)
 8000a8c:	f7ff ffda 	bl	8000a44 <lcd_send_string>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	0800667c 	.word	0x0800667c

08000a98 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d108      	bne.n	8000aba <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4413      	add	r3, r2
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	337f      	adds	r3, #127	; 0x7f
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e008      	b.n	8000acc <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3340      	adds	r3, #64	; 0x40
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ff2a 	bl	8000928 <lcd_send_cmd>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == watersensor_input_Pin)
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	2b40      	cmp	r3, #64	; 0x40
 8000aea:	d106      	bne.n	8000afa <HAL_GPIO_EXTI_Callback+0x1e>
	{
		freq_count++;
 8000aec:	4b5b      	ldr	r3, [pc, #364]	; (8000c5c <HAL_GPIO_EXTI_Callback+0x180>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	3301      	adds	r3, #1
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b59      	ldr	r3, [pc, #356]	; (8000c5c <HAL_GPIO_EXTI_Callback+0x180>)
 8000af8:	801a      	strh	r2, [r3, #0]
	}
	if (GPIO_Pin == pulse_input_Pin)
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	2b80      	cmp	r3, #128	; 0x80
 8000afe:	d111      	bne.n	8000b24 <HAL_GPIO_EXTI_Callback+0x48>
	{
		ZC = true;
 8000b00:	4b57      	ldr	r3, [pc, #348]	; (8000c60 <HAL_GPIO_EXTI_Callback+0x184>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	701a      	strb	r2, [r3, #0]
		// if (power_loss_flag) {
		// 	power_loss_flag = false;
		// 	HAL_NVIC_SystemReset();
		// }
		// turn on triac and start timer 2
		if (motorRun)
 8000b06:	4b57      	ldr	r3, [pc, #348]	; (8000c64 <HAL_GPIO_EXTI_Callback+0x188>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d005      	beq.n	8000b1a <HAL_GPIO_EXTI_Callback+0x3e>
		{
			// __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, alpha); // Change CCR1 value dynamically
			// HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);			 // Starts the timer
			HAL_GPIO_WritePin(triac_gate_GPIO_Port, triac_gate_Pin, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2108      	movs	r1, #8
 8000b12:	4855      	ldr	r0, [pc, #340]	; (8000c68 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000b14:	f002 f9ef 	bl	8002ef6 <HAL_GPIO_WritePin>
 8000b18:	e004      	b.n	8000b24 <HAL_GPIO_EXTI_Callback+0x48>
		} else {
			HAL_GPIO_WritePin(triac_gate_GPIO_Port, triac_gate_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2108      	movs	r1, #8
 8000b1e:	4852      	ldr	r0, [pc, #328]	; (8000c68 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000b20:	f002 f9e9 	bl	8002ef6 <HAL_GPIO_WritePin>
		}
	}
	if (GPIO_Pin == button1_Pin)
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b2a:	d14c      	bne.n	8000bc6 <HAL_GPIO_EXTI_Callback+0xea>
	{
		if (has_backup_data)
 8000b2c:	4b4f      	ldr	r3, [pc, #316]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x190>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d006      	beq.n	8000b42 <HAL_GPIO_EXTI_Callback+0x66>
		{
			/* nếu là vừa mở máy, có dữ liệu backup và nút start được nhấn thì chạy ctrinh backup*/
			backup_run_flag = true; // fix hêrre
 8000b34:	4b4e      	ldr	r3, [pc, #312]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x194>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
			has_backup_data = false;
 8000b3a:	4b4c      	ldr	r3, [pc, #304]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x190>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	e041      	b.n	8000bc6 <HAL_GPIO_EXTI_Callback+0xea>
			// } else if(procedure_run_flag == -4) {
			// 	flag = true;
			// 	paused = false;
			// 	procedure_run_flag = 1; // tiep tuc
			// }
			if ( !paused ) {
 8000b42:	4b4c      	ldr	r3, [pc, #304]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x198>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	f083 0301 	eor.w	r3, r3, #1
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d03a      	beq.n	8000bc6 <HAL_GPIO_EXTI_Callback+0xea>
				if (!HAL_GPIO_ReadPin(door_sensor_GPIO_Port, door_sensor_Pin))
 8000b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b54:	4848      	ldr	r0, [pc, #288]	; (8000c78 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000b56:	f002 f9b7 	bl	8002ec8 <HAL_GPIO_ReadPin>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d12c      	bne.n	8000bba <HAL_GPIO_EXTI_Callback+0xde>
				{
					if ((mode_select[0] != 0 && mode_select[1] != 0 && mode_select[2] != 0) || (mode_select[0] == 5))
 8000b60:	4b46      	ldr	r3, [pc, #280]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d009      	beq.n	8000b7e <HAL_GPIO_EXTI_Callback+0xa2>
 8000b6a:	4b44      	ldr	r3, [pc, #272]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d004      	beq.n	8000b7e <HAL_GPIO_EXTI_Callback+0xa2>
 8000b74:	4b41      	ldr	r3, [pc, #260]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000b76:	789b      	ldrb	r3, [r3, #2]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d104      	bne.n	8000b88 <HAL_GPIO_EXTI_Callback+0xac>
 8000b7e:	4b3f      	ldr	r3, [pc, #252]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b05      	cmp	r3, #5
 8000b86:	d106      	bne.n	8000b96 <HAL_GPIO_EXTI_Callback+0xba>
					{
						flag = true;
 8000b88:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
						procedure_run_flag = 1; // chạy ok
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	e005      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0xc6>
					}
					else
					{
						flag = true;
 8000b96:	4b3a      	ldr	r3, [pc, #232]	; (8000c80 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
						procedure_run_flag = -1; //lỗi chưa chọn đủ input
 8000b9c:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	701a      	strb	r2, [r3, #0]
					}
					if (procedure_run_flag == -3) { // tiếp tục chạy sau khi đã đóng cửa
 8000ba2:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	f113 0f03 	cmn.w	r3, #3
 8000bac:	d10b      	bne.n	8000bc6 <HAL_GPIO_EXTI_Callback+0xea>
						HAL_ResumeTick();
 8000bae:	f001 fcd9 	bl	8002564 <HAL_ResumeTick>
						procedure_run_flag = 1;
 8000bb2:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	e005      	b.n	8000bc6 <HAL_GPIO_EXTI_Callback+0xea>
					}
				}
				else
				{
					flag = true;
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
					procedure_run_flag = -2; //lỗi chưa đongs cửa
 8000bc0:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000bc2:	22fe      	movs	r2, #254	; 0xfe
 8000bc4:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	if (!procedure_run_flag) {
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d141      	bne.n	8000c54 <HAL_GPIO_EXTI_Callback+0x178>
		if (GPIO_Pin == button2_Pin)
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bd6:	d111      	bne.n	8000bfc <HAL_GPIO_EXTI_Callback+0x120>
			== 2 : giat ngam (giat lau lau lau)
			== 3 : giat nhanh (giat nhe)
			== 4 : vat va xa
			== 5 : chi xa
			*/
			mode_select[0]++;
 8000bd8:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	3301      	adds	r3, #1
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000be4:	701a      	strb	r2, [r3, #0]
			if (mode_select[0] > 5)
 8000be6:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d902      	bls.n	8000bf6 <HAL_GPIO_EXTI_Callback+0x11a>
			{
				mode_select[0] = 1;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
			}
			has_backup_data = false;
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x190>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == button3_Pin)
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c02:	d111      	bne.n	8000c28 <HAL_GPIO_EXTI_Callback+0x14c>
		{
			/*
			mode_select[1] - bien luu muc nuoc
			== i : muc nuoc = (i*10)%
			*/
			mode_select[1]++;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c06:	785b      	ldrb	r3, [r3, #1]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c10:	705a      	strb	r2, [r3, #1]
			if (mode_select[1] > 10)
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c14:	785b      	ldrb	r3, [r3, #1]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b0a      	cmp	r3, #10
 8000c1a:	d902      	bls.n	8000c22 <HAL_GPIO_EXTI_Callback+0x146>
			{
				mode_select[1] = 1;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	705a      	strb	r2, [r3, #1]
			}
			has_backup_data = false;
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x190>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == button4_Pin)
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c2e:	d111      	bne.n	8000c54 <HAL_GPIO_EXTI_Callback+0x178>
		{
			/*
			mode_select[2] - bien luu so lan xa
			== i : so lan xa = i (i <= 3)
			*/
			mode_select[2]++;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c32:	789b      	ldrb	r3, [r3, #2]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c3c:	709a      	strb	r2, [r3, #2]
			if (mode_select[2] > 3)
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c40:	789b      	ldrb	r3, [r3, #2]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d902      	bls.n	8000c4e <HAL_GPIO_EXTI_Callback+0x172>
			{
				mode_select[2] = 1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	709a      	strb	r2, [r3, #2]
			}
			has_backup_data = false;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x190>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000021a 	.word	0x2000021a
 8000c60:	20000219 	.word	0x20000219
 8000c64:	20000217 	.word	0x20000217
 8000c68:	40010c00 	.word	0x40010c00
 8000c6c:	2000022e 	.word	0x2000022e
 8000c70:	20000214 	.word	0x20000214
 8000c74:	20000218 	.word	0x20000218
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	20000220 	.word	0x20000220
 8000c80:	2000022d 	.word	0x2000022d
 8000c84:	20000216 	.word	0x20000216

08000c88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d129      	bne.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x66>
		// frequency = freq_count
		/*
		 * Water level: 0% ~ f = 11300Hz; 100% ~ f = 9000Hz
		 * Need to make a graph for this, temporarily use Linear
		 */
		int cal_level  = (int)((-0.04563 * freq_count) + 468.5045); // convert into 0-100% ax+b
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fcd1 	bl	8000648 <__aeabi_i2d>
 8000ca6:	a314      	add	r3, pc, #80	; (adr r3, 8000cf8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cac:	f7ff fa50 	bl	8000150 <__aeabi_dmul>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	a311      	add	r3, pc, #68	; (adr r3, 8000d00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbe:	f7ff fb77 	bl	80003b0 <__adddf3>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f7ff fd27 	bl	800071c <__aeabi_d2iz>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	60fb      	str	r3, [r7, #12]
		if (cal_level < 0) {
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	da03      	bge.n	8000ce0 <HAL_TIM_PeriodElapsedCallback+0x58>
			water_level = 0;
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	e003      	b.n	8000ce8 <HAL_TIM_PeriodElapsedCallback+0x60>
		} else {
			water_level = cal_level;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ce6:	701a      	strb	r2, [r3, #0]
		// sprintf(data, "w:%d c:%d%%", freq_count, water_level );
		// lcd_goto_XY(1, 0);
		// lcd_send_string("test water level");
		// lcd_goto_XY(2, 0);
		// lcd_send_string(data);
		freq_count = 0;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	801a      	strh	r2, [r3, #0]
	}
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	bb6ed677 	.word	0xbb6ed677
 8000cfc:	bfa75cd0 	.word	0xbfa75cd0
 8000d00:	6e978d50 	.word	0x6e978d50
 8000d04:	407d4812 	.word	0x407d4812
 8000d08:	40000800 	.word	0x40000800
 8000d0c:	2000021a 	.word	0x2000021a
 8000d10:	2000021c 	.word	0x2000021c

08000d14 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d1a:	f001 fb8f 	bl	800243c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d1e:	f000 f897 	bl	8000e50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d22:	f000 fa49 	bl	80011b8 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000d26:	f000 f8e5 	bl	8000ef4 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000d2a:	f000 f97d 	bl	8001028 <MX_TIM2_Init>
	MX_I2C1_Init();
 8000d2e:	f000 f91f 	bl	8000f70 <MX_I2C1_Init>
	MX_I2C2_Init();
 8000d32:	f000 f94b 	bl	8000fcc <MX_I2C2_Init>
	MX_TIM4_Init();
 8000d36:	f000 f9ed 	bl	8001114 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(1000); // delay 1000ms to wait for everything
 8000d3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3e:	f001 fbdf 	bl	8002500 <HAL_Delay>
	lcd_init();
 8000d42:	f7ff fe51 	bl	80009e8 <lcd_init>
	updateLCD();
 8000d46:	f000 faff 	bl	8001348 <updateLCD>
	onStart = false;
 8000d4a:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <main+0x110>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
	procedure_init();
 8000d50:	f000 ff4e 	bl	8001bf0 <procedure_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		updateLCD();
 8000d54:	f000 faf8 	bl	8001348 <updateLCD>
		power_observer();
 8000d58:	f000 fcde 	bl	8001718 <power_observer>
		if (backup_run_flag) {
 8000d5c:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <main+0x114>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d02b      	beq.n	8000dbe <main+0xaa>
			if (HAL_GPIO_ReadPin(door_sensor_GPIO_Port, door_sensor_Pin) && current_step!=1) {
 8000d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6a:	4830      	ldr	r0, [pc, #192]	; (8000e2c <main+0x118>)
 8000d6c:	f002 f8ac 	bl	8002ec8 <HAL_GPIO_ReadPin>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d019      	beq.n	8000daa <main+0x96>
 8000d76:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <main+0x11c>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d015      	beq.n	8000daa <main+0x96>
				/*if door is open when in other step than filling water, stop program and display error message*/
				motorRun = false; // tắt động cơ
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <main+0x120>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
				flag = true; //display door error message
 8000d84:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <main+0x124>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
				procedure_run_flag = -3;
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <main+0x128>)
 8000d8c:	22fd      	movs	r2, #253	; 0xfd
 8000d8e:	701a      	strb	r2, [r3, #0]
				HAL_SuspendTick();
 8000d90:	f001 fbda 	bl	8002548 <HAL_SuspendTick>
				HAL_GPIO_WritePin(drain_gate_GPIO_Port, drain_gate_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2110      	movs	r1, #16
 8000d98:	4829      	ldr	r0, [pc, #164]	; (8000e40 <main+0x12c>)
 8000d9a:	f002 f8ac 	bl	8002ef6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(triac_gate_GPIO_Port, triac_gate_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2108      	movs	r1, #8
 8000da2:	4827      	ldr	r0, [pc, #156]	; (8000e40 <main+0x12c>)
 8000da4:	f002 f8a7 	bl	8002ef6 <HAL_GPIO_WritePin>
 8000da8:	e009      	b.n	8000dbe <main+0xaa>
			} else {
				run_procedure_backup(mode_select, water_level, &procedure_run_flag, &motorRun, &alpha);
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <main+0x130>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2d9      	uxtb	r1, r3
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <main+0x134>)
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <main+0x120>)
 8000db6:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <main+0x128>)
 8000db8:	4824      	ldr	r0, [pc, #144]	; (8000e4c <main+0x138>)
 8000dba:	f000 ffa3 	bl	8001d04 <run_procedure_backup>
			}
		}
		if (procedure_run_flag == 1 )
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <main+0x128>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d1c5      	bne.n	8000d54 <main+0x40>
		{
			if (HAL_GPIO_ReadPin(door_sensor_GPIO_Port, door_sensor_Pin) && current_step!=1) {
 8000dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dcc:	4817      	ldr	r0, [pc, #92]	; (8000e2c <main+0x118>)
 8000dce:	f002 f87b 	bl	8002ec8 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d019      	beq.n	8000e0c <main+0xf8>
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <main+0x11c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d015      	beq.n	8000e0c <main+0xf8>
				/*if door is open when in other step than filling water, stop program and display error message*/
				motorRun = false; // tắt động cơ
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <main+0x120>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
				flag = true; //display door error message
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <main+0x124>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
				procedure_run_flag = -3;
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <main+0x128>)
 8000dee:	22fd      	movs	r2, #253	; 0xfd
 8000df0:	701a      	strb	r2, [r3, #0]
				HAL_SuspendTick();
 8000df2:	f001 fba9 	bl	8002548 <HAL_SuspendTick>
				HAL_GPIO_WritePin(drain_gate_GPIO_Port, drain_gate_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4811      	ldr	r0, [pc, #68]	; (8000e40 <main+0x12c>)
 8000dfc:	f002 f87b 	bl	8002ef6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(triac_gate_GPIO_Port, triac_gate_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2108      	movs	r1, #8
 8000e04:	480e      	ldr	r0, [pc, #56]	; (8000e40 <main+0x12c>)
 8000e06:	f002 f876 	bl	8002ef6 <HAL_GPIO_WritePin>
 8000e0a:	e009      	b.n	8000e20 <main+0x10c>
			} else {
				run_procedure(mode_select, water_level, &procedure_run_flag, &motorRun, &alpha);
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <main+0x130>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2d9      	uxtb	r1, r3
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <main+0x134>)
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <main+0x120>)
 8000e18:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <main+0x128>)
 8000e1a:	480c      	ldr	r0, [pc, #48]	; (8000e4c <main+0x138>)
 8000e1c:	f000 fef6 	bl	8001c0c <run_procedure>
		updateLCD();
 8000e20:	e798      	b.n	8000d54 <main+0x40>
 8000e22:	bf00      	nop
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000214 	.word	0x20000214
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	20000265 	.word	0x20000265
 8000e34:	20000217 	.word	0x20000217
 8000e38:	2000022d 	.word	0x2000022d
 8000e3c:	20000216 	.word	0x20000216
 8000e40:	40010c00 	.word	0x40010c00
 8000e44:	2000021c 	.word	0x2000021c
 8000e48:	2000021e 	.word	0x2000021e
 8000e4c:	20000220 	.word	0x20000220

08000e50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b094      	sub	sp, #80	; 0x50
 8000e54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5a:	2228      	movs	r2, #40	; 0x28
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f004 ff6e 	bl	8005d40 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e80:	2302      	movs	r3, #2
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e84:	2301      	movs	r3, #1
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e88:	2310      	movs	r3, #16
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e94:	4618      	mov	r0, r3
 8000e96:	f003 fb73 	bl	8004580 <HAL_RCC_OscConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0x54>
	{
		Error_Handler();
 8000ea0:	f000 fc9a 	bl	80017d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb4:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f003 fddf 	bl	8004a84 <HAL_RCC_ClockConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x80>
	{
		Error_Handler();
 8000ecc:	f000 fc84 	bl	80017d8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	4618      	mov	r0, r3
 8000edc:	f003 ff4c 	bl	8004d78 <HAL_RCCEx_PeriphCLKConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000ee6:	f000 fc77 	bl	80017d8 <Error_Handler>
	}
}
 8000eea:	bf00      	nop
 8000eec:	3750      	adds	r7, #80	; 0x50
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <MX_ADC1_Init+0x74>)
 8000f06:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <MX_ADC1_Init+0x78>)
 8000f08:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_ADC1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_ADC1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_ADC1_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_ADC1_Init+0x74>)
 8000f1e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f22:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_ADC1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_ADC1_Init+0x74>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <MX_ADC1_Init+0x74>)
 8000f32:	f001 fb25 	bl	8002580 <HAL_ADC_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8000f3c:	f000 fc4c 	bl	80017d8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_ADC1_Init+0x74>)
 8000f52:	f001 fbed 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8000f5c:	f000 fc3c 	bl	80017d8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200000ac 	.word	0x200000ac
 8000f6c:	40012400 	.word	0x40012400

08000f70 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f76:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <MX_I2C1_Init+0x54>)
 8000f78:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <MX_I2C1_Init+0x58>)
 8000f7e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f92:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000fae:	f001 ffd3 	bl	8002f58 <HAL_I2C_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000fb8:	f000 fc0e 	bl	80017d8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200000dc 	.word	0x200000dc
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	000186a0 	.word	0x000186a0

08000fcc <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_I2C2_Init+0x50>)
 8000fd2:	4a13      	ldr	r2, [pc, #76]	; (8001020 <MX_I2C2_Init+0x54>)
 8000fd4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_I2C2_Init+0x50>)
 8000fd8:	4a12      	ldr	r2, [pc, #72]	; (8001024 <MX_I2C2_Init+0x58>)
 8000fda:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_I2C2_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_I2C2_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_I2C2_Init+0x50>)
 8000fea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fee:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <MX_I2C2_Init+0x50>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_I2C2_Init+0x50>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <MX_I2C2_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_I2C2_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_I2C2_Init+0x50>)
 800100a:	f001 ffa5 	bl	8002f58 <HAL_I2C_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8001014:	f000 fbe0 	bl	80017d8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000130 	.word	0x20000130
 8001020:	40005800 	.word	0x40005800
 8001024:	000186a0 	.word	0x000186a0

08001028 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08e      	sub	sp, #56	; 0x38
 800102c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103c:	f107 0320 	add.w	r3, r7, #32
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
 8001054:	615a      	str	r2, [r3, #20]
 8001056:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001058:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <MX_TIM2_Init+0xe8>)
 800105a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 80-1;
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <MX_TIM2_Init+0xe8>)
 8001062:	224f      	movs	r2, #79	; 0x4f
 8001064:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <MX_TIM2_Init+0xe8>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFF - 1;
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <MX_TIM2_Init+0xe8>)
 800106e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001072:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b26      	ldr	r3, [pc, #152]	; (8001110 <MX_TIM2_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800107a:	4b25      	ldr	r3, [pc, #148]	; (8001110 <MX_TIM2_Init+0xe8>)
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001080:	4823      	ldr	r0, [pc, #140]	; (8001110 <MX_TIM2_Init+0xe8>)
 8001082:	f003 ff2f 	bl	8004ee4 <HAL_TIM_Base_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM2_Init+0x68>
	{
		Error_Handler();
 800108c:	f000 fba4 	bl	80017d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109a:	4619      	mov	r1, r3
 800109c:	481c      	ldr	r0, [pc, #112]	; (8001110 <MX_TIM2_Init+0xe8>)
 800109e:	f004 fa19 	bl	80054d4 <HAL_TIM_ConfigClockSource>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 80010a8:	f000 fb96 	bl	80017d8 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80010ac:	4818      	ldr	r0, [pc, #96]	; (8001110 <MX_TIM2_Init+0xe8>)
 80010ae:	f003 ffbb 	bl	8005028 <HAL_TIM_OC_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 80010b8:	f000 fb8e 	bl	80017d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c4:	f107 0320 	add.w	r3, r7, #32
 80010c8:	4619      	mov	r1, r3
 80010ca:	4811      	ldr	r0, [pc, #68]	; (8001110 <MX_TIM2_Init+0xe8>)
 80010cc:	f004 fd9e 	bl	8005c0c <HAL_TIMEx_MasterConfigSynchronization>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0xb2>
	{
		Error_Handler();
 80010d6:	f000 fb7f 	bl	80017d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	4619      	mov	r1, r3
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <MX_TIM2_Init+0xe8>)
 80010f2:	f004 f993 	bl	800541c <HAL_TIM_OC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0xd8>
	{
		Error_Handler();
 80010fc:	f000 fb6c 	bl	80017d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <MX_TIM2_Init+0xe8>)
 8001102:	f000 fc99 	bl	8001a38 <HAL_TIM_MspPostInit>
}
 8001106:	bf00      	nop
 8001108:	3738      	adds	r7, #56	; 0x38
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000184 	.word	0x20000184

08001114 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <MX_TIM4_Init+0x9c>)
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <MX_TIM4_Init+0xa0>)
 8001134:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 8000 - 1;
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_TIM4_Init+0x9c>)
 8001138:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800113c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <MX_TIM4_Init+0x9c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1000 - 1;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_TIM4_Init+0x9c>)
 8001146:	f240 32e7 	movw	r2, #999	; 0x3e7
 800114a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_TIM4_Init+0x9c>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_TIM4_Init+0x9c>)
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001158:	4815      	ldr	r0, [pc, #84]	; (80011b0 <MX_TIM4_Init+0x9c>)
 800115a:	f003 fec3 	bl	8004ee4 <HAL_TIM_Base_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM4_Init+0x54>
	{
		Error_Handler();
 8001164:	f000 fb38 	bl	80017d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	4619      	mov	r1, r3
 8001174:	480e      	ldr	r0, [pc, #56]	; (80011b0 <MX_TIM4_Init+0x9c>)
 8001176:	f004 f9ad 	bl	80054d4 <HAL_TIM_ConfigClockSource>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 8001180:	f000 fb2a 	bl	80017d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800118c:	463b      	mov	r3, r7
 800118e:	4619      	mov	r1, r3
 8001190:	4807      	ldr	r0, [pc, #28]	; (80011b0 <MX_TIM4_Init+0x9c>)
 8001192:	f004 fd3b 	bl	8005c0c <HAL_TIMEx_MasterConfigSynchronization>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 800119c:	f000 fb1c 	bl	80017d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <MX_TIM4_Init+0x9c>)
 80011a2:	f003 feef 	bl	8004f84 <HAL_TIM_Base_Start_IT>
	/* USER CODE END TIM4_Init 2 */
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001cc 	.word	0x200001cc
 80011b4:	40000800 	.word	0x40000800

080011b8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	4b59      	ldr	r3, [pc, #356]	; (8001334 <MX_GPIO_Init+0x17c>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a58      	ldr	r2, [pc, #352]	; (8001334 <MX_GPIO_Init+0x17c>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b56      	ldr	r3, [pc, #344]	; (8001334 <MX_GPIO_Init+0x17c>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011e4:	4b53      	ldr	r3, [pc, #332]	; (8001334 <MX_GPIO_Init+0x17c>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a52      	ldr	r2, [pc, #328]	; (8001334 <MX_GPIO_Init+0x17c>)
 80011ea:	f043 0320 	orr.w	r3, r3, #32
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b50      	ldr	r3, [pc, #320]	; (8001334 <MX_GPIO_Init+0x17c>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0320 	and.w	r3, r3, #32
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <MX_GPIO_Init+0x17c>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a4c      	ldr	r2, [pc, #304]	; (8001334 <MX_GPIO_Init+0x17c>)
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <MX_GPIO_Init+0x17c>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001214:	4b47      	ldr	r3, [pc, #284]	; (8001334 <MX_GPIO_Init+0x17c>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a46      	ldr	r2, [pc, #280]	; (8001334 <MX_GPIO_Init+0x17c>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b44      	ldr	r3, [pc, #272]	; (8001334 <MX_GPIO_Init+0x17c>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001232:	4841      	ldr	r0, [pc, #260]	; (8001338 <MX_GPIO_Init+0x180>)
 8001234:	f001 fe5f 	bl	8002ef6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_12, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f241 0102 	movw	r1, #4098	; 0x1002
 800123e:	483f      	ldr	r0, [pc, #252]	; (800133c <MX_GPIO_Init+0x184>)
 8001240:	f001 fe59 	bl	8002ef6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2138      	movs	r1, #56	; 0x38
 8001248:	483d      	ldr	r0, [pc, #244]	; (8001340 <MX_GPIO_Init+0x188>)
 800124a:	f001 fe54 	bl	8002ef6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800124e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001252:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2302      	movs	r3, #2
 800125e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	4619      	mov	r1, r3
 8001266:	4834      	ldr	r0, [pc, #208]	; (8001338 <MX_GPIO_Init+0x180>)
 8001268:	f001 fcaa 	bl	8002bc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_12;
 800126c:	f241 0302 	movw	r3, #4098	; 0x1002
 8001270:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2302      	movs	r3, #2
 800127c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4619      	mov	r1, r3
 8001284:	482d      	ldr	r0, [pc, #180]	; (800133c <MX_GPIO_Init+0x184>)
 8001286:	f001 fc9b 	bl	8002bc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800128a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800128e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001290:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <MX_GPIO_Init+0x18c>)
 8001292:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	4828      	ldr	r0, [pc, #160]	; (8001340 <MX_GPIO_Init+0x188>)
 80012a0:	f001 fc8e 	bl	8002bc0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4619      	mov	r1, r3
 80012b8:	4820      	ldr	r0, [pc, #128]	; (800133c <MX_GPIO_Init+0x184>)
 80012ba:	f001 fc81 	bl	8002bc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80012be:	2338      	movs	r3, #56	; 0x38
 80012c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	4619      	mov	r1, r3
 80012d4:	481a      	ldr	r0, [pc, #104]	; (8001340 <MX_GPIO_Init+0x188>)
 80012d6:	f001 fc73 	bl	8002bc0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012da:	2340      	movs	r3, #64	; 0x40
 80012dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_GPIO_Init+0x18c>)
 80012e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4619      	mov	r1, r3
 80012ec:	4814      	ldr	r0, [pc, #80]	; (8001340 <MX_GPIO_Init+0x188>)
 80012ee:	f001 fc67 	bl	8002bc0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <MX_GPIO_Init+0x18c>)
 80012f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	480e      	ldr	r0, [pc, #56]	; (8001340 <MX_GPIO_Init+0x188>)
 8001306:	f001 fc5b 	bl	8002bc0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2017      	movs	r0, #23
 8001310:	f001 fc1f 	bl	8002b52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001314:	2017      	movs	r0, #23
 8001316:	f001 fc38 	bl	8002b8a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2028      	movs	r0, #40	; 0x28
 8001320:	f001 fc17 	bl	8002b52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001324:	2028      	movs	r0, #40	; 0x28
 8001326:	f001 fc30 	bl	8002b8a <HAL_NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	40011000 	.word	0x40011000
 800133c:	40010800 	.word	0x40010800
 8001340:	40010c00 	.word	0x40010c00
 8001344:	10110000 	.word	0x10110000

08001348 <updateLCD>:

/* USER CODE BEGIN 4 */
void updateLCD( void )
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b099      	sub	sp, #100	; 0x64
 800134c:	af02      	add	r7, sp, #8
	/*
	Updating LCD if index is different from current index;
	*/
	static uint32_t previous_tick = 0;		 // variable to store previous time
	static int previous_mode[3] = {0, 0, 0}; // make sure initial current == mode_select to display first message
	if (onStart)
 800134e:	4bb1      	ldr	r3, [pc, #708]	; (8001614 <updateLCD+0x2cc>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d051      	beq.n	80013fc <updateLCD+0xb4>
	{
		lcd_goto_XY(1, 0);
 8001358:	2100      	movs	r1, #0
 800135a:	2001      	movs	r0, #1
 800135c:	f7ff fb9c 	bl	8000a98 <lcd_goto_XY>
		lcd_send_string("MyWashingMachine");
 8001360:	48ad      	ldr	r0, [pc, #692]	; (8001618 <updateLCD+0x2d0>)
 8001362:	f7ff fb6f 	bl	8000a44 <lcd_send_string>
		int8_t retval = check_eeprom(backupData_eeprom);
 8001366:	48ad      	ldr	r0, [pc, #692]	; (800161c <updateLCD+0x2d4>)
 8001368:	f7ff faa2 	bl	80008b0 <check_eeprom>
 800136c:	4603      	mov	r3, r0
 800136e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		switch (retval)
 8001372:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8001376:	2b01      	cmp	r3, #1
 8001378:	d018      	beq.n	80013ac <updateLCD+0x64>
 800137a:	2b01      	cmp	r3, #1
 800137c:	f300 81bd 	bgt.w	80016fa <updateLCD+0x3b2>
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001384:	d002      	beq.n	800138c <updateLCD+0x44>
 8001386:	2b00      	cmp	r3, #0
 8001388:	d008      	beq.n	800139c <updateLCD+0x54>
 800138a:	e1b6      	b.n	80016fa <updateLCD+0x3b2>
		{
		case -1: // eeprom error code
			lcd_goto_XY(2, 0);
 800138c:	2100      	movs	r1, #0
 800138e:	2002      	movs	r0, #2
 8001390:	f7ff fb82 	bl	8000a98 <lcd_goto_XY>
			lcd_send_string("Eeprom failed!");
 8001394:	48a2      	ldr	r0, [pc, #648]	; (8001620 <updateLCD+0x2d8>)
 8001396:	f7ff fb55 	bl	8000a44 <lcd_send_string>
			return;
 800139a:	e1ae      	b.n	80016fa <updateLCD+0x3b2>
		case 0: // eeprom ok, no recovery data
			lcd_goto_XY(2, 0);
 800139c:	2100      	movs	r1, #0
 800139e:	2002      	movs	r0, #2
 80013a0:	f7ff fb7a 	bl	8000a98 <lcd_goto_XY>
			lcd_send_string("Eeprom OK!");
 80013a4:	489f      	ldr	r0, [pc, #636]	; (8001624 <updateLCD+0x2dc>)
 80013a6:	f7ff fb4d 	bl	8000a44 <lcd_send_string>
			return;
 80013aa:	e1a6      	b.n	80016fa <updateLCD+0x3b2>
		case 1:
			lcd_goto_XY(1, 0);
 80013ac:	2100      	movs	r1, #0
 80013ae:	2001      	movs	r0, #1
 80013b0:	f7ff fb72 	bl	8000a98 <lcd_goto_XY>
			char data[16];
			sprintf(data, "Backup: %d %d %d %d        ", backupData_eeprom[0], backupData_eeprom[1], backupData_eeprom[2], backupData_eeprom[3]);
 80013b4:	4b99      	ldr	r3, [pc, #612]	; (800161c <updateLCD+0x2d4>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	4b98      	ldr	r3, [pc, #608]	; (800161c <updateLCD+0x2d4>)
 80013bc:	785b      	ldrb	r3, [r3, #1]
 80013be:	461c      	mov	r4, r3
 80013c0:	4b96      	ldr	r3, [pc, #600]	; (800161c <updateLCD+0x2d4>)
 80013c2:	789b      	ldrb	r3, [r3, #2]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b95      	ldr	r3, [pc, #596]	; (800161c <updateLCD+0x2d4>)
 80013c8:	78db      	ldrb	r3, [r3, #3]
 80013ca:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	9200      	str	r2, [sp, #0]
 80013d2:	4623      	mov	r3, r4
 80013d4:	460a      	mov	r2, r1
 80013d6:	4994      	ldr	r1, [pc, #592]	; (8001628 <updateLCD+0x2e0>)
 80013d8:	f004 fcba 	bl	8005d50 <siprintf>
			lcd_send_string(data);
 80013dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fb2f 	bl	8000a44 <lcd_send_string>
			// lcd_send_string("Bkup available! ");
			lcd_goto_XY(2, 0);
 80013e6:	2100      	movs	r1, #0
 80013e8:	2002      	movs	r0, #2
 80013ea:	f7ff fb55 	bl	8000a98 <lcd_goto_XY>
			lcd_send_string("START to resume ");
 80013ee:	488f      	ldr	r0, [pc, #572]	; (800162c <updateLCD+0x2e4>)
 80013f0:	f7ff fb28 	bl	8000a44 <lcd_send_string>
			has_backup_data = true;
 80013f4:	4b8e      	ldr	r3, [pc, #568]	; (8001630 <updateLCD+0x2e8>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
			return;
 80013fa:	e17e      	b.n	80016fa <updateLCD+0x3b2>
		}
	}
	else
	{
		/* nếu chọn chế độ thay đổi thì mới cập nhật LCD */
		for (int i = 0; i < 3; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	657b      	str	r3, [r7, #84]	; 0x54
 8001400:	e080      	b.n	8001504 <updateLCD+0x1bc>
		{
			if (previous_mode[i] != mode_select[i])
 8001402:	4a8c      	ldr	r2, [pc, #560]	; (8001634 <updateLCD+0x2ec>)
 8001404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140a:	498b      	ldr	r1, [pc, #556]	; (8001638 <updateLCD+0x2f0>)
 800140c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800140e:	440a      	add	r2, r1
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	4293      	cmp	r3, r2
 8001416:	d072      	beq.n	80014fe <updateLCD+0x1b6>
			{
				flag = true;
 8001418:	4b88      	ldr	r3, [pc, #544]	; (800163c <updateLCD+0x2f4>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
				previous_tick = HAL_GetTick();
 800141e:	f001 f865 	bl	80024ec <HAL_GetTick>
 8001422:	4603      	mov	r3, r0
 8001424:	4a86      	ldr	r2, [pc, #536]	; (8001640 <updateLCD+0x2f8>)
 8001426:	6013      	str	r3, [r2, #0]
				previous_mode[i] = mode_select[i];
 8001428:	4a83      	ldr	r2, [pc, #524]	; (8001638 <updateLCD+0x2f0>)
 800142a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4619      	mov	r1, r3
 8001434:	4a7f      	ldr	r2, [pc, #508]	; (8001634 <updateLCD+0x2ec>)
 8001436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001438:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (i == 0)
 800143c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800143e:	2b00      	cmp	r3, #0
 8001440:	d11c      	bne.n	800147c <updateLCD+0x134>
				{
					/*
					 * che do giat changed
					 */
					lcd_goto_XY(1, 0);
 8001442:	2100      	movs	r1, #0
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fb27 	bl	8000a98 <lcd_goto_XY>
					lcd_send_string("CHON MODE GIAT: ");
 800144a:	487e      	ldr	r0, [pc, #504]	; (8001644 <updateLCD+0x2fc>)
 800144c:	f7ff fafa 	bl	8000a44 <lcd_send_string>
					lcd_goto_XY(2, 0);
 8001450:	2100      	movs	r1, #0
 8001452:	2002      	movs	r0, #2
 8001454:	f7ff fb20 	bl	8000a98 <lcd_goto_XY>
					char data[16];
					sprintf(data, "%s             ", mode_names[previous_mode[0] - 1]);
 8001458:	4b76      	ldr	r3, [pc, #472]	; (8001634 <updateLCD+0x2ec>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	4a7a      	ldr	r2, [pc, #488]	; (8001648 <updateLCD+0x300>)
 8001460:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001464:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001468:	4978      	ldr	r1, [pc, #480]	; (800164c <updateLCD+0x304>)
 800146a:	4618      	mov	r0, r3
 800146c:	f004 fc70 	bl	8005d50 <siprintf>
					lcd_send_string(data);
 8001470:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fae5 	bl	8000a44 <lcd_send_string>
 800147a:	e13e      	b.n	80016fa <updateLCD+0x3b2>
					return;
				}
				if (i == 1)
 800147c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800147e:	2b01      	cmp	r3, #1
 8001480:	d11f      	bne.n	80014c2 <updateLCD+0x17a>
				{
					/*
					 * Muc nuoc changed
					 */
					lcd_goto_XY(1, 0);
 8001482:	2100      	movs	r1, #0
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff fb07 	bl	8000a98 <lcd_goto_XY>
					lcd_send_string("CHON MUC NUOC:  ");
 800148a:	4871      	ldr	r0, [pc, #452]	; (8001650 <updateLCD+0x308>)
 800148c:	f7ff fada 	bl	8000a44 <lcd_send_string>
					char data[16];
					sprintf(data, "%d %%           ", previous_mode[i] * 10);
 8001490:	4a68      	ldr	r2, [pc, #416]	; (8001634 <updateLCD+0x2ec>)
 8001492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001494:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	461a      	mov	r2, r3
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	496b      	ldr	r1, [pc, #428]	; (8001654 <updateLCD+0x30c>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 fc51 	bl	8005d50 <siprintf>
					lcd_goto_XY(2, 0);
 80014ae:	2100      	movs	r1, #0
 80014b0:	2002      	movs	r0, #2
 80014b2:	f7ff faf1 	bl	8000a98 <lcd_goto_XY>
					lcd_send_string(data);
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fac2 	bl	8000a44 <lcd_send_string>
 80014c0:	e11b      	b.n	80016fa <updateLCD+0x3b2>
					return;
				}
				if (i == 2)
 80014c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d11a      	bne.n	80014fe <updateLCD+0x1b6>
				{
					/*
					 * Chu ky xa changed
					 */
					lcd_goto_XY(1, 0);
 80014c8:	2100      	movs	r1, #0
 80014ca:	2001      	movs	r0, #1
 80014cc:	f7ff fae4 	bl	8000a98 <lcd_goto_XY>
					lcd_send_string("CHON SO LAN XA: ");
 80014d0:	4861      	ldr	r0, [pc, #388]	; (8001658 <updateLCD+0x310>)
 80014d2:	f7ff fab7 	bl	8000a44 <lcd_send_string>
					char data[16];
					sprintf(data, "Xa %d lan nuoc   ", previous_mode[i]);
 80014d6:	4a57      	ldr	r2, [pc, #348]	; (8001634 <updateLCD+0x2ec>)
 80014d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	495e      	ldr	r1, [pc, #376]	; (800165c <updateLCD+0x314>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f004 fc33 	bl	8005d50 <siprintf>
					lcd_goto_XY(2, 0);
 80014ea:	2100      	movs	r1, #0
 80014ec:	2002      	movs	r0, #2
 80014ee:	f7ff fad3 	bl	8000a98 <lcd_goto_XY>
					lcd_send_string(data);
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff faa4 	bl	8000a44 <lcd_send_string>
 80014fc:	e0fd      	b.n	80016fa <updateLCD+0x3b2>
		for (int i = 0; i < 3; i++)
 80014fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001500:	3301      	adds	r3, #1
 8001502:	657b      	str	r3, [r7, #84]	; 0x54
 8001504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001506:	2b02      	cmp	r3, #2
 8001508:	f77f af7b 	ble.w	8001402 <updateLCD+0xba>
					return;
				}
			}
		}
		if (procedure_run_flag == 1 && flag)
 800150c:	4b54      	ldr	r3, [pc, #336]	; (8001660 <updateLCD+0x318>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b25b      	sxtb	r3, r3
 8001512:	2b01      	cmp	r3, #1
 8001514:	d105      	bne.n	8001522 <updateLCD+0x1da>
 8001516:	4b49      	ldr	r3, [pc, #292]	; (800163c <updateLCD+0x2f4>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	f040 80eb 	bne.w	80016f8 <updateLCD+0x3b0>
		{
			/*hiển thị trực tiếp trong washing_procedure nên khi chạy thì k hiện gì ở đây*/
			return;
		}
		else if (procedure_run_flag == -1 && flag)
 8001522:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <updateLCD+0x318>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b25b      	sxtb	r3, r3
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d119      	bne.n	8001562 <updateLCD+0x21a>
 800152e:	4b43      	ldr	r3, [pc, #268]	; (800163c <updateLCD+0x2f4>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d014      	beq.n	8001562 <updateLCD+0x21a>
		{
			flag = false;
 8001538:	4b40      	ldr	r3, [pc, #256]	; (800163c <updateLCD+0x2f4>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
			lcd_goto_XY(1, 0);
 800153e:	2100      	movs	r1, #0
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff faa9 	bl	8000a98 <lcd_goto_XY>
			lcd_send_string("Select all input");
 8001546:	4847      	ldr	r0, [pc, #284]	; (8001664 <updateLCD+0x31c>)
 8001548:	f7ff fa7c 	bl	8000a44 <lcd_send_string>
			lcd_goto_XY(2, 0);
 800154c:	2100      	movs	r1, #0
 800154e:	2002      	movs	r0, #2
 8001550:	f7ff faa2 	bl	8000a98 <lcd_goto_XY>
			lcd_send_string("to run!         ");
 8001554:	4844      	ldr	r0, [pc, #272]	; (8001668 <updateLCD+0x320>)
 8001556:	f7ff fa75 	bl	8000a44 <lcd_send_string>
			procedure_run_flag = 0; // set procedure_run_flag = 0 to display Home back
 800155a:	4b41      	ldr	r3, [pc, #260]	; (8001660 <updateLCD+0x318>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
			return;
 8001560:	e0cb      	b.n	80016fa <updateLCD+0x3b2>
		}
		else if (procedure_run_flag == -2 && flag)
 8001562:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <updateLCD+0x318>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b25b      	sxtb	r3, r3
 8001568:	f113 0f02 	cmn.w	r3, #2
 800156c:	d119      	bne.n	80015a2 <updateLCD+0x25a>
 800156e:	4b33      	ldr	r3, [pc, #204]	; (800163c <updateLCD+0x2f4>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d014      	beq.n	80015a2 <updateLCD+0x25a>
		{
			flag = false;
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <updateLCD+0x2f4>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
			lcd_goto_XY(1, 0);
 800157e:	2100      	movs	r1, #0
 8001580:	2001      	movs	r0, #1
 8001582:	f7ff fa89 	bl	8000a98 <lcd_goto_XY>
			lcd_send_string("Lid not closed, ");
 8001586:	4839      	ldr	r0, [pc, #228]	; (800166c <updateLCD+0x324>)
 8001588:	f7ff fa5c 	bl	8000a44 <lcd_send_string>
			lcd_goto_XY(2, 0);
 800158c:	2100      	movs	r1, #0
 800158e:	2002      	movs	r0, #2
 8001590:	f7ff fa82 	bl	8000a98 <lcd_goto_XY>
			lcd_send_string("close to run!   ");
 8001594:	4836      	ldr	r0, [pc, #216]	; (8001670 <updateLCD+0x328>)
 8001596:	f7ff fa55 	bl	8000a44 <lcd_send_string>
			procedure_run_flag = 0; // set procedure_run_flag = 0 to display Home back
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <updateLCD+0x318>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
			return;
 80015a0:	e0ab      	b.n	80016fa <updateLCD+0x3b2>
		} else if (procedure_run_flag == -3 && flag)
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <updateLCD+0x318>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	f113 0f03 	cmn.w	r3, #3
 80015ac:	d119      	bne.n	80015e2 <updateLCD+0x29a>
 80015ae:	4b23      	ldr	r3, [pc, #140]	; (800163c <updateLCD+0x2f4>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d014      	beq.n	80015e2 <updateLCD+0x29a>
		{
			flag = false;
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <updateLCD+0x2f4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
			lcd_goto_XY(1, 0);
 80015be:	2100      	movs	r1, #0
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff fa69 	bl	8000a98 <lcd_goto_XY>
			lcd_send_string("Lid oppened, cl-");
 80015c6:	482b      	ldr	r0, [pc, #172]	; (8001674 <updateLCD+0x32c>)
 80015c8:	f7ff fa3c 	bl	8000a44 <lcd_send_string>
			lcd_goto_XY(2, 0);
 80015cc:	2100      	movs	r1, #0
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff fa62 	bl	8000a98 <lcd_goto_XY>
			lcd_send_string("ose to continue!");
 80015d4:	4828      	ldr	r0, [pc, #160]	; (8001678 <updateLCD+0x330>)
 80015d6:	f7ff fa35 	bl	8000a44 <lcd_send_string>
			procedure_run_flag = 0; // set procedure_run_flag = 0 to display Home back
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <updateLCD+0x318>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
			return;
 80015e0:	e08b      	b.n	80016fa <updateLCD+0x3b2>
		} else if (procedure_run_flag == -4 && flag)
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <updateLCD+0x318>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	f113 0f04 	cmn.w	r3, #4
 80015ec:	d148      	bne.n	8001680 <updateLCD+0x338>
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <updateLCD+0x2f4>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d043      	beq.n	8001680 <updateLCD+0x338>
		{
			flag = false;
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <updateLCD+0x2f4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
			lcd_clear_display();
 80015fe:	f7ff fa37 	bl	8000a70 <lcd_clear_display>
			lcd_goto_XY(1, 0);
 8001602:	2100      	movs	r1, #0
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff fa47 	bl	8000a98 <lcd_goto_XY>
			lcd_send_string("Washing paused! ");
 800160a:	481c      	ldr	r0, [pc, #112]	; (800167c <updateLCD+0x334>)
 800160c:	f7ff fa1a 	bl	8000a44 <lcd_send_string>
			return;
 8001610:	e073      	b.n	80016fa <updateLCD+0x3b2>
 8001612:	bf00      	nop
 8001614:	20000000 	.word	0x20000000
 8001618:	080066c8 	.word	0x080066c8
 800161c:	20000224 	.word	0x20000224
 8001620:	080066dc 	.word	0x080066dc
 8001624:	080066ec 	.word	0x080066ec
 8001628:	080066f8 	.word	0x080066f8
 800162c:	08006714 	.word	0x08006714
 8001630:	2000022e 	.word	0x2000022e
 8001634:	20000230 	.word	0x20000230
 8001638:	20000220 	.word	0x20000220
 800163c:	2000022d 	.word	0x2000022d
 8001640:	2000023c 	.word	0x2000023c
 8001644:	08006728 	.word	0x08006728
 8001648:	20000004 	.word	0x20000004
 800164c:	0800673c 	.word	0x0800673c
 8001650:	0800674c 	.word	0x0800674c
 8001654:	08006760 	.word	0x08006760
 8001658:	08006774 	.word	0x08006774
 800165c:	08006788 	.word	0x08006788
 8001660:	20000216 	.word	0x20000216
 8001664:	0800679c 	.word	0x0800679c
 8001668:	080067b0 	.word	0x080067b0
 800166c:	080067c4 	.word	0x080067c4
 8001670:	080067d8 	.word	0x080067d8
 8001674:	080067ec 	.word	0x080067ec
 8001678:	08006800 	.word	0x08006800
 800167c:	08006814 	.word	0x08006814
		} 
		if ((HAL_GetTick() - previous_tick > 2000) && flag)
 8001680:	f000 ff34 	bl	80024ec <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <updateLCD+0x3b8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001690:	d933      	bls.n	80016fa <updateLCD+0x3b2>
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <updateLCD+0x3bc>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d02e      	beq.n	80016fa <updateLCD+0x3b2>
		{
			// This is HOME SCREEN, get back to Home after 2000ms
			flag = false;
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <updateLCD+0x3bc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
			lcd_clear_display();
 80016a2:	f7ff f9e5 	bl	8000a70 <lcd_clear_display>
			char data[16];
			sprintf(data, " %s", mode_names[previous_mode[0] - 1]);
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <updateLCD+0x3c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	4a17      	ldr	r2, [pc, #92]	; (800170c <updateLCD+0x3c4>)
 80016ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016b2:	463b      	mov	r3, r7
 80016b4:	4916      	ldr	r1, [pc, #88]	; (8001710 <updateLCD+0x3c8>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 fb4a 	bl	8005d50 <siprintf>
			lcd_goto_XY(1, 0);
 80016bc:	2100      	movs	r1, #0
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff f9ea 	bl	8000a98 <lcd_goto_XY>
			lcd_send_string(data);
 80016c4:	463b      	mov	r3, r7
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff f9bc 	bl	8000a44 <lcd_send_string>
			sprintf(data, "Nuoc: %d%% Xa: %d", previous_mode[1] * 10, previous_mode[2]);
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <updateLCD+0x3c0>)
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	461a      	mov	r2, r3
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <updateLCD+0x3c0>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	4638      	mov	r0, r7
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <updateLCD+0x3cc>)
 80016e2:	f004 fb35 	bl	8005d50 <siprintf>
			lcd_goto_XY(2, 0);
 80016e6:	2100      	movs	r1, #0
 80016e8:	2002      	movs	r0, #2
 80016ea:	f7ff f9d5 	bl	8000a98 <lcd_goto_XY>
			lcd_send_string(data);
 80016ee:	463b      	mov	r3, r7
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff f9a7 	bl	8000a44 <lcd_send_string>
 80016f6:	e000      	b.n	80016fa <updateLCD+0x3b2>
			return;
 80016f8:	bf00      	nop
		}
	}
}
 80016fa:	375c      	adds	r7, #92	; 0x5c
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	2000023c 	.word	0x2000023c
 8001704:	2000022d 	.word	0x2000022d
 8001708:	20000230 	.word	0x20000230
 800170c:	20000004 	.word	0x20000004
 8001710:	08006828 	.word	0x08006828
 8001714:	0800682c 	.word	0x0800682c

08001718 <power_observer>:

void power_observer(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
	static uint32_t power_observer_tick;
	static bool data_saved = false;
	if (ZC == true)
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <power_observer+0xa0>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d004      	beq.n	8001732 <power_observer+0x1a>
	{
		power_observer_tick = HAL_GetTick();
 8001728:	f000 fee0 	bl	80024ec <HAL_GetTick>
 800172c:	4603      	mov	r3, r0
 800172e:	4a23      	ldr	r2, [pc, #140]	; (80017bc <power_observer+0xa4>)
 8001730:	6013      	str	r3, [r2, #0]
	}

	if (HAL_GetTick() - power_observer_tick > 40)
 8001732:	f000 fedb 	bl	80024ec <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	4b20      	ldr	r3, [pc, #128]	; (80017bc <power_observer+0xa4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b28      	cmp	r3, #40	; 0x28
 8001740:	d933      	bls.n	80017aa <power_observer+0x92>
	{
		// if no pulse in 40ms = 2 cycle means power loss detected
		//  start saving backup data if running (procedure_run_flag == true)
		if (procedure_run_flag && at24_isConnected())
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <power_observer+0xa8>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	b25b      	sxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d02b      	beq.n	80017a4 <power_observer+0x8c>
 800174c:	f7ff f80e 	bl	800076c <at24_isConnected>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d026      	beq.n	80017a4 <power_observer+0x8c>
		{
			if (!data_saved) {
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <power_observer+0xac>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01f      	beq.n	80017a4 <power_observer+0x8c>
				* byte[3]: current_step - bước giặt hiện tại
				* byte[4]: drained_times - số lần xả đã thực hiện
				* byte[5-8]: elapsed_time_per_mode - 4byte lưu thời gian đang giặt
				*/
				/*Luu cac bien the hien mode giat hien tai*/
				data_saved = true;
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <power_observer+0xac>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
				// at24_write(0, mode_select, 3, 500);
				/*Luu cac bien extern tu washing_procedure*/
				uint8_t data[6] = {mode_select[0], mode_select[1], mode_select[2], current_step, drained_times};
 800176a:	463b      	mov	r3, r7
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	809a      	strh	r2, [r3, #4]
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <power_observer+0xb0>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	703b      	strb	r3, [r7, #0]
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <power_observer+0xb0>)
 800177c:	785b      	ldrb	r3, [r3, #1]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	707b      	strb	r3, [r7, #1]
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <power_observer+0xb0>)
 8001784:	789b      	ldrb	r3, [r3, #2]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	70bb      	strb	r3, [r7, #2]
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <power_observer+0xb4>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	70fb      	strb	r3, [r7, #3]
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <power_observer+0xb8>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	713b      	strb	r3, [r7, #4]
				at24_write(0, data, sizeof(data), 500);
 8001796:	4639      	mov	r1, r7
 8001798:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800179c:	2206      	movs	r2, #6
 800179e:	2000      	movs	r0, #0
 80017a0:	f7fe fff6 	bl	8000790 <at24_write>
				
			}
		}
		power_loss_flag = true; 
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <power_observer+0xbc>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
	}
	ZC = false; // set ZC false here, Pulse_EXTI can set it back to true, if not we can know that the power is off
 80017aa:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <power_observer+0xa0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000219 	.word	0x20000219
 80017bc:	20000240 	.word	0x20000240
 80017c0:	20000216 	.word	0x20000216
 80017c4:	20000244 	.word	0x20000244
 80017c8:	20000220 	.word	0x20000220
 80017cc:	20000265 	.word	0x20000265
 80017d0:	20000264 	.word	0x20000264
 80017d4:	20000215 	.word	0x20000215

080017d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
}
 80017de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017e0:	e7fe      	b.n	80017e0 <Error_Handler+0x8>
	...

080017e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_MspInit+0x5c>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	4a14      	ldr	r2, [pc, #80]	; (8001840 <HAL_MspInit+0x5c>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6193      	str	r3, [r2, #24]
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_MspInit+0x5c>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_MspInit+0x5c>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_MspInit+0x5c>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_MspInit+0x5c>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_MspInit+0x60>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_MspInit+0x60>)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40021000 	.word	0x40021000
 8001844:	40010000 	.word	0x40010000

08001848 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <HAL_ADC_MspInit+0x6c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d121      	bne.n	80018ac <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HAL_ADC_MspInit+0x70>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <HAL_ADC_MspInit+0x70>)
 800186e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_ADC_MspInit+0x70>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_ADC_MspInit+0x70>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <HAL_ADC_MspInit+0x70>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_ADC_MspInit+0x70>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001898:	2304      	movs	r3, #4
 800189a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189c:	2303      	movs	r3, #3
 800189e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4619      	mov	r1, r3
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <HAL_ADC_MspInit+0x74>)
 80018a8:	f001 f98a 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40012400 	.word	0x40012400
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010800 	.word	0x40010800

080018c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <HAL_I2C_MspInit+0xe4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d133      	bne.n	8001948 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <HAL_I2C_MspInit+0xe8>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <HAL_I2C_MspInit+0xe8>)
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_I2C_MspInit+0xe8>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fe:	2312      	movs	r3, #18
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	4619      	mov	r1, r3
 800190c:	4827      	ldr	r0, [pc, #156]	; (80019ac <HAL_I2C_MspInit+0xec>)
 800190e:	f001 f957 	bl	8002bc0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_I2C_MspInit+0xf0>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001928:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <HAL_I2C_MspInit+0xf0>)
 800192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_I2C_MspInit+0xe8>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_I2C_MspInit+0xe8>)
 8001934:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_I2C_MspInit+0xe8>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001946:	e029      	b.n	800199c <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a19      	ldr	r2, [pc, #100]	; (80019b4 <HAL_I2C_MspInit+0xf4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d124      	bne.n	800199c <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_I2C_MspInit+0xe8>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <HAL_I2C_MspInit+0xe8>)
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	6193      	str	r3, [r2, #24]
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_I2C_MspInit+0xe8>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800196a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001970:	2312      	movs	r3, #18
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	480b      	ldr	r0, [pc, #44]	; (80019ac <HAL_I2C_MspInit+0xec>)
 8001980:	f001 f91e 	bl	8002bc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_I2C_MspInit+0xe8>)
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_I2C_MspInit+0xe8>)
 800198a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800198e:	61d3      	str	r3, [r2, #28]
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_I2C_MspInit+0xe8>)
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	bf00      	nop
 800199e:	3730      	adds	r7, #48	; 0x30
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40005400 	.word	0x40005400
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010c00 	.word	0x40010c00
 80019b0:	40010000 	.word	0x40010000
 80019b4:	40005800 	.word	0x40005800

080019b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c8:	d114      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_TIM_Base_MspInit+0x78>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <HAL_TIM_Base_MspInit+0x78>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_TIM_Base_MspInit+0x78>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	201c      	movs	r0, #28
 80019e8:	f001 f8b3 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019ec:	201c      	movs	r0, #28
 80019ee:	f001 f8cc 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019f2:	e018      	b.n	8001a26 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d113      	bne.n	8001a26 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_TIM_Base_MspInit+0x78>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_TIM_Base_MspInit+0x78>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_TIM_Base_MspInit+0x78>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	201e      	movs	r0, #30
 8001a1c:	f001 f899 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a20:	201e      	movs	r0, #30
 8001a22:	f001 f8b2 	bl	8002b8a <HAL_NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40000800 	.word	0x40000800

08001a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a56:	d117      	bne.n	8001a88 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_TIM_MspPostInit+0x58>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a0c      	ldr	r2, [pc, #48]	; (8001a90 <HAL_TIM_MspPostInit+0x58>)
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_TIM_MspPostInit+0x58>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a70:	2301      	movs	r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	4619      	mov	r1, r3
 8001a82:	4804      	ldr	r0, [pc, #16]	; (8001a94 <HAL_TIM_MspPostInit+0x5c>)
 8001a84:	f001 f89c 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a88:	bf00      	nop
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010800 	.word	0x40010800

08001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <NMI_Handler+0x4>

08001a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <HardFault_Handler+0x4>

08001aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <MemManage_Handler+0x4>

08001aaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ade:	f000 fcf3 	bl	80024c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001aea:	2040      	movs	r0, #64	; 0x40
 8001aec:	f001 fa1c 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001af0:	2080      	movs	r0, #128	; 0x80
 8001af2:	f001 fa19 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
// Check if the interrupt was triggered by Output Compare match on Channel 1
	if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_CC1))
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <TIM2_IRQHandler+0x38>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d10d      	bne.n	8001b2a <TIM2_IRQHandler+0x2e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); //Reset triac pin
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2108      	movs	r1, #8
 8001b12:	4809      	ldr	r0, [pc, #36]	; (8001b38 <TIM2_IRQHandler+0x3c>)
 8001b14:	f001 f9ef 	bl	8002ef6 <HAL_GPIO_WritePin>
		// Clear the interrupt flag
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <TIM2_IRQHandler+0x38>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0202 	mvn.w	r2, #2
 8001b20:	611a      	str	r2, [r3, #16]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);  // Stops the timer and disables interrupt
 8001b22:	2100      	movs	r1, #0
 8001b24:	4803      	ldr	r0, [pc, #12]	; (8001b34 <TIM2_IRQHandler+0x38>)
 8001b26:	f003 fad7 	bl	80050d8 <HAL_TIM_OC_Stop_IT>
		// Handle the interrupt (e.g., toggle an LED, etc.)
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b2a:	4802      	ldr	r0, [pc, #8]	; (8001b34 <TIM2_IRQHandler+0x38>)
 8001b2c:	f003 fb86 	bl	800523c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000184 	.word	0x20000184
 8001b38:	40010c00 	.word	0x40010c00

08001b3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <TIM4_IRQHandler+0x10>)
 8001b42:	f003 fb7b 	bl	800523c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200001cc 	.word	0x200001cc

08001b50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b58:	f001 f9e6 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b60:	f001 f9e2 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001b64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b68:	f001 f9de 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001b6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b70:	f001 f9da 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <_sbrk+0x5c>)
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <_sbrk+0x60>)
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <_sbrk+0x64>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <_sbrk+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d207      	bcs.n	8001bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba8:	f004 f8a0 	bl	8005cec <__errno>
 8001bac:	4603      	mov	r3, r0
 8001bae:	220c      	movs	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	e009      	b.n	8001bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <_sbrk+0x64>)
 8001bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bca:	68fb      	ldr	r3, [r7, #12]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20005000 	.word	0x20005000
 8001bd8:	00000400 	.word	0x00000400
 8001bdc:	20000248 	.word	0x20000248
 8001be0:	20000298 	.word	0x20000298

08001be4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <procedure_init>:
uint8_t drained_times; //so lan da xa
uint8_t current_step; // buoc giat hien tai: 1 - xa nuoc, 2 - giat, 3 - xa, 4 - vat

void (*runningFunc)();

void procedure_init( void ) {
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
    // run once just to reset the procedure sequence
    runningFunc = &start_procedure;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <procedure_init+0x14>)
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <procedure_init+0x18>)
 8001bf8:	601a      	str	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000268 	.word	0x20000268
 8001c08:	08001e65 	.word	0x08001e65

08001c0c <run_procedure>:
void run_procedure( uint8_t mode[], uint8_t water_level, bool *procedure_run_flag, bool *motorRun, uint16_t *alpha) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	72fb      	strb	r3, [r7, #11]
    /*Các biến được truyền vào dạng tham chiếu nhằm thay đổi địa chỉ trong các hàm này*/
    if (wash_done) {
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <run_procedure+0xd4>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <run_procedure+0x1e>
        /* after washing done, stop procedure*/
        *procedure_run_flag = false;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
    }
    if (runningFunc == &start_procedure) {
 8001c2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <run_procedure+0xd8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a2e      	ldr	r2, [pc, #184]	; (8001ce8 <run_procedure+0xdc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d14d      	bne.n	8001cd0 <run_procedure+0xc4>
        wash_done = false;
 8001c34:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <run_procedure+0xd4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
        m_current_water_level = water_level; //gán địa chỉ, chỉ cần gán 1 lần nên bỏ vô đây
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
 8001c3c:	4a2b      	ldr	r2, [pc, #172]	; (8001cec <run_procedure+0xe0>)
 8001c3e:	6013      	str	r3, [r2, #0]
        p_motorRun = motorRun; //gán địa chỉ, chỉ cần gán 1 lần nên bỏ vô đây
 8001c40:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <run_procedure+0xe4>)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6013      	str	r3, [r2, #0]
        m_mode_select[0] = mode[0];
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <run_procedure+0xe8>)
 8001c4c:	701a      	strb	r2, [r3, #0]
        m_mode_select[1] = mode[1];
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	785a      	ldrb	r2, [r3, #1]
 8001c52:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <run_procedure+0xe8>)
 8001c54:	705a      	strb	r2, [r3, #1]
        m_mode_select[2] = mode[2];
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	789a      	ldrb	r2, [r3, #2]
 8001c5a:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <run_procedure+0xe8>)
 8001c5c:	709a      	strb	r2, [r3, #2]
        *alpha = 1000;
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c64:	801a      	strh	r2, [r3, #0]
        switch( m_mode_select[0]) {
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <run_procedure+0xe8>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d828      	bhi.n	8001cc2 <run_procedure+0xb6>
 8001c70:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <run_procedure+0x6c>)
 8001c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c76:	bf00      	nop
 8001c78:	08001c8d 	.word	0x08001c8d
 8001c7c:	08001c97 	.word	0x08001c97
 8001c80:	08001ca1 	.word	0x08001ca1
 8001c84:	08001cab 	.word	0x08001cab
 8001c88:	08001cbd 	.word	0x08001cbd
            case 1: 
                m_wash_interval = 15000; //giat thuong, giat trong 15s
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <run_procedure+0xec>)
 8001c8e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001c92:	601a      	str	r2, [r3, #0]
                break;
 8001c94:	e015      	b.n	8001cc2 <run_procedure+0xb6>
            case 2:
                m_wash_interval = 25000; //giat ngam, giat trong 25s
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <run_procedure+0xec>)
 8001c98:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001c9c:	601a      	str	r2, [r3, #0]
                break;
 8001c9e:	e010      	b.n	8001cc2 <run_procedure+0xb6>
            case 3: 
                m_wash_interval = 10000; //giat nhanh, giat trong 10s
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <run_procedure+0xec>)
 8001ca2:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ca6:	601a      	str	r2, [r3, #0]
                break;
 8001ca8:	e00b      	b.n	8001cc2 <run_procedure+0xb6>
            case 4:
                m_wash_interval = 15000; //giat nhe, quay cham hon
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <run_procedure+0xec>)
 8001cac:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001cb0:	601a      	str	r2, [r3, #0]
                *alpha = 750; //giặt nhẹ đặt alpha bé, quay chậm hơn
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001cb8:	801a      	strh	r2, [r3, #0]
                break;
 8001cba:	e002      	b.n	8001cc2 <run_procedure+0xb6>
            case 5: 
                m_wash_interval = 0; // chi vat, k giat
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <run_procedure+0xec>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
        }
        m_drain_times = m_mode_select[2];
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <run_procedure+0xe8>)
 8001cc4:	789a      	ldrb	r2, [r3, #2]
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <run_procedure+0xf0>)
 8001cc8:	701a      	strb	r2, [r3, #0]
        drained_times = 0;
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <run_procedure+0xf4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
    }
    runningFunc();
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <run_procedure+0xd8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4798      	blx	r3
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000259 	.word	0x20000259
 8001ce4:	20000268 	.word	0x20000268
 8001ce8:	08001e65 	.word	0x08001e65
 8001cec:	20000250 	.word	0x20000250
 8001cf0:	2000025c 	.word	0x2000025c
 8001cf4:	2000024c 	.word	0x2000024c
 8001cf8:	20000254 	.word	0x20000254
 8001cfc:	20000258 	.word	0x20000258
 8001d00:	20000264 	.word	0x20000264

08001d04 <run_procedure_backup>:

void run_procedure_backup( uint8_t backup_mode_data[], uint8_t water_level, bool *backup_run_flag, bool *motorRun, uint16_t *alpha) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	460b      	mov	r3, r1
 8001d12:	72fb      	strb	r3, [r7, #11]
    /*Các biến được truyền vào dạng tham chiếu nhằm thay đổi địa chỉ trong các hàm này*/
    if (wash_done) {
 8001d14:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <run_procedure_backup+0x12c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <run_procedure_backup+0x1e>
        /* after washing done, stop procedure*/
        *backup_run_flag = false;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
    }
    m_current_water_level = water_level;
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	4a43      	ldr	r2, [pc, #268]	; (8001e34 <run_procedure_backup+0x130>)
 8001d26:	6013      	str	r3, [r2, #0]
    p_motorRun = motorRun;
 8001d28:	4a43      	ldr	r2, [pc, #268]	; (8001e38 <run_procedure_backup+0x134>)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6013      	str	r3, [r2, #0]
    if (runningFunc == &start_procedure) {
 8001d2e:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <run_procedure_backup+0x138>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a43      	ldr	r2, [pc, #268]	; (8001e40 <run_procedure_backup+0x13c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d173      	bne.n	8001e20 <run_procedure_backup+0x11c>
        wash_done = false;
 8001d38:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <run_procedure_backup+0x12c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
        m_current_water_level = water_level; //gán địa chỉ, chỉ cần gán 1 lần nên bỏ vô đây
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	4a3c      	ldr	r2, [pc, #240]	; (8001e34 <run_procedure_backup+0x130>)
 8001d42:	6013      	str	r3, [r2, #0]
        p_motorRun = motorRun; //gán địa chỉ, chỉ cần gán 1 lần nên bỏ vô đây
 8001d44:	4a3c      	ldr	r2, [pc, #240]	; (8001e38 <run_procedure_backup+0x134>)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6013      	str	r3, [r2, #0]
        m_mode_select[0] = backup_mode_data[0];
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	781a      	ldrb	r2, [r3, #0]
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <run_procedure_backup+0x140>)
 8001d50:	701a      	strb	r2, [r3, #0]
        m_mode_select[1] = backup_mode_data[1];
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	785a      	ldrb	r2, [r3, #1]
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <run_procedure_backup+0x140>)
 8001d58:	705a      	strb	r2, [r3, #1]
        m_mode_select[2] = backup_mode_data[2];
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	789a      	ldrb	r2, [r3, #2]
 8001d5e:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <run_procedure_backup+0x140>)
 8001d60:	709a      	strb	r2, [r3, #2]
        *alpha = 1000;
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d68:	801a      	strh	r2, [r3, #0]
        switch( m_mode_select[0]) {
 8001d6a:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <run_procedure_backup+0x140>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d828      	bhi.n	8001dc6 <run_procedure_backup+0xc2>
 8001d74:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <run_procedure_backup+0x78>)
 8001d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7a:	bf00      	nop
 8001d7c:	08001d91 	.word	0x08001d91
 8001d80:	08001d9b 	.word	0x08001d9b
 8001d84:	08001da5 	.word	0x08001da5
 8001d88:	08001daf 	.word	0x08001daf
 8001d8c:	08001dc1 	.word	0x08001dc1
            case 1: 
                m_wash_interval = 15000; //giat thuong, giat trong 15s
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <run_procedure_backup+0x144>)
 8001d92:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001d96:	601a      	str	r2, [r3, #0]
                break;
 8001d98:	e015      	b.n	8001dc6 <run_procedure_backup+0xc2>
            case 2:
                m_wash_interval = 25000; //giat ngam, giat trong 25s
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <run_procedure_backup+0x144>)
 8001d9c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001da0:	601a      	str	r2, [r3, #0]
                break;
 8001da2:	e010      	b.n	8001dc6 <run_procedure_backup+0xc2>
            case 3: 
                m_wash_interval = 10000; //giat nhanh, giat trong 10s
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <run_procedure_backup+0x144>)
 8001da6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001daa:	601a      	str	r2, [r3, #0]
                break;
 8001dac:	e00b      	b.n	8001dc6 <run_procedure_backup+0xc2>
            case 4:
                m_wash_interval = 15000; //giat nhe, quay cham hon
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <run_procedure_backup+0x144>)
 8001db0:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001db4:	601a      	str	r2, [r3, #0]
                *alpha = 750; //giặt nhẹ đặt alpha bé, quay chậm hơn
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001dbc:	801a      	strh	r2, [r3, #0]
                break;
 8001dbe:	e002      	b.n	8001dc6 <run_procedure_backup+0xc2>
            case 5: 
                m_wash_interval = 0; // chi vat, k giat
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <run_procedure_backup+0x144>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
        }
        m_drain_times = m_mode_select[2];
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <run_procedure_backup+0x140>)
 8001dc8:	789a      	ldrb	r2, [r3, #2]
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <run_procedure_backup+0x148>)
 8001dcc:	701a      	strb	r2, [r3, #0]
        drained_times = backup_mode_data[4];
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	791a      	ldrb	r2, [r3, #4]
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <run_procedure_backup+0x14c>)
 8001dd4:	701a      	strb	r2, [r3, #0]
        switch (backup_mode_data[3]) {
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3303      	adds	r3, #3
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d81f      	bhi.n	8001e22 <run_procedure_backup+0x11e>
 8001de2:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <run_procedure_backup+0xe4>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001df9 	.word	0x08001df9
 8001dec:	08001e01 	.word	0x08001e01
 8001df0:	08001e09 	.word	0x08001e09
 8001df4:	08001e19 	.word	0x08001e19
            case 1: 
                runningFunc = &m_fillWater;
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <run_procedure_backup+0x138>)
 8001dfa:	4a16      	ldr	r2, [pc, #88]	; (8001e54 <run_procedure_backup+0x150>)
 8001dfc:	601a      	str	r2, [r3, #0]
                break;
 8001dfe:	e010      	b.n	8001e22 <run_procedure_backup+0x11e>
            case 2:
                runningFunc = &m_wash;
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <run_procedure_backup+0x138>)
 8001e02:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <run_procedure_backup+0x154>)
 8001e04:	601a      	str	r2, [r3, #0]
                break;
 8001e06:	e00c      	b.n	8001e22 <run_procedure_backup+0x11e>
            case 3: 
                runningFunc = &m_drain;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <run_procedure_backup+0x138>)
 8001e0a:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <run_procedure_backup+0x158>)
 8001e0c:	601a      	str	r2, [r3, #0]
                drained_times = backup_mode_data[4];
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	791a      	ldrb	r2, [r3, #4]
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <run_procedure_backup+0x14c>)
 8001e14:	701a      	strb	r2, [r3, #0]
                break;
 8001e16:	e004      	b.n	8001e22 <run_procedure_backup+0x11e>
            case 4:
                runningFunc = &m_spin;
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <run_procedure_backup+0x138>)
 8001e1a:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <run_procedure_backup+0x15c>)
 8001e1c:	601a      	str	r2, [r3, #0]
                break;
 8001e1e:	e000      	b.n	8001e22 <run_procedure_backup+0x11e>
            case 5:
 8001e20:	bf00      	nop
                making_3_beep_sound;
        }
    }
    runningFunc();
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <run_procedure_backup+0x138>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4798      	blx	r3
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000259 	.word	0x20000259
 8001e34:	20000250 	.word	0x20000250
 8001e38:	2000025c 	.word	0x2000025c
 8001e3c:	20000268 	.word	0x20000268
 8001e40:	08001e65 	.word	0x08001e65
 8001e44:	2000024c 	.word	0x2000024c
 8001e48:	20000254 	.word	0x20000254
 8001e4c:	20000258 	.word	0x20000258
 8001e50:	20000264 	.word	0x20000264
 8001e54:	08001e85 	.word	0x08001e85
 8001e58:	08001f21 	.word	0x08001f21
 8001e5c:	08002135 	.word	0x08002135
 8001e60:	08002219 	.word	0x08002219

08001e64 <start_procedure>:

void start_procedure(uint8_t mode[]) {
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
    runningFunc = &m_fillWater;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <start_procedure+0x18>)
 8001e6e:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <start_procedure+0x1c>)
 8001e70:	601a      	str	r2, [r3, #0]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	20000268 	.word	0x20000268
 8001e80:	08001e85 	.word	0x08001e85

08001e84 <m_fillWater>:

void m_fillWater( void ) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
    if (m_mode_select[0] == 5) {
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <m_fillWater+0x78>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d103      	bne.n	8001e9a <m_fillWater+0x16>
        /* Neu chi vat, khong cap nuoc, goi xuong luon ham chi vat */
        runningFunc = &m_spin;
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <m_fillWater+0x7c>)
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <m_fillWater+0x80>)
 8001e96:	601a      	str	r2, [r3, #0]
            //cap nuoc xong, chuyen sang ham tiep theo
            runningFunc = &m_wash;
        }
    }
    
}
 8001e98:	e02c      	b.n	8001ef4 <m_fillWater+0x70>
        current_step = 1;
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <m_fillWater+0x84>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
        if ( m_current_water_level <= m_mode_select[1]*10 ) { 
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <m_fillWater+0x78>)
 8001ea2:	785b      	ldrb	r3, [r3, #1]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <m_fillWater+0x88>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d314      	bcc.n	8001ee2 <m_fillWater+0x5e>
            lcd_goto_XY(1, 0);
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f7fe fdec 	bl	8000a98 <lcd_goto_XY>
            lcd_send_string("Filling water...");
 8001ec0:	4813      	ldr	r0, [pc, #76]	; (8001f10 <m_fillWater+0x8c>)
 8001ec2:	f7fe fdbf 	bl	8000a44 <lcd_send_string>
            lcd_goto_XY(2, 0);
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	2002      	movs	r0, #2
 8001eca:	f7fe fde5 	bl	8000a98 <lcd_goto_XY>
            lcd_send_string("                ");
 8001ece:	4811      	ldr	r0, [pc, #68]	; (8001f14 <m_fillWater+0x90>)
 8001ed0:	f7fe fdb8 	bl	8000a44 <lcd_send_string>
            HAL_GPIO_WritePin(water_in_GPIO_Port, water_in_Pin, GPIO_PIN_SET);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eda:	480f      	ldr	r0, [pc, #60]	; (8001f18 <m_fillWater+0x94>)
 8001edc:	f001 f80b 	bl	8002ef6 <HAL_GPIO_WritePin>
}
 8001ee0:	e008      	b.n	8001ef4 <m_fillWater+0x70>
            HAL_GPIO_WritePin(water_in_GPIO_Port, water_in_Pin, GPIO_PIN_RESET);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee8:	480b      	ldr	r0, [pc, #44]	; (8001f18 <m_fillWater+0x94>)
 8001eea:	f001 f804 	bl	8002ef6 <HAL_GPIO_WritePin>
            runningFunc = &m_wash;
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <m_fillWater+0x7c>)
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <m_fillWater+0x98>)
 8001ef2:	601a      	str	r2, [r3, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	2000024c 	.word	0x2000024c
 8001f00:	20000268 	.word	0x20000268
 8001f04:	08002219 	.word	0x08002219
 8001f08:	20000265 	.word	0x20000265
 8001f0c:	20000250 	.word	0x20000250
 8001f10:	08006840 	.word	0x08006840
 8001f14:	08006854 	.word	0x08006854
 8001f18:	40010800 	.word	0x40010800
 8001f1c:	08001f21 	.word	0x08001f21

08001f20 <m_wash>:
void m_wash( void ) {
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
    /*
    * Ham chu trinh giat
    */
    static bool firstRun_wash = true, motor_dir;
    static uint32_t time_wash, change_direction_time;
    current_step = 2;
 8001f26:	4b73      	ldr	r3, [pc, #460]	; (80020f4 <m_wash+0x1d4>)
 8001f28:	2202      	movs	r2, #2
 8001f2a:	701a      	strb	r2, [r3, #0]
    elapsed_time_per_mode = time_wash + m_wash_interval - HAL_GetTick();
 8001f2c:	4b72      	ldr	r3, [pc, #456]	; (80020f8 <m_wash+0x1d8>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b72      	ldr	r3, [pc, #456]	; (80020fc <m_wash+0x1dc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	18d4      	adds	r4, r2, r3
 8001f36:	f000 fad9 	bl	80024ec <HAL_GetTick>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	1ae3      	subs	r3, r4, r3
 8001f3e:	4a70      	ldr	r2, [pc, #448]	; (8002100 <m_wash+0x1e0>)
 8001f40:	6013      	str	r3, [r2, #0]
    if ( firstRun_wash ) {
 8001f42:	4b70      	ldr	r3, [pc, #448]	; (8002104 <m_wash+0x1e4>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <m_wash+0x42>
        time_wash = HAL_GetTick(); // thoi gian bat dau giat
 8001f4a:	f000 facf 	bl	80024ec <HAL_GetTick>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4a69      	ldr	r2, [pc, #420]	; (80020f8 <m_wash+0x1d8>)
 8001f52:	6013      	str	r3, [r2, #0]
        change_direction_time = time_wash; 
 8001f54:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <m_wash+0x1d8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6b      	ldr	r2, [pc, #428]	; (8002108 <m_wash+0x1e8>)
 8001f5a:	6013      	str	r3, [r2, #0]
        firstRun_wash = false;
 8001f5c:	4b69      	ldr	r3, [pc, #420]	; (8002104 <m_wash+0x1e4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
    }
    
    char data[16];
    lcd_goto_XY(1, 0);
 8001f62:	2100      	movs	r1, #0
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7fe fd97 	bl	8000a98 <lcd_goto_XY>
    lcd_send_string(motor_dir? "Washing -       ":"Washing +       ");
 8001f6a:	4b68      	ldr	r3, [pc, #416]	; (800210c <m_wash+0x1ec>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <m_wash+0x56>
 8001f72:	4b67      	ldr	r3, [pc, #412]	; (8002110 <m_wash+0x1f0>)
 8001f74:	e000      	b.n	8001f78 <m_wash+0x58>
 8001f76:	4b67      	ldr	r3, [pc, #412]	; (8002114 <m_wash+0x1f4>)
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fd63 	bl	8000a44 <lcd_send_string>
    sprintf(data, "tm:%ds sp:%ds          ", (HAL_GetTick()-time_wash)/1000, m_wash_interval/1000);
 8001f7e:	f000 fab5 	bl	80024ec <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <m_wash+0x1d8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	4a63      	ldr	r2, [pc, #396]	; (8002118 <m_wash+0x1f8>)
 8001f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f90:	099a      	lsrs	r2, r3, #6
 8001f92:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <m_wash+0x1dc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4960      	ldr	r1, [pc, #384]	; (8002118 <m_wash+0x1f8>)
 8001f98:	fba1 1303 	umull	r1, r3, r1, r3
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	4638      	mov	r0, r7
 8001fa0:	495e      	ldr	r1, [pc, #376]	; (800211c <m_wash+0x1fc>)
 8001fa2:	f003 fed5 	bl	8005d50 <siprintf>
    lcd_goto_XY(2, 0);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2002      	movs	r0, #2
 8001faa:	f7fe fd75 	bl	8000a98 <lcd_goto_XY>
    lcd_send_string(data);
 8001fae:	463b      	mov	r3, r7
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fd47 	bl	8000a44 <lcd_send_string>
    if (m_mode_select[0] != 2 ) { // giat ngam
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <m_wash+0x200>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d057      	beq.n	800206e <m_wash+0x14e>
        /*
        * Giat ngam trong 25s:
        * giat 10s, ngam 5s, giat tiep 10s
        */
        if (HAL_GetTick() - time_wash < m_wash_interval) {
 8001fbe:	f000 fa95 	bl	80024ec <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	4b4c      	ldr	r3, [pc, #304]	; (80020f8 <m_wash+0x1d8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	1ad2      	subs	r2, r2, r3
 8001fca:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <m_wash+0x1dc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d242      	bcs.n	8002058 <m_wash+0x138>
            if ((HAL_GetTick() - time_wash < 10000) || (HAL_GetTick() - time_wash > 15000)) {
 8001fd2:	f000 fa8b 	bl	80024ec <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <m_wash+0x1d8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d909      	bls.n	8001ffa <m_wash+0xda>
 8001fe6:	f000 fa81 	bl	80024ec <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <m_wash+0x1d8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d929      	bls.n	800204e <m_wash+0x12e>
                *p_motorRun = true;
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <m_wash+0x204>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, motor_dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002002:	4b42      	ldr	r3, [pc, #264]	; (800210c <m_wash+0x1ec>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	2120      	movs	r1, #32
 800200a:	4847      	ldr	r0, [pc, #284]	; (8002128 <m_wash+0x208>)
 800200c:	f000 ff73 	bl	8002ef6 <HAL_GPIO_WritePin>
                if (HAL_GetTick() - change_direction_time > 3000) {
 8002010:	f000 fa6c 	bl	80024ec <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <m_wash+0x1e8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002020:	4293      	cmp	r3, r2
 8002022:	d963      	bls.n	80020ec <m_wash+0x1cc>
                    // dao chieu moi 3s
                    motor_dir = !motor_dir;
 8002024:	4b39      	ldr	r3, [pc, #228]	; (800210c <m_wash+0x1ec>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f083 0301 	eor.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4b33      	ldr	r3, [pc, #204]	; (800210c <m_wash+0x1ec>)
 8002040:	701a      	strb	r2, [r3, #0]
                    change_direction_time = HAL_GetTick();
 8002042:	f000 fa53 	bl	80024ec <HAL_GetTick>
 8002046:	4603      	mov	r3, r0
 8002048:	4a2f      	ldr	r2, [pc, #188]	; (8002108 <m_wash+0x1e8>)
 800204a:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - change_direction_time > 3000) {
 800204c:	e04e      	b.n	80020ec <m_wash+0x1cc>
                }
            }
            else {
                /* tat dong co, ngam quan ao trong 5s*/
                *p_motorRun = false;
 800204e:	4b35      	ldr	r3, [pc, #212]	; (8002124 <m_wash+0x204>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
            *p_motorRun = false;
            firstRun_wash = true; //reset bit
            runningFunc = &m_drain; //giat xong, chuyen sang xa
        }
    }
}
 8002056:	e049      	b.n	80020ec <m_wash+0x1cc>
            *p_motorRun = false;
 8002058:	4b32      	ldr	r3, [pc, #200]	; (8002124 <m_wash+0x204>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
            firstRun_wash = true; //reset bit
 8002060:	4b28      	ldr	r3, [pc, #160]	; (8002104 <m_wash+0x1e4>)
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
            runningFunc = &m_drain; //giat xong, chuyen sang xa
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <m_wash+0x20c>)
 8002068:	4a31      	ldr	r2, [pc, #196]	; (8002130 <m_wash+0x210>)
 800206a:	601a      	str	r2, [r3, #0]
}
 800206c:	e03e      	b.n	80020ec <m_wash+0x1cc>
        if (HAL_GetTick() - time_wash < m_wash_interval) {
 800206e:	f000 fa3d 	bl	80024ec <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <m_wash+0x1d8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	1ad2      	subs	r2, r2, r3
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <m_wash+0x1dc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d229      	bcs.n	80020d6 <m_wash+0x1b6>
            *p_motorRun = true;
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <m_wash+0x204>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, motor_dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800208a:	4b20      	ldr	r3, [pc, #128]	; (800210c <m_wash+0x1ec>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	2120      	movs	r1, #32
 8002092:	4825      	ldr	r0, [pc, #148]	; (8002128 <m_wash+0x208>)
 8002094:	f000 ff2f 	bl	8002ef6 <HAL_GPIO_WritePin>
            if (HAL_GetTick() - change_direction_time > 3000) {
 8002098:	f000 fa28 	bl	80024ec <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <m_wash+0x1e8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d91f      	bls.n	80020ec <m_wash+0x1cc>
                motor_dir = !motor_dir;
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <m_wash+0x1ec>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f083 0301 	eor.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <m_wash+0x1ec>)
 80020c8:	701a      	strb	r2, [r3, #0]
                change_direction_time = HAL_GetTick();
 80020ca:	f000 fa0f 	bl	80024ec <HAL_GetTick>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <m_wash+0x1e8>)
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	e00a      	b.n	80020ec <m_wash+0x1cc>
            *p_motorRun = false;
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <m_wash+0x204>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
            firstRun_wash = true; //reset bit
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <m_wash+0x1e4>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
            runningFunc = &m_drain; //giat xong, chuyen sang xa
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <m_wash+0x20c>)
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <m_wash+0x210>)
 80020e8:	601a      	str	r2, [r3, #0]
}
 80020ea:	e7ff      	b.n	80020ec <m_wash+0x1cc>
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd90      	pop	{r4, r7, pc}
 80020f4:	20000265 	.word	0x20000265
 80020f8:	2000026c 	.word	0x2000026c
 80020fc:	20000254 	.word	0x20000254
 8002100:	20000260 	.word	0x20000260
 8002104:	2000001c 	.word	0x2000001c
 8002108:	20000270 	.word	0x20000270
 800210c:	20000274 	.word	0x20000274
 8002110:	08006868 	.word	0x08006868
 8002114:	0800687c 	.word	0x0800687c
 8002118:	10624dd3 	.word	0x10624dd3
 800211c:	08006890 	.word	0x08006890
 8002120:	2000024c 	.word	0x2000024c
 8002124:	2000025c 	.word	0x2000025c
 8002128:	40010c00 	.word	0x40010c00
 800212c:	20000268 	.word	0x20000268
 8002130:	08002135 	.word	0x08002135

08002134 <m_drain>:

void m_drain( void ) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
    /*
    * Ham chu trinh vat xa
    */
    current_step = 3;
 800213a:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <m_drain+0xb4>)
 800213c:	2203      	movs	r2, #3
 800213e:	701a      	strb	r2, [r3, #0]
    char data[16];
    lcd_goto_XY(1, 0);
 8002140:	2100      	movs	r1, #0
 8002142:	2001      	movs	r0, #1
 8002144:	f7fe fca8 	bl	8000a98 <lcd_goto_XY>
    lcd_send_string("Draining...     ");
 8002148:	4828      	ldr	r0, [pc, #160]	; (80021ec <m_drain+0xb8>)
 800214a:	f7fe fc7b 	bl	8000a44 <lcd_send_string>
    sprintf(data, "cur:%d set:%d  ", drained_times, m_mode_select[2]);
 800214e:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <m_drain+0xbc>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <m_drain+0xc0>)
 8002156:	789b      	ldrb	r3, [r3, #2]
 8002158:	4638      	mov	r0, r7
 800215a:	4927      	ldr	r1, [pc, #156]	; (80021f8 <m_drain+0xc4>)
 800215c:	f003 fdf8 	bl	8005d50 <siprintf>
    lcd_goto_XY(2, 0);
 8002160:	2100      	movs	r1, #0
 8002162:	2002      	movs	r0, #2
 8002164:	f7fe fc98 	bl	8000a98 <lcd_goto_XY>
    lcd_send_string(data);
 8002168:	463b      	mov	r3, r7
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fc6a 	bl	8000a44 <lcd_send_string>
    if (m_current_water_level >= 10) {
 8002170:	4b22      	ldr	r3, [pc, #136]	; (80021fc <m_drain+0xc8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b09      	cmp	r3, #9
 8002176:	d90b      	bls.n	8002190 <m_drain+0x5c>
        HAL_GPIO_WritePin(drain_gate_GPIO_Port, drain_gate_Pin, GPIO_PIN_SET);
 8002178:	2201      	movs	r2, #1
 800217a:	2110      	movs	r1, #16
 800217c:	4820      	ldr	r0, [pc, #128]	; (8002200 <m_drain+0xcc>)
 800217e:	f000 feba 	bl	8002ef6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002182:	2201      	movs	r2, #1
 8002184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002188:	481e      	ldr	r0, [pc, #120]	; (8002204 <m_drain+0xd0>)
 800218a:	f000 feb4 	bl	8002ef6 <HAL_GPIO_WritePin>
            drained_times = 0; //reset bien dem
            runningFunc = &m_spin;
        }
        
    }
}
 800218e:	e027      	b.n	80021e0 <m_drain+0xac>
        HAL_GPIO_WritePin(drain_gate_GPIO_Port, drain_gate_Pin, GPIO_PIN_RESET);
 8002190:	2200      	movs	r2, #0
 8002192:	2110      	movs	r1, #16
 8002194:	481a      	ldr	r0, [pc, #104]	; (8002200 <m_drain+0xcc>)
 8002196:	f000 feae 	bl	8002ef6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800219a:	2200      	movs	r2, #0
 800219c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021a0:	4818      	ldr	r0, [pc, #96]	; (8002204 <m_drain+0xd0>)
 80021a2:	f000 fea8 	bl	8002ef6 <HAL_GPIO_WritePin>
        lcd_goto_XY(2, 4);
 80021a6:	2104      	movs	r1, #4
 80021a8:	2002      	movs	r0, #2
 80021aa:	f7fe fc75 	bl	8000a98 <lcd_goto_XY>
        lcd_send_string("got here");
 80021ae:	4816      	ldr	r0, [pc, #88]	; (8002208 <m_drain+0xd4>)
 80021b0:	f7fe fc48 	bl	8000a44 <lcd_send_string>
        drained_times++;
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <m_drain+0xbc>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <m_drain+0xbc>)
 80021be:	701a      	strb	r2, [r3, #0]
        if (drained_times != m_mode_select[2]) {
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <m_drain+0xc0>)
 80021c2:	789a      	ldrb	r2, [r3, #2]
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <m_drain+0xbc>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d003      	beq.n	80021d4 <m_drain+0xa0>
            runningFunc = &m_fillWater;
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <m_drain+0xd8>)
 80021ce:	4a10      	ldr	r2, [pc, #64]	; (8002210 <m_drain+0xdc>)
 80021d0:	601a      	str	r2, [r3, #0]
}
 80021d2:	e005      	b.n	80021e0 <m_drain+0xac>
            drained_times = 0; //reset bien dem
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <m_drain+0xbc>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
            runningFunc = &m_spin;
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <m_drain+0xd8>)
 80021dc:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <m_drain+0xe0>)
 80021de:	601a      	str	r2, [r3, #0]
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000265 	.word	0x20000265
 80021ec:	080068a8 	.word	0x080068a8
 80021f0:	20000264 	.word	0x20000264
 80021f4:	2000024c 	.word	0x2000024c
 80021f8:	080068bc 	.word	0x080068bc
 80021fc:	20000250 	.word	0x20000250
 8002200:	40010c00 	.word	0x40010c00
 8002204:	40011000 	.word	0x40011000
 8002208:	080068cc 	.word	0x080068cc
 800220c:	20000268 	.word	0x20000268
 8002210:	08001e85 	.word	0x08001e85
 8002214:	08002219 	.word	0x08002219

08002218 <m_spin>:

void m_spin( void ) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
    /*
    * Ham chi xa, quay dong co max 10s
    */
    current_step = 4;
 800221e:	4b2f      	ldr	r3, [pc, #188]	; (80022dc <m_spin+0xc4>)
 8002220:	2204      	movs	r2, #4
 8002222:	701a      	strb	r2, [r3, #0]
    //nao mat dien ma co dien lai thi cho quay lai tu dau cua buoc nay luon cho roi =)))

    static bool firstRun_spin = true;
    static uint32_t time_spin;
    if ( firstRun_spin ) {
 8002224:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <m_spin+0xc8>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <m_spin+0x24>
        time_spin = HAL_GetTick(); // thoi gian bat dau quay
 800222c:	f000 f95e 	bl	80024ec <HAL_GetTick>
 8002230:	4603      	mov	r3, r0
 8002232:	4a2c      	ldr	r2, [pc, #176]	; (80022e4 <m_spin+0xcc>)
 8002234:	6013      	str	r3, [r2, #0]
        firstRun_spin = false;
 8002236:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <m_spin+0xc8>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
    }

    char data[16];
    sprintf(data, "tm:%ds sp:%ds", (HAL_GetTick()-time_spin)/1000, 10 );
 800223c:	f000 f956 	bl	80024ec <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <m_spin+0xcc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <m_spin+0xd0>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	099a      	lsrs	r2, r3, #6
 8002250:	4638      	mov	r0, r7
 8002252:	230a      	movs	r3, #10
 8002254:	4925      	ldr	r1, [pc, #148]	; (80022ec <m_spin+0xd4>)
 8002256:	f003 fd7b 	bl	8005d50 <siprintf>
    lcd_goto_XY(1, 0);
 800225a:	2100      	movs	r1, #0
 800225c:	2001      	movs	r0, #1
 800225e:	f7fe fc1b 	bl	8000a98 <lcd_goto_XY>
    lcd_send_string("Spinning...     ");
 8002262:	4823      	ldr	r0, [pc, #140]	; (80022f0 <m_spin+0xd8>)
 8002264:	f7fe fbee 	bl	8000a44 <lcd_send_string>
    lcd_goto_XY(2, 0);
 8002268:	2100      	movs	r1, #0
 800226a:	2002      	movs	r0, #2
 800226c:	f7fe fc14 	bl	8000a98 <lcd_goto_XY>
    lcd_send_string(data);
 8002270:	463b      	mov	r3, r7
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fbe6 	bl	8000a44 <lcd_send_string>

    if (HAL_GetTick() - time_spin < 10000) {
 8002278:	f000 f938 	bl	80024ec <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <m_spin+0xcc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f242 720f 	movw	r2, #9999	; 0x270f
 8002288:	4293      	cmp	r3, r2
 800228a:	d80e      	bhi.n	80022aa <m_spin+0x92>
        HAL_GPIO_WritePin(drain_gate_GPIO_Port, drain_gate_Pin, GPIO_PIN_SET);
 800228c:	2201      	movs	r2, #1
 800228e:	2110      	movs	r1, #16
 8002290:	4818      	ldr	r0, [pc, #96]	; (80022f4 <m_spin+0xdc>)
 8002292:	f000 fe30 	bl	8002ef6 <HAL_GPIO_WritePin>
        *p_motorRun = true;
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <m_spin+0xe0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_SET);
 800229e:	2201      	movs	r2, #1
 80022a0:	2120      	movs	r1, #32
 80022a2:	4814      	ldr	r0, [pc, #80]	; (80022f4 <m_spin+0xdc>)
 80022a4:	f000 fe27 	bl	8002ef6 <HAL_GPIO_WritePin>
        *p_motorRun = false;
        HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_RESET);
        firstRun_spin = true; //reset bit
        runningFunc = &making_3_beep_sound; //go to beep
    }
}
 80022a8:	e013      	b.n	80022d2 <m_spin+0xba>
        HAL_GPIO_WritePin(drain_gate_GPIO_Port, drain_gate_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2110      	movs	r1, #16
 80022ae:	4811      	ldr	r0, [pc, #68]	; (80022f4 <m_spin+0xdc>)
 80022b0:	f000 fe21 	bl	8002ef6 <HAL_GPIO_WritePin>
        *p_motorRun = false;
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <m_spin+0xe0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_RESET);
 80022bc:	2200      	movs	r2, #0
 80022be:	2120      	movs	r1, #32
 80022c0:	480c      	ldr	r0, [pc, #48]	; (80022f4 <m_spin+0xdc>)
 80022c2:	f000 fe18 	bl	8002ef6 <HAL_GPIO_WritePin>
        firstRun_spin = true; //reset bit
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <m_spin+0xc8>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
        runningFunc = &making_3_beep_sound; //go to beep
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <m_spin+0xe4>)
 80022ce:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <m_spin+0xe8>)
 80022d0:	601a      	str	r2, [r3, #0]
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000265 	.word	0x20000265
 80022e0:	2000001d 	.word	0x2000001d
 80022e4:	20000278 	.word	0x20000278
 80022e8:	10624dd3 	.word	0x10624dd3
 80022ec:	080068d8 	.word	0x080068d8
 80022f0:	080068e8 	.word	0x080068e8
 80022f4:	40010c00 	.word	0x40010c00
 80022f8:	2000025c 	.word	0x2000025c
 80022fc:	20000268 	.word	0x20000268
 8002300:	08002305 	.word	0x08002305

08002304 <making_3_beep_sound>:

void making_3_beep_sound( void ) {
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	/* making beep sound, times is number of beep sound*/
    static bool firstRun_beep = true;
    static bool beep = false;
    static uint32_t time_beep;
    static uint8_t beep_count = 0;
    current_step = 5;
 8002308:	4b2f      	ldr	r3, [pc, #188]	; (80023c8 <making_3_beep_sound+0xc4>)
 800230a:	2205      	movs	r2, #5
 800230c:	701a      	strb	r2, [r3, #0]
    lcd_clear_display();
 800230e:	f7fe fbaf 	bl	8000a70 <lcd_clear_display>
    lcd_goto_XY(2, 4);
 8002312:	2104      	movs	r1, #4
 8002314:	2002      	movs	r0, #2
 8002316:	f7fe fbbf 	bl	8000a98 <lcd_goto_XY>
    lcd_send_string("Wash done!");
 800231a:	482c      	ldr	r0, [pc, #176]	; (80023cc <making_3_beep_sound+0xc8>)
 800231c:	f7fe fb92 	bl	8000a44 <lcd_send_string>

    if ( firstRun_beep ) {
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <making_3_beep_sound+0xcc>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <making_3_beep_sound+0x3a>
        time_beep = HAL_GetTick(); // thoi gian bat dau quay
 8002328:	f000 f8e0 	bl	80024ec <HAL_GetTick>
 800232c:	4603      	mov	r3, r0
 800232e:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <making_3_beep_sound+0xd0>)
 8002330:	6013      	str	r3, [r2, #0]
        firstRun_beep = false;
 8002332:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <making_3_beep_sound+0xcc>)
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
        beep_count = 0;
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <making_3_beep_sound+0xd4>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
    }
    if ( beep_count > 3) {
 800233e:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <making_3_beep_sound+0xd4>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b03      	cmp	r3, #3
 8002344:	d911      	bls.n	800236a <making_3_beep_sound+0x66>
        wash_done = true;
 8002346:	4b25      	ldr	r3, [pc, #148]	; (80023dc <making_3_beep_sound+0xd8>)
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
        firstRun_beep = true;
 800234c:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <making_3_beep_sound+0xcc>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	2102      	movs	r1, #2
 8002356:	4822      	ldr	r0, [pc, #136]	; (80023e0 <making_3_beep_sound+0xdc>)
 8002358:	f000 fdcd 	bl	8002ef6 <HAL_GPIO_WritePin>
        runningFunc = &start_procedure; //return to start function
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <making_3_beep_sound+0xe0>)
 800235e:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <making_3_beep_sound+0xe4>)
 8002360:	601a      	str	r2, [r3, #0]
        HAL_Delay(100);
 8002362:	2064      	movs	r0, #100	; 0x64
 8002364:	f000 f8cc 	bl	8002500 <HAL_Delay>
            beep = !beep;
            beep_count += (beep ? 1 : 0);
            time_beep = HAL_GetTick();
        }
    }
}
 8002368:	e02c      	b.n	80023c4 <making_3_beep_sound+0xc0>
        HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, beep ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800236a:	4b20      	ldr	r3, [pc, #128]	; (80023ec <making_3_beep_sound+0xe8>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	2102      	movs	r1, #2
 8002372:	481b      	ldr	r0, [pc, #108]	; (80023e0 <making_3_beep_sound+0xdc>)
 8002374:	f000 fdbf 	bl	8002ef6 <HAL_GPIO_WritePin>
        if (HAL_GetTick() - time_beep > 800) {
 8002378:	f000 f8b8 	bl	80024ec <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <making_3_beep_sound+0xd0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002388:	d91c      	bls.n	80023c4 <making_3_beep_sound+0xc0>
            beep = !beep;
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <making_3_beep_sound+0xe8>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	bf14      	ite	ne
 8002392:	2301      	movne	r3, #1
 8002394:	2300      	moveq	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f083 0301 	eor.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <making_3_beep_sound+0xe8>)
 80023a6:	701a      	strb	r2, [r3, #0]
            beep_count += (beep ? 1 : 0);
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <making_3_beep_sound+0xe8>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <making_3_beep_sound+0xd4>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <making_3_beep_sound+0xd4>)
 80023b8:	701a      	strb	r2, [r3, #0]
            time_beep = HAL_GetTick();
 80023ba:	f000 f897 	bl	80024ec <HAL_GetTick>
 80023be:	4603      	mov	r3, r0
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <making_3_beep_sound+0xd0>)
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000265 	.word	0x20000265
 80023cc:	080068fc 	.word	0x080068fc
 80023d0:	2000001e 	.word	0x2000001e
 80023d4:	2000027c 	.word	0x2000027c
 80023d8:	20000280 	.word	0x20000280
 80023dc:	20000259 	.word	0x20000259
 80023e0:	40010800 	.word	0x40010800
 80023e4:	20000268 	.word	0x20000268
 80023e8:	08001e65 	.word	0x08001e65
 80023ec:	20000281 	.word	0x20000281

080023f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023f0:	f7ff fbf8 	bl	8001be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f4:	480b      	ldr	r0, [pc, #44]	; (8002424 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023f6:	490c      	ldr	r1, [pc, #48]	; (8002428 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023f8:	4a0c      	ldr	r2, [pc, #48]	; (800242c <LoopFillZerobss+0x16>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023fc:	e002      	b.n	8002404 <LoopCopyDataInit>

080023fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002402:	3304      	adds	r3, #4

08002404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002408:	d3f9      	bcc.n	80023fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240a:	4a09      	ldr	r2, [pc, #36]	; (8002430 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800240c:	4c09      	ldr	r4, [pc, #36]	; (8002434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002410:	e001      	b.n	8002416 <LoopFillZerobss>

08002412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002414:	3204      	adds	r2, #4

08002416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002418:	d3fb      	bcc.n	8002412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800241a:	f003 fc6d 	bl	8005cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800241e:	f7fe fc79 	bl	8000d14 <main>
  bx lr
 8002422:	4770      	bx	lr
  ldr r0, =_sdata
 8002424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002428:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800242c:	08006970 	.word	0x08006970
  ldr r2, =_sbss
 8002430:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002434:	20000298 	.word	0x20000298

08002438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002438:	e7fe      	b.n	8002438 <ADC1_2_IRQHandler>
	...

0800243c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_Init+0x28>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a07      	ldr	r2, [pc, #28]	; (8002464 <HAL_Init+0x28>)
 8002446:	f043 0310 	orr.w	r3, r3, #16
 800244a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244c:	2003      	movs	r0, #3
 800244e:	f000 fb75 	bl	8002b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002452:	200f      	movs	r0, #15
 8002454:	f000 f808 	bl	8002468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002458:	f7ff f9c4 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40022000 	.word	0x40022000

08002468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_InitTick+0x54>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_InitTick+0x58>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fb8d 	bl	8002ba6 <HAL_SYSTICK_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e00e      	b.n	80024b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b0f      	cmp	r3, #15
 800249a:	d80a      	bhi.n	80024b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800249c:	2200      	movs	r2, #0
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f000 fb55 	bl	8002b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a8:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <HAL_InitTick+0x5c>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000018 	.word	0x20000018
 80024c0:	20000024 	.word	0x20000024
 80024c4:	20000020 	.word	0x20000020

080024c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_IncTick+0x1c>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_IncTick+0x20>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	4a03      	ldr	r2, [pc, #12]	; (80024e8 <HAL_IncTick+0x20>)
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	20000024 	.word	0x20000024
 80024e8:	20000284 	.word	0x20000284

080024ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return uwTick;
 80024f0:	4b02      	ldr	r3, [pc, #8]	; (80024fc <HAL_GetTick+0x10>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	20000284 	.word	0x20000284

08002500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff fff0 	bl	80024ec <HAL_GetTick>
 800250c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d005      	beq.n	8002526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <HAL_Delay+0x44>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002526:	bf00      	nop
 8002528:	f7ff ffe0 	bl	80024ec <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	429a      	cmp	r2, r3
 8002536:	d8f7      	bhi.n	8002528 <HAL_Delay+0x28>
  {
  }
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000024 	.word	0x20000024

08002548 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_SuspendTick+0x18>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a03      	ldr	r2, [pc, #12]	; (8002560 <HAL_SuspendTick+0x18>)
 8002552:	f023 0302 	bic.w	r3, r3, #2
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	e000e010 	.word	0xe000e010

08002564 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <HAL_ResumeTick+0x18>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a03      	ldr	r2, [pc, #12]	; (800257c <HAL_ResumeTick+0x18>)
 800256e:	f043 0302 	orr.w	r3, r3, #2
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0be      	b.n	8002720 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff f942 	bl	8001848 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f9ab 	bl	8002920 <ADC_ConversionStop_Disable>
 80025ca:	4603      	mov	r3, r0
 80025cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 8099 	bne.w	800270e <HAL_ADC_Init+0x18e>
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 8095 	bne.w	800270e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025ec:	f023 0302 	bic.w	r3, r3, #2
 80025f0:	f043 0202 	orr.w	r2, r3, #2
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002600:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7b1b      	ldrb	r3, [r3, #12]
 8002606:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002608:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	4313      	orrs	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002618:	d003      	beq.n	8002622 <HAL_ADC_Init+0xa2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d102      	bne.n	8002628 <HAL_ADC_Init+0xa8>
 8002622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002626:	e000      	b.n	800262a <HAL_ADC_Init+0xaa>
 8002628:	2300      	movs	r3, #0
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7d1b      	ldrb	r3, [r3, #20]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d119      	bne.n	800266c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7b1b      	ldrb	r3, [r3, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	3b01      	subs	r3, #1
 8002646:	035a      	lsls	r2, r3, #13
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	e00b      	b.n	800266c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	f043 0220 	orr.w	r2, r3, #32
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	f043 0201 	orr.w	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	430a      	orrs	r2, r1
 800267e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	4b28      	ldr	r3, [pc, #160]	; (8002728 <HAL_ADC_Init+0x1a8>)
 8002688:	4013      	ands	r3, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	430b      	orrs	r3, r1
 8002692:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800269c:	d003      	beq.n	80026a6 <HAL_ADC_Init+0x126>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d104      	bne.n	80026b0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	051b      	lsls	r3, r3, #20
 80026ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_ADC_Init+0x1ac>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d10b      	bne.n	80026ec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	f023 0303 	bic.w	r3, r3, #3
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026ea:	e018      	b.n	800271e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	f023 0312 	bic.w	r3, r3, #18
 80026f4:	f043 0210 	orr.w	r2, r3, #16
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800270c:	e007      	b.n	800271e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	f043 0210 	orr.w	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800271e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	ffe1f7fd 	.word	0xffe1f7fd
 800272c:	ff1f0efe 	.word	0xff1f0efe

08002730 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x20>
 800274c:	2302      	movs	r3, #2
 800274e:	e0dc      	b.n	800290a <HAL_ADC_ConfigChannel+0x1da>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b06      	cmp	r3, #6
 800275e:	d81c      	bhi.n	800279a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	3b05      	subs	r3, #5
 8002772:	221f      	movs	r2, #31
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	4019      	ands	r1, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	3b05      	subs	r3, #5
 800278c:	fa00 f203 	lsl.w	r2, r0, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	635a      	str	r2, [r3, #52]	; 0x34
 8002798:	e03c      	b.n	8002814 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d81c      	bhi.n	80027dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	3b23      	subs	r3, #35	; 0x23
 80027b4:	221f      	movs	r2, #31
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	4019      	ands	r1, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	3b23      	subs	r3, #35	; 0x23
 80027ce:	fa00 f203 	lsl.w	r2, r0, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
 80027da:	e01b      	b.n	8002814 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	3b41      	subs	r3, #65	; 0x41
 80027ee:	221f      	movs	r2, #31
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	4019      	ands	r1, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	3b41      	subs	r3, #65	; 0x41
 8002808:	fa00 f203 	lsl.w	r2, r0, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b09      	cmp	r3, #9
 800281a:	d91c      	bls.n	8002856 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68d9      	ldr	r1, [r3, #12]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	3b1e      	subs	r3, #30
 800282e:	2207      	movs	r2, #7
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	4019      	ands	r1, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6898      	ldr	r0, [r3, #8]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	3b1e      	subs	r3, #30
 8002848:	fa00 f203 	lsl.w	r2, r0, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	60da      	str	r2, [r3, #12]
 8002854:	e019      	b.n	800288a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6919      	ldr	r1, [r3, #16]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	2207      	movs	r2, #7
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	4019      	ands	r1, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6898      	ldr	r0, [r3, #8]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4413      	add	r3, r2
 800287e:	fa00 f203 	lsl.w	r2, r0, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b10      	cmp	r3, #16
 8002890:	d003      	beq.n	800289a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002896:	2b11      	cmp	r3, #17
 8002898:	d132      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1d      	ldr	r2, [pc, #116]	; (8002914 <HAL_ADC_ConfigChannel+0x1e4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d125      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d126      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80028c0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d11a      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028ca:	4b13      	ldr	r3, [pc, #76]	; (8002918 <HAL_ADC_ConfigChannel+0x1e8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a13      	ldr	r2, [pc, #76]	; (800291c <HAL_ADC_ConfigChannel+0x1ec>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	0c9a      	lsrs	r2, r3, #18
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028e0:	e002      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f9      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x1b2>
 80028ee:	e007      	b.n	8002900 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	f043 0220 	orr.w	r2, r3, #32
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	40012400 	.word	0x40012400
 8002918:	20000018 	.word	0x20000018
 800291c:	431bde83 	.word	0x431bde83

08002920 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d12e      	bne.n	8002998 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0201 	bic.w	r2, r2, #1
 8002948:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800294a:	f7ff fdcf 	bl	80024ec <HAL_GetTick>
 800294e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002950:	e01b      	b.n	800298a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002952:	f7ff fdcb 	bl	80024ec <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d914      	bls.n	800298a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b01      	cmp	r3, #1
 800296c:	d10d      	bne.n	800298a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	f043 0210 	orr.w	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e007      	b.n	800299a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b01      	cmp	r3, #1
 8002996:	d0dc      	beq.n	8002952 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	60d3      	str	r3, [r2, #12]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <__NVIC_GetPriorityGrouping+0x18>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	f003 0307 	and.w	r3, r3, #7
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	db0b      	blt.n	8002a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	4906      	ldr	r1, [pc, #24]	; (8002a3c <__NVIC_EnableIRQ+0x34>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2001      	movs	r0, #1
 8002a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100

08002a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	db0a      	blt.n	8002a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	490c      	ldr	r1, [pc, #48]	; (8002a8c <__NVIC_SetPriority+0x4c>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	440b      	add	r3, r1
 8002a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a68:	e00a      	b.n	8002a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4908      	ldr	r1, [pc, #32]	; (8002a90 <__NVIC_SetPriority+0x50>)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	3b04      	subs	r3, #4
 8002a78:	0112      	lsls	r2, r2, #4
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	761a      	strb	r2, [r3, #24]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000e100 	.word	0xe000e100
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	; 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f1c3 0307 	rsb	r3, r3, #7
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	bf28      	it	cs
 8002ab2:	2304      	movcs	r3, #4
 8002ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d902      	bls.n	8002ac4 <NVIC_EncodePriority+0x30>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3b03      	subs	r3, #3
 8002ac2:	e000      	b.n	8002ac6 <NVIC_EncodePriority+0x32>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	43d9      	mvns	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	4313      	orrs	r3, r2
         );
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3724      	adds	r7, #36	; 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b08:	d301      	bcc.n	8002b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00f      	b.n	8002b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <SysTick_Config+0x40>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b16:	210f      	movs	r1, #15
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	f7ff ff90 	bl	8002a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <SysTick_Config+0x40>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <SysTick_Config+0x40>)
 8002b28:	2207      	movs	r2, #7
 8002b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	e000e010 	.word	0xe000e010

08002b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ff2d 	bl	80029a4 <__NVIC_SetPriorityGrouping>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b64:	f7ff ff42 	bl	80029ec <__NVIC_GetPriorityGrouping>
 8002b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	6978      	ldr	r0, [r7, #20]
 8002b70:	f7ff ff90 	bl	8002a94 <NVIC_EncodePriority>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff5f 	bl	8002a40 <__NVIC_SetPriority>
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff35 	bl	8002a08 <__NVIC_EnableIRQ>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ffa2 	bl	8002af8 <SysTick_Config>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b08b      	sub	sp, #44	; 0x2c
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bd2:	e169      	b.n	8002ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	f040 8158 	bne.w	8002ea2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4a9a      	ldr	r2, [pc, #616]	; (8002e60 <HAL_GPIO_Init+0x2a0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d05e      	beq.n	8002cba <HAL_GPIO_Init+0xfa>
 8002bfc:	4a98      	ldr	r2, [pc, #608]	; (8002e60 <HAL_GPIO_Init+0x2a0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d875      	bhi.n	8002cee <HAL_GPIO_Init+0x12e>
 8002c02:	4a98      	ldr	r2, [pc, #608]	; (8002e64 <HAL_GPIO_Init+0x2a4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d058      	beq.n	8002cba <HAL_GPIO_Init+0xfa>
 8002c08:	4a96      	ldr	r2, [pc, #600]	; (8002e64 <HAL_GPIO_Init+0x2a4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d86f      	bhi.n	8002cee <HAL_GPIO_Init+0x12e>
 8002c0e:	4a96      	ldr	r2, [pc, #600]	; (8002e68 <HAL_GPIO_Init+0x2a8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d052      	beq.n	8002cba <HAL_GPIO_Init+0xfa>
 8002c14:	4a94      	ldr	r2, [pc, #592]	; (8002e68 <HAL_GPIO_Init+0x2a8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d869      	bhi.n	8002cee <HAL_GPIO_Init+0x12e>
 8002c1a:	4a94      	ldr	r2, [pc, #592]	; (8002e6c <HAL_GPIO_Init+0x2ac>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d04c      	beq.n	8002cba <HAL_GPIO_Init+0xfa>
 8002c20:	4a92      	ldr	r2, [pc, #584]	; (8002e6c <HAL_GPIO_Init+0x2ac>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d863      	bhi.n	8002cee <HAL_GPIO_Init+0x12e>
 8002c26:	4a92      	ldr	r2, [pc, #584]	; (8002e70 <HAL_GPIO_Init+0x2b0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d046      	beq.n	8002cba <HAL_GPIO_Init+0xfa>
 8002c2c:	4a90      	ldr	r2, [pc, #576]	; (8002e70 <HAL_GPIO_Init+0x2b0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d85d      	bhi.n	8002cee <HAL_GPIO_Init+0x12e>
 8002c32:	2b12      	cmp	r3, #18
 8002c34:	d82a      	bhi.n	8002c8c <HAL_GPIO_Init+0xcc>
 8002c36:	2b12      	cmp	r3, #18
 8002c38:	d859      	bhi.n	8002cee <HAL_GPIO_Init+0x12e>
 8002c3a:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <HAL_GPIO_Init+0x80>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002cbb 	.word	0x08002cbb
 8002c44:	08002c95 	.word	0x08002c95
 8002c48:	08002ca7 	.word	0x08002ca7
 8002c4c:	08002ce9 	.word	0x08002ce9
 8002c50:	08002cef 	.word	0x08002cef
 8002c54:	08002cef 	.word	0x08002cef
 8002c58:	08002cef 	.word	0x08002cef
 8002c5c:	08002cef 	.word	0x08002cef
 8002c60:	08002cef 	.word	0x08002cef
 8002c64:	08002cef 	.word	0x08002cef
 8002c68:	08002cef 	.word	0x08002cef
 8002c6c:	08002cef 	.word	0x08002cef
 8002c70:	08002cef 	.word	0x08002cef
 8002c74:	08002cef 	.word	0x08002cef
 8002c78:	08002cef 	.word	0x08002cef
 8002c7c:	08002cef 	.word	0x08002cef
 8002c80:	08002cef 	.word	0x08002cef
 8002c84:	08002c9d 	.word	0x08002c9d
 8002c88:	08002cb1 	.word	0x08002cb1
 8002c8c:	4a79      	ldr	r2, [pc, #484]	; (8002e74 <HAL_GPIO_Init+0x2b4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c92:	e02c      	b.n	8002cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	623b      	str	r3, [r7, #32]
          break;
 8002c9a:	e029      	b.n	8002cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	623b      	str	r3, [r7, #32]
          break;
 8002ca4:	e024      	b.n	8002cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	3308      	adds	r3, #8
 8002cac:	623b      	str	r3, [r7, #32]
          break;
 8002cae:	e01f      	b.n	8002cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	623b      	str	r3, [r7, #32]
          break;
 8002cb8:	e01a      	b.n	8002cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d102      	bne.n	8002cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	623b      	str	r3, [r7, #32]
          break;
 8002cc6:	e013      	b.n	8002cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d105      	bne.n	8002cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	611a      	str	r2, [r3, #16]
          break;
 8002cda:	e009      	b.n	8002cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cdc:	2308      	movs	r3, #8
 8002cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	615a      	str	r2, [r3, #20]
          break;
 8002ce6:	e003      	b.n	8002cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	623b      	str	r3, [r7, #32]
          break;
 8002cec:	e000      	b.n	8002cf0 <HAL_GPIO_Init+0x130>
          break;
 8002cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2bff      	cmp	r3, #255	; 0xff
 8002cf4:	d801      	bhi.n	8002cfa <HAL_GPIO_Init+0x13a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	e001      	b.n	8002cfe <HAL_GPIO_Init+0x13e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2bff      	cmp	r3, #255	; 0xff
 8002d04:	d802      	bhi.n	8002d0c <HAL_GPIO_Init+0x14c>
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	e002      	b.n	8002d12 <HAL_GPIO_Init+0x152>
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	3b08      	subs	r3, #8
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	210f      	movs	r1, #15
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	401a      	ands	r2, r3
 8002d24:	6a39      	ldr	r1, [r7, #32]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80b1 	beq.w	8002ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d40:	4b4d      	ldr	r3, [pc, #308]	; (8002e78 <HAL_GPIO_Init+0x2b8>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	4a4c      	ldr	r2, [pc, #304]	; (8002e78 <HAL_GPIO_Init+0x2b8>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6193      	str	r3, [r2, #24]
 8002d4c:	4b4a      	ldr	r3, [pc, #296]	; (8002e78 <HAL_GPIO_Init+0x2b8>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d58:	4a48      	ldr	r2, [pc, #288]	; (8002e7c <HAL_GPIO_Init+0x2bc>)
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a40      	ldr	r2, [pc, #256]	; (8002e80 <HAL_GPIO_Init+0x2c0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <HAL_GPIO_Init+0x1ec>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a3f      	ldr	r2, [pc, #252]	; (8002e84 <HAL_GPIO_Init+0x2c4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00d      	beq.n	8002da8 <HAL_GPIO_Init+0x1e8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a3e      	ldr	r2, [pc, #248]	; (8002e88 <HAL_GPIO_Init+0x2c8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d007      	beq.n	8002da4 <HAL_GPIO_Init+0x1e4>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a3d      	ldr	r2, [pc, #244]	; (8002e8c <HAL_GPIO_Init+0x2cc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d101      	bne.n	8002da0 <HAL_GPIO_Init+0x1e0>
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e006      	b.n	8002dae <HAL_GPIO_Init+0x1ee>
 8002da0:	2304      	movs	r3, #4
 8002da2:	e004      	b.n	8002dae <HAL_GPIO_Init+0x1ee>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e002      	b.n	8002dae <HAL_GPIO_Init+0x1ee>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_GPIO_Init+0x1ee>
 8002dac:	2300      	movs	r3, #0
 8002dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db0:	f002 0203 	and.w	r2, r2, #3
 8002db4:	0092      	lsls	r2, r2, #2
 8002db6:	4093      	lsls	r3, r2
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dbe:	492f      	ldr	r1, [pc, #188]	; (8002e7c <HAL_GPIO_Init+0x2bc>)
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d006      	beq.n	8002de6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dd8:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	492c      	ldr	r1, [pc, #176]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002de6:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	4928      	ldr	r1, [pc, #160]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d006      	beq.n	8002e0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	4922      	ldr	r1, [pc, #136]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60cb      	str	r3, [r1, #12]
 8002e0c:	e006      	b.n	8002e1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e0e:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	491e      	ldr	r1, [pc, #120]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d006      	beq.n	8002e36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4918      	ldr	r1, [pc, #96]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
 8002e34:	e006      	b.n	8002e44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e36:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	4914      	ldr	r1, [pc, #80]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d021      	beq.n	8002e94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	490e      	ldr	r1, [pc, #56]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
 8002e5c:	e021      	b.n	8002ea2 <HAL_GPIO_Init+0x2e2>
 8002e5e:	bf00      	nop
 8002e60:	10320000 	.word	0x10320000
 8002e64:	10310000 	.word	0x10310000
 8002e68:	10220000 	.word	0x10220000
 8002e6c:	10210000 	.word	0x10210000
 8002e70:	10120000 	.word	0x10120000
 8002e74:	10110000 	.word	0x10110000
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40010800 	.word	0x40010800
 8002e84:	40010c00 	.word	0x40010c00
 8002e88:	40011000 	.word	0x40011000
 8002e8c:	40011400 	.word	0x40011400
 8002e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	4909      	ldr	r1, [pc, #36]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f47f ae8e 	bne.w	8002bd4 <HAL_GPIO_Init+0x14>
  }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	372c      	adds	r7, #44	; 0x2c
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	e001      	b.n	8002eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	807b      	strh	r3, [r7, #2]
 8002f02:	4613      	mov	r3, r2
 8002f04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f06:	787b      	ldrb	r3, [r7, #1]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0c:	887a      	ldrh	r2, [r7, #2]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f12:	e003      	b.n	8002f1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f14:	887b      	ldrh	r3, [r7, #2]
 8002f16:	041a      	lsls	r2, r3, #16
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	611a      	str	r2, [r3, #16]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d006      	beq.n	8002f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f3e:	4a05      	ldr	r2, [pc, #20]	; (8002f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fdc8 	bl	8000adc <HAL_GPIO_EXTI_Callback>
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40010400 	.word	0x40010400

08002f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e12b      	b.n	80031c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe fc9e 	bl	80018c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2224      	movs	r2, #36	; 0x24
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002faa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fbc:	f001 feaa 	bl	8004d14 <HAL_RCC_GetPCLK1Freq>
 8002fc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4a81      	ldr	r2, [pc, #516]	; (80031cc <HAL_I2C_Init+0x274>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d807      	bhi.n	8002fdc <HAL_I2C_Init+0x84>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a80      	ldr	r2, [pc, #512]	; (80031d0 <HAL_I2C_Init+0x278>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	bf94      	ite	ls
 8002fd4:	2301      	movls	r3, #1
 8002fd6:	2300      	movhi	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e006      	b.n	8002fea <HAL_I2C_Init+0x92>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a7d      	ldr	r2, [pc, #500]	; (80031d4 <HAL_I2C_Init+0x27c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bf94      	ite	ls
 8002fe4:	2301      	movls	r3, #1
 8002fe6:	2300      	movhi	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0e7      	b.n	80031c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a78      	ldr	r2, [pc, #480]	; (80031d8 <HAL_I2C_Init+0x280>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0c9b      	lsrs	r3, r3, #18
 8002ffc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a6a      	ldr	r2, [pc, #424]	; (80031cc <HAL_I2C_Init+0x274>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d802      	bhi.n	800302c <HAL_I2C_Init+0xd4>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	3301      	adds	r3, #1
 800302a:	e009      	b.n	8003040 <HAL_I2C_Init+0xe8>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	4a69      	ldr	r2, [pc, #420]	; (80031dc <HAL_I2C_Init+0x284>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	3301      	adds	r3, #1
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	430b      	orrs	r3, r1
 8003046:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003052:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	495c      	ldr	r1, [pc, #368]	; (80031cc <HAL_I2C_Init+0x274>)
 800305c:	428b      	cmp	r3, r1
 800305e:	d819      	bhi.n	8003094 <HAL_I2C_Init+0x13c>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e59      	subs	r1, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	fbb1 f3f3 	udiv	r3, r1, r3
 800306e:	1c59      	adds	r1, r3, #1
 8003070:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003074:	400b      	ands	r3, r1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_I2C_Init+0x138>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1e59      	subs	r1, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fbb1 f3f3 	udiv	r3, r1, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308e:	e051      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003090:	2304      	movs	r3, #4
 8003092:	e04f      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d111      	bne.n	80030c0 <HAL_I2C_Init+0x168>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1e58      	subs	r0, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	440b      	add	r3, r1
 80030aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e012      	b.n	80030e6 <HAL_I2C_Init+0x18e>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e58      	subs	r0, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	0099      	lsls	r1, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Init+0x196>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e022      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10e      	bne.n	8003114 <HAL_I2C_Init+0x1bc>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1e58      	subs	r0, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	440b      	add	r3, r1
 8003104:	fbb0 f3f3 	udiv	r3, r0, r3
 8003108:	3301      	adds	r3, #1
 800310a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003112:	e00f      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	0099      	lsls	r1, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	fbb0 f3f3 	udiv	r3, r0, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	6809      	ldr	r1, [r1, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003162:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6911      	ldr	r1, [r2, #16]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68d2      	ldr	r2, [r2, #12]
 800316e:	4311      	orrs	r1, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	430b      	orrs	r3, r1
 8003176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	000186a0 	.word	0x000186a0
 80031d0:	001e847f 	.word	0x001e847f
 80031d4:	003d08ff 	.word	0x003d08ff
 80031d8:	431bde83 	.word	0x431bde83
 80031dc:	10624dd3 	.word	0x10624dd3

080031e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	461a      	mov	r2, r3
 80031ec:	460b      	mov	r3, r1
 80031ee:	817b      	strh	r3, [r7, #10]
 80031f0:	4613      	mov	r3, r2
 80031f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031f4:	f7ff f97a 	bl	80024ec <HAL_GetTick>
 80031f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b20      	cmp	r3, #32
 8003204:	f040 80e0 	bne.w	80033c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2319      	movs	r3, #25
 800320e:	2201      	movs	r2, #1
 8003210:	4970      	ldr	r1, [pc, #448]	; (80033d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 ff7e 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800321e:	2302      	movs	r3, #2
 8003220:	e0d3      	b.n	80033ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_I2C_Master_Transmit+0x50>
 800322c:	2302      	movs	r3, #2
 800322e:	e0cc      	b.n	80033ca <HAL_I2C_Master_Transmit+0x1ea>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d007      	beq.n	8003256 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003264:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2221      	movs	r2, #33	; 0x21
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2210      	movs	r2, #16
 8003272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	893a      	ldrh	r2, [r7, #8]
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a50      	ldr	r2, [pc, #320]	; (80033d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003298:	8979      	ldrh	r1, [r7, #10]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	6a3a      	ldr	r2, [r7, #32]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fd38 	bl	8003d14 <I2C_MasterRequestWrite>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e08d      	b.n	80033ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032c4:	e066      	b.n	8003394 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	6a39      	ldr	r1, [r7, #32]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f001 f83c 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d107      	bne.n	80032ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e06b      	b.n	80033ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	781a      	ldrb	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b04      	cmp	r3, #4
 800332e:	d11b      	bne.n	8003368 <HAL_I2C_Master_Transmit+0x188>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d017      	beq.n	8003368 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	6a39      	ldr	r1, [r7, #32]
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f001 f833 	bl	80043d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	2b04      	cmp	r3, #4
 800337e:	d107      	bne.n	8003390 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e01a      	b.n	80033ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	d194      	bne.n	80032c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	00100002 	.word	0x00100002
 80033d8:	ffff0000 	.word	0xffff0000

080033dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	4608      	mov	r0, r1
 80033e6:	4611      	mov	r1, r2
 80033e8:	461a      	mov	r2, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	817b      	strh	r3, [r7, #10]
 80033ee:	460b      	mov	r3, r1
 80033f0:	813b      	strh	r3, [r7, #8]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033f6:	f7ff f879 	bl	80024ec <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b20      	cmp	r3, #32
 8003406:	f040 80d9 	bne.w	80035bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2319      	movs	r3, #25
 8003410:	2201      	movs	r2, #1
 8003412:	496d      	ldr	r1, [pc, #436]	; (80035c8 <HAL_I2C_Mem_Write+0x1ec>)
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fe7d 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
 8003422:	e0cc      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Mem_Write+0x56>
 800342e:	2302      	movs	r3, #2
 8003430:	e0c5      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d007      	beq.n	8003458 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003466:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2221      	movs	r2, #33	; 0x21
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2240      	movs	r2, #64	; 0x40
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a3a      	ldr	r2, [r7, #32]
 8003482:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003488:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a4d      	ldr	r2, [pc, #308]	; (80035cc <HAL_I2C_Mem_Write+0x1f0>)
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800349a:	88f8      	ldrh	r0, [r7, #6]
 800349c:	893a      	ldrh	r2, [r7, #8]
 800349e:	8979      	ldrh	r1, [r7, #10]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	4603      	mov	r3, r0
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fcb4 	bl	8003e18 <I2C_RequestMemoryWrite>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d052      	beq.n	800355c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e081      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 ff42 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d107      	bne.n	80034e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06b      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b04      	cmp	r3, #4
 8003522:	d11b      	bne.n	800355c <HAL_I2C_Mem_Write+0x180>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	2b00      	cmp	r3, #0
 800352a:	d017      	beq.n	800355c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	781a      	ldrb	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1aa      	bne.n	80034ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 ff35 	bl	80043d8 <I2C_WaitOnBTFFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	2b04      	cmp	r3, #4
 800357a:	d107      	bne.n	800358c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e016      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	00100002 	.word	0x00100002
 80035cc:	ffff0000 	.word	0xffff0000

080035d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08c      	sub	sp, #48	; 0x30
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	4608      	mov	r0, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	4603      	mov	r3, r0
 80035e0:	817b      	strh	r3, [r7, #10]
 80035e2:	460b      	mov	r3, r1
 80035e4:	813b      	strh	r3, [r7, #8]
 80035e6:	4613      	mov	r3, r2
 80035e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ee:	f7fe ff7d 	bl	80024ec <HAL_GetTick>
 80035f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	f040 8250 	bne.w	8003aa2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2319      	movs	r3, #25
 8003608:	2201      	movs	r2, #1
 800360a:	4982      	ldr	r1, [pc, #520]	; (8003814 <HAL_I2C_Mem_Read+0x244>)
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fd81 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003618:	2302      	movs	r3, #2
 800361a:	e243      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_I2C_Mem_Read+0x5a>
 8003626:	2302      	movs	r3, #2
 8003628:	e23c      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x4d4>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b01      	cmp	r3, #1
 800363e:	d007      	beq.n	8003650 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800365e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2222      	movs	r2, #34	; 0x22
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2240      	movs	r2, #64	; 0x40
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800367a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a62      	ldr	r2, [pc, #392]	; (8003818 <HAL_I2C_Mem_Read+0x248>)
 8003690:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003692:	88f8      	ldrh	r0, [r7, #6]
 8003694:	893a      	ldrh	r2, [r7, #8]
 8003696:	8979      	ldrh	r1, [r7, #10]
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	4603      	mov	r3, r0
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fc4e 	bl	8003f44 <I2C_RequestMemoryRead>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e1f8      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d113      	bne.n	80036e2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e1cc      	b.n	8003a7c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d11e      	bne.n	8003728 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036fa:	b672      	cpsid	i
}
 80036fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003722:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003724:	b662      	cpsie	i
}
 8003726:	e035      	b.n	8003794 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372c:	2b02      	cmp	r3, #2
 800372e:	d11e      	bne.n	800376e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800373e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003740:	b672      	cpsid	i
}
 8003742:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003768:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800376a:	b662      	cpsie	i
}
 800376c:	e012      	b.n	8003794 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800377c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003794:	e172      	b.n	8003a7c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	2b03      	cmp	r3, #3
 800379c:	f200 811f 	bhi.w	80039de <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d123      	bne.n	80037f0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fe5b 	bl	8004468 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e173      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ee:	e145      	b.n	8003a7c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d152      	bne.n	800389e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fe:	2200      	movs	r2, #0
 8003800:	4906      	ldr	r1, [pc, #24]	; (800381c <HAL_I2C_Mem_Read+0x24c>)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fc86 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e148      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x4d4>
 8003812:	bf00      	nop
 8003814:	00100002 	.word	0x00100002
 8003818:	ffff0000 	.word	0xffff0000
 800381c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003820:	b672      	cpsid	i
}
 8003822:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003866:	b662      	cpsie	i
}
 8003868:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800389c:	e0ee      	b.n	8003a7c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a4:	2200      	movs	r2, #0
 80038a6:	4981      	ldr	r1, [pc, #516]	; (8003aac <HAL_I2C_Mem_Read+0x4dc>)
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fc33 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0f5      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038c8:	b672      	cpsid	i
}
 80038ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038fe:	4b6c      	ldr	r3, [pc, #432]	; (8003ab0 <HAL_I2C_Mem_Read+0x4e0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	08db      	lsrs	r3, r3, #3
 8003904:	4a6b      	ldr	r2, [pc, #428]	; (8003ab4 <HAL_I2C_Mem_Read+0x4e4>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	0a1a      	lsrs	r2, r3, #8
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	00da      	lsls	r2, r3, #3
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	3b01      	subs	r3, #1
 800391c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d118      	bne.n	8003956 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003946:	b662      	cpsie	i
}
 8003948:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0a6      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b04      	cmp	r3, #4
 8003962:	d1d9      	bne.n	8003918 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003972:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039a6:	b662      	cpsie	i
}
 80039a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039dc:	e04e      	b.n	8003a7c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fd40 	bl	8004468 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e058      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d124      	bne.n	8003a7c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d107      	bne.n	8003a4a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a48:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f47f ae88 	bne.w	8003796 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e000      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
  }
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3728      	adds	r7, #40	; 0x28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	00010004 	.word	0x00010004
 8003ab0:	20000018 	.word	0x20000018
 8003ab4:	14f8b589 	.word	0x14f8b589

08003ab8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ac8:	f7fe fd10 	bl	80024ec <HAL_GetTick>
 8003acc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	f040 8111 	bne.w	8003d02 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2319      	movs	r3, #25
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4988      	ldr	r1, [pc, #544]	; (8003d0c <HAL_I2C_IsDeviceReady+0x254>)
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fb12 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
 8003af8:	e104      	b.n	8003d04 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_I2C_IsDeviceReady+0x50>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e0fd      	b.n	8003d04 <HAL_I2C_IsDeviceReady+0x24c>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d007      	beq.n	8003b2e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2224      	movs	r2, #36	; 0x24
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4a70      	ldr	r2, [pc, #448]	; (8003d10 <HAL_I2C_IsDeviceReady+0x258>)
 8003b50:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b60:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fad0 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b88:	d103      	bne.n	8003b92 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e0b6      	b.n	8003d04 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b96:	897b      	ldrh	r3, [r7, #10]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ba4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ba6:	f7fe fca1 	bl	80024ec <HAL_GetTick>
 8003baa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	2300      	movne	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bda:	e025      	b.n	8003c28 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bdc:	f7fe fc86 	bl	80024ec <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d302      	bcc.n	8003bf2 <HAL_I2C_IsDeviceReady+0x13a>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	22a0      	movs	r2, #160	; 0xa0
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2ba0      	cmp	r3, #160	; 0xa0
 8003c32:	d005      	beq.n	8003c40 <HAL_I2C_IsDeviceReady+0x188>
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <HAL_I2C_IsDeviceReady+0x188>
 8003c3a:	7dbb      	ldrb	r3, [r7, #22]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0cd      	beq.n	8003bdc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d129      	bne.n	8003caa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c64:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2319      	movs	r3, #25
 8003c82:	2201      	movs	r2, #1
 8003c84:	4921      	ldr	r1, [pc, #132]	; (8003d0c <HAL_I2C_IsDeviceReady+0x254>)
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fa44 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e036      	b.n	8003d04 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e02c      	b.n	8003d04 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cc2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	2319      	movs	r3, #25
 8003cca:	2201      	movs	r2, #1
 8003ccc:	490f      	ldr	r1, [pc, #60]	; (8003d0c <HAL_I2C_IsDeviceReady+0x254>)
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fa20 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e012      	b.n	8003d04 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	f4ff af32 	bcc.w	8003b52 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
  }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3720      	adds	r7, #32
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	00100002 	.word	0x00100002
 8003d10:	ffff0000 	.word	0xffff0000

08003d14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	460b      	mov	r3, r1
 8003d22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d006      	beq.n	8003d3e <I2C_MasterRequestWrite+0x2a>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d003      	beq.n	8003d3e <I2C_MasterRequestWrite+0x2a>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d3c:	d108      	bne.n	8003d50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e00b      	b.n	8003d68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	2b12      	cmp	r3, #18
 8003d56:	d107      	bne.n	8003d68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f9cd 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00d      	beq.n	8003d9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8e:	d103      	bne.n	8003d98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e035      	b.n	8003e08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da4:	d108      	bne.n	8003db8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003da6:	897b      	ldrh	r3, [r7, #10]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003db4:	611a      	str	r2, [r3, #16]
 8003db6:	e01b      	b.n	8003df0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003db8:	897b      	ldrh	r3, [r7, #10]
 8003dba:	11db      	asrs	r3, r3, #7
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f003 0306 	and.w	r3, r3, #6
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f063 030f 	orn	r3, r3, #15
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	490e      	ldr	r1, [pc, #56]	; (8003e10 <I2C_MasterRequestWrite+0xfc>)
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fa16 	bl	8004208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e010      	b.n	8003e08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003de6:	897b      	ldrh	r3, [r7, #10]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4907      	ldr	r1, [pc, #28]	; (8003e14 <I2C_MasterRequestWrite+0x100>)
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fa06 	bl	8004208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	00010008 	.word	0x00010008
 8003e14:	00010002 	.word	0x00010002

08003e18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	4608      	mov	r0, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	461a      	mov	r2, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	817b      	strh	r3, [r7, #10]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	813b      	strh	r3, [r7, #8]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f960 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00d      	beq.n	8003e76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e68:	d103      	bne.n	8003e72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e05f      	b.n	8003f36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e76:	897b      	ldrh	r3, [r7, #10]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	492d      	ldr	r1, [pc, #180]	; (8003f40 <I2C_RequestMemoryWrite+0x128>)
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f9bb 	bl	8004208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e04c      	b.n	8003f36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb4:	6a39      	ldr	r1, [r7, #32]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fa46 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00d      	beq.n	8003ede <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d107      	bne.n	8003eda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e02b      	b.n	8003f36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d105      	bne.n	8003ef0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee4:	893b      	ldrh	r3, [r7, #8]
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	611a      	str	r2, [r3, #16]
 8003eee:	e021      	b.n	8003f34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ef0:	893b      	ldrh	r3, [r7, #8]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f00:	6a39      	ldr	r1, [r7, #32]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fa20 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00d      	beq.n	8003f2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d107      	bne.n	8003f26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e005      	b.n	8003f36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f2a:	893b      	ldrh	r3, [r7, #8]
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	00010002 	.word	0x00010002

08003f44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	4611      	mov	r1, r2
 8003f50:	461a      	mov	r2, r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	817b      	strh	r3, [r7, #10]
 8003f56:	460b      	mov	r3, r1
 8003f58:	813b      	strh	r3, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f8c2 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa4:	d103      	bne.n	8003fae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e0aa      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fb2:	897b      	ldrh	r3, [r7, #10]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	4952      	ldr	r1, [pc, #328]	; (8004110 <I2C_RequestMemoryRead+0x1cc>)
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f91d 	bl	8004208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e097      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	6a39      	ldr	r1, [r7, #32]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f9a8 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	2b04      	cmp	r3, #4
 8004004:	d107      	bne.n	8004016 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e076      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d105      	bne.n	800402c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004020:	893b      	ldrh	r3, [r7, #8]
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	611a      	str	r2, [r3, #16]
 800402a:	e021      	b.n	8004070 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800402c:	893b      	ldrh	r3, [r7, #8]
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	b29b      	uxth	r3, r3
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	6a39      	ldr	r1, [r7, #32]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f982 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	2b04      	cmp	r3, #4
 8004050:	d107      	bne.n	8004062 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e050      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004066:	893b      	ldrh	r3, [r7, #8]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004072:	6a39      	ldr	r1, [r7, #32]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f967 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	2b04      	cmp	r3, #4
 8004086:	d107      	bne.n	8004098 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004096:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e035      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f82b 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00d      	beq.n	80040e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d2:	d103      	bne.n	80040dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e013      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040e0:	897b      	ldrh	r3, [r7, #10]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	6a3a      	ldr	r2, [r7, #32]
 80040f4:	4906      	ldr	r1, [pc, #24]	; (8004110 <I2C_RequestMemoryRead+0x1cc>)
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f886 	bl	8004208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	00010002 	.word	0x00010002

08004114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004124:	e048      	b.n	80041b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d044      	beq.n	80041b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412e:	f7fe f9dd 	bl	80024ec <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d139      	bne.n	80041b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	0c1b      	lsrs	r3, r3, #16
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b01      	cmp	r3, #1
 800414c:	d10d      	bne.n	800416a <I2C_WaitOnFlagUntilTimeout+0x56>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	43da      	mvns	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4013      	ands	r3, r2
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	e00c      	b.n	8004184 <I2C_WaitOnFlagUntilTimeout+0x70>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	43da      	mvns	r2, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4013      	ands	r3, r2
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	429a      	cmp	r2, r3
 8004188:	d116      	bne.n	80041b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e023      	b.n	8004200 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	0c1b      	lsrs	r3, r3, #16
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d10d      	bne.n	80041de <I2C_WaitOnFlagUntilTimeout+0xca>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	43da      	mvns	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4013      	ands	r3, r2
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	bf0c      	ite	eq
 80041d4:	2301      	moveq	r3, #1
 80041d6:	2300      	movne	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	e00c      	b.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	43da      	mvns	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	4013      	ands	r3, r2
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d093      	beq.n	8004126 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004216:	e071      	b.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d123      	bne.n	8004270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004236:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	f043 0204 	orr.w	r2, r3, #4
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e067      	b.n	8004340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d041      	beq.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004278:	f7fe f938 	bl	80024ec <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	429a      	cmp	r2, r3
 8004286:	d302      	bcc.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d136      	bne.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10c      	bne.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	43da      	mvns	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bf14      	ite	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	2300      	moveq	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	e00b      	b.n	80042ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	43da      	mvns	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4013      	ands	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d016      	beq.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f043 0220 	orr.w	r2, r3, #32
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e021      	b.n	8004340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	0c1b      	lsrs	r3, r3, #16
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10c      	bne.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	43da      	mvns	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4013      	ands	r3, r2
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf14      	ite	ne
 8004318:	2301      	movne	r3, #1
 800431a:	2300      	moveq	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	e00b      	b.n	8004338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	43da      	mvns	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4013      	ands	r3, r2
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	bf14      	ite	ne
 8004332:	2301      	movne	r3, #1
 8004334:	2300      	moveq	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	f47f af6d 	bne.w	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004354:	e034      	b.n	80043c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f8e3 	bl	8004522 <I2C_IsAcknowledgeFailed>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e034      	b.n	80043d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d028      	beq.n	80043c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436e:	f7fe f8bd 	bl	80024ec <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	429a      	cmp	r2, r3
 800437c:	d302      	bcc.n	8004384 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d11d      	bne.n	80043c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b80      	cmp	r3, #128	; 0x80
 8004390:	d016      	beq.n	80043c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	f043 0220 	orr.w	r2, r3, #32
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e007      	b.n	80043d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d1c3      	bne.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043e4:	e034      	b.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f89b 	bl	8004522 <I2C_IsAcknowledgeFailed>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e034      	b.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d028      	beq.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fe:	f7fe f875 	bl	80024ec <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d11d      	bne.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b04      	cmp	r3, #4
 8004420:	d016      	beq.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	f043 0220 	orr.w	r2, r3, #32
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e007      	b.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b04      	cmp	r3, #4
 800445c:	d1c3      	bne.n	80043e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004474:	e049      	b.n	800450a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b10      	cmp	r3, #16
 8004482:	d119      	bne.n	80044b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0210 	mvn.w	r2, #16
 800448c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e030      	b.n	800451a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b8:	f7fe f818 	bl	80024ec <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d302      	bcc.n	80044ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d11d      	bne.n	800450a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d016      	beq.n	800450a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f043 0220 	orr.w	r2, r3, #32
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e007      	b.n	800451a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004514:	2b40      	cmp	r3, #64	; 0x40
 8004516:	d1ae      	bne.n	8004476 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004538:	d11b      	bne.n	8004572 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004542:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f043 0204 	orr.w	r2, r3, #4
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
	...

08004580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e272      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 8087 	beq.w	80046ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045a0:	4b92      	ldr	r3, [pc, #584]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 030c 	and.w	r3, r3, #12
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d00c      	beq.n	80045c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045ac:	4b8f      	ldr	r3, [pc, #572]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d112      	bne.n	80045de <HAL_RCC_OscConfig+0x5e>
 80045b8:	4b8c      	ldr	r3, [pc, #560]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c4:	d10b      	bne.n	80045de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c6:	4b89      	ldr	r3, [pc, #548]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d06c      	beq.n	80046ac <HAL_RCC_OscConfig+0x12c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d168      	bne.n	80046ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e24c      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e6:	d106      	bne.n	80045f6 <HAL_RCC_OscConfig+0x76>
 80045e8:	4b80      	ldr	r3, [pc, #512]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a7f      	ldr	r2, [pc, #508]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80045ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	e02e      	b.n	8004654 <HAL_RCC_OscConfig+0xd4>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x98>
 80045fe:	4b7b      	ldr	r3, [pc, #492]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a7a      	ldr	r2, [pc, #488]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	4b78      	ldr	r3, [pc, #480]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a77      	ldr	r2, [pc, #476]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e01d      	b.n	8004654 <HAL_RCC_OscConfig+0xd4>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004620:	d10c      	bne.n	800463c <HAL_RCC_OscConfig+0xbc>
 8004622:	4b72      	ldr	r3, [pc, #456]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a71      	ldr	r2, [pc, #452]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	4b6f      	ldr	r3, [pc, #444]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6e      	ldr	r2, [pc, #440]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e00b      	b.n	8004654 <HAL_RCC_OscConfig+0xd4>
 800463c:	4b6b      	ldr	r3, [pc, #428]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a6a      	ldr	r2, [pc, #424]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b68      	ldr	r3, [pc, #416]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a67      	ldr	r2, [pc, #412]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 800464e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004652:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d013      	beq.n	8004684 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465c:	f7fd ff46 	bl	80024ec <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004664:	f7fd ff42 	bl	80024ec <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b64      	cmp	r3, #100	; 0x64
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e200      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004676:	4b5d      	ldr	r3, [pc, #372]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0xe4>
 8004682:	e014      	b.n	80046ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fd ff32 	bl	80024ec <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468c:	f7fd ff2e 	bl	80024ec <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e1ec      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469e:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x10c>
 80046aa:	e000      	b.n	80046ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d063      	beq.n	8004782 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ba:	4b4c      	ldr	r3, [pc, #304]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00b      	beq.n	80046de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046c6:	4b49      	ldr	r3, [pc, #292]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d11c      	bne.n	800470c <HAL_RCC_OscConfig+0x18c>
 80046d2:	4b46      	ldr	r3, [pc, #280]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d116      	bne.n	800470c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046de:	4b43      	ldr	r3, [pc, #268]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_RCC_OscConfig+0x176>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d001      	beq.n	80046f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e1c0      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f6:	4b3d      	ldr	r3, [pc, #244]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4939      	ldr	r1, [pc, #228]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470a:	e03a      	b.n	8004782 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d020      	beq.n	8004756 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004714:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <HAL_RCC_OscConfig+0x270>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471a:	f7fd fee7 	bl	80024ec <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004722:	f7fd fee3 	bl	80024ec <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e1a1      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004734:	4b2d      	ldr	r3, [pc, #180]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004740:	4b2a      	ldr	r3, [pc, #168]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	4927      	ldr	r1, [pc, #156]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004750:	4313      	orrs	r3, r2
 8004752:	600b      	str	r3, [r1, #0]
 8004754:	e015      	b.n	8004782 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004756:	4b26      	ldr	r3, [pc, #152]	; (80047f0 <HAL_RCC_OscConfig+0x270>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fd fec6 	bl	80024ec <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004764:	f7fd fec2 	bl	80024ec <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e180      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004776:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d03a      	beq.n	8004804 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d019      	beq.n	80047ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004796:	4b17      	ldr	r3, [pc, #92]	; (80047f4 <HAL_RCC_OscConfig+0x274>)
 8004798:	2201      	movs	r2, #1
 800479a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800479c:	f7fd fea6 	bl	80024ec <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a4:	f7fd fea2 	bl	80024ec <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e160      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <HAL_RCC_OscConfig+0x26c>)
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047c2:	2001      	movs	r0, #1
 80047c4:	f000 faba 	bl	8004d3c <RCC_Delay>
 80047c8:	e01c      	b.n	8004804 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <HAL_RCC_OscConfig+0x274>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d0:	f7fd fe8c 	bl	80024ec <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d6:	e00f      	b.n	80047f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d8:	f7fd fe88 	bl	80024ec <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d908      	bls.n	80047f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e146      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
 80047f0:	42420000 	.word	0x42420000
 80047f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f8:	4b92      	ldr	r3, [pc, #584]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e9      	bne.n	80047d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80a6 	beq.w	800495e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004812:	2300      	movs	r3, #0
 8004814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004816:	4b8b      	ldr	r3, [pc, #556]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10d      	bne.n	800483e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004822:	4b88      	ldr	r3, [pc, #544]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	4a87      	ldr	r2, [pc, #540]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482c:	61d3      	str	r3, [r2, #28]
 800482e:	4b85      	ldr	r3, [pc, #532]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800483a:	2301      	movs	r3, #1
 800483c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483e:	4b82      	ldr	r3, [pc, #520]	; (8004a48 <HAL_RCC_OscConfig+0x4c8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d118      	bne.n	800487c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800484a:	4b7f      	ldr	r3, [pc, #508]	; (8004a48 <HAL_RCC_OscConfig+0x4c8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a7e      	ldr	r2, [pc, #504]	; (8004a48 <HAL_RCC_OscConfig+0x4c8>)
 8004850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004856:	f7fd fe49 	bl	80024ec <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485e:	f7fd fe45 	bl	80024ec <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b64      	cmp	r3, #100	; 0x64
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e103      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004870:	4b75      	ldr	r3, [pc, #468]	; (8004a48 <HAL_RCC_OscConfig+0x4c8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0f0      	beq.n	800485e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d106      	bne.n	8004892 <HAL_RCC_OscConfig+0x312>
 8004884:	4b6f      	ldr	r3, [pc, #444]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	4a6e      	ldr	r2, [pc, #440]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	6213      	str	r3, [r2, #32]
 8004890:	e02d      	b.n	80048ee <HAL_RCC_OscConfig+0x36e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x334>
 800489a:	4b6a      	ldr	r3, [pc, #424]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	4a69      	ldr	r2, [pc, #420]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	6213      	str	r3, [r2, #32]
 80048a6:	4b67      	ldr	r3, [pc, #412]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	4a66      	ldr	r2, [pc, #408]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	f023 0304 	bic.w	r3, r3, #4
 80048b0:	6213      	str	r3, [r2, #32]
 80048b2:	e01c      	b.n	80048ee <HAL_RCC_OscConfig+0x36e>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2b05      	cmp	r3, #5
 80048ba:	d10c      	bne.n	80048d6 <HAL_RCC_OscConfig+0x356>
 80048bc:	4b61      	ldr	r3, [pc, #388]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	4a60      	ldr	r2, [pc, #384]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048c2:	f043 0304 	orr.w	r3, r3, #4
 80048c6:	6213      	str	r3, [r2, #32]
 80048c8:	4b5e      	ldr	r3, [pc, #376]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	4a5d      	ldr	r2, [pc, #372]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	6213      	str	r3, [r2, #32]
 80048d4:	e00b      	b.n	80048ee <HAL_RCC_OscConfig+0x36e>
 80048d6:	4b5b      	ldr	r3, [pc, #364]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	4a5a      	ldr	r2, [pc, #360]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	6213      	str	r3, [r2, #32]
 80048e2:	4b58      	ldr	r3, [pc, #352]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	4a57      	ldr	r2, [pc, #348]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80048e8:	f023 0304 	bic.w	r3, r3, #4
 80048ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d015      	beq.n	8004922 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f6:	f7fd fdf9 	bl	80024ec <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fc:	e00a      	b.n	8004914 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fe:	f7fd fdf5 	bl	80024ec <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f241 3288 	movw	r2, #5000	; 0x1388
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e0b1      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004914:	4b4b      	ldr	r3, [pc, #300]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0ee      	beq.n	80048fe <HAL_RCC_OscConfig+0x37e>
 8004920:	e014      	b.n	800494c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004922:	f7fd fde3 	bl	80024ec <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fd fddf 	bl	80024ec <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e09b      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004940:	4b40      	ldr	r3, [pc, #256]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ee      	bne.n	800492a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d105      	bne.n	800495e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004952:	4b3c      	ldr	r3, [pc, #240]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4a3b      	ldr	r2, [pc, #236]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 8087 	beq.w	8004a76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004968:	4b36      	ldr	r3, [pc, #216]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 030c 	and.w	r3, r3, #12
 8004970:	2b08      	cmp	r3, #8
 8004972:	d061      	beq.n	8004a38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d146      	bne.n	8004a0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497c:	4b33      	ldr	r3, [pc, #204]	; (8004a4c <HAL_RCC_OscConfig+0x4cc>)
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004982:	f7fd fdb3 	bl	80024ec <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498a:	f7fd fdaf 	bl	80024ec <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e06d      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800499c:	4b29      	ldr	r3, [pc, #164]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f0      	bne.n	800498a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d108      	bne.n	80049c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049b2:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	4921      	ldr	r1, [pc, #132]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049c4:	4b1f      	ldr	r3, [pc, #124]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a19      	ldr	r1, [r3, #32]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	430b      	orrs	r3, r1
 80049d6:	491b      	ldr	r1, [pc, #108]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049dc:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <HAL_RCC_OscConfig+0x4cc>)
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e2:	f7fd fd83 	bl	80024ec <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ea:	f7fd fd7f 	bl	80024ec <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e03d      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049fc:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x46a>
 8004a08:	e035      	b.n	8004a76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0a:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <HAL_RCC_OscConfig+0x4cc>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a10:	f7fd fd6c 	bl	80024ec <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a18:	f7fd fd68 	bl	80024ec <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e026      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x498>
 8004a36:	e01e      	b.n	8004a76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d107      	bne.n	8004a50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e019      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40007000 	.word	0x40007000
 8004a4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_RCC_OscConfig+0x500>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d106      	bne.n	8004a72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d001      	beq.n	8004a76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40021000 	.word	0x40021000

08004a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0d0      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a98:	4b6a      	ldr	r3, [pc, #424]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d910      	bls.n	8004ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa6:	4b67      	ldr	r3, [pc, #412]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 0207 	bic.w	r2, r3, #7
 8004aae:	4965      	ldr	r1, [pc, #404]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	4b63      	ldr	r3, [pc, #396]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0b8      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d020      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ae0:	4b59      	ldr	r3, [pc, #356]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4a58      	ldr	r2, [pc, #352]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004aea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004af8:	4b53      	ldr	r3, [pc, #332]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4a52      	ldr	r2, [pc, #328]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004afe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b04:	4b50      	ldr	r3, [pc, #320]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	494d      	ldr	r1, [pc, #308]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d040      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d107      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b2a:	4b47      	ldr	r3, [pc, #284]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d115      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e07f      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d107      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b42:	4b41      	ldr	r3, [pc, #260]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d109      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e073      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b52:	4b3d      	ldr	r3, [pc, #244]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e06b      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b62:	4b39      	ldr	r3, [pc, #228]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f023 0203 	bic.w	r2, r3, #3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	4936      	ldr	r1, [pc, #216]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b74:	f7fd fcba 	bl	80024ec <HAL_GetTick>
 8004b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7a:	e00a      	b.n	8004b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b7c:	f7fd fcb6 	bl	80024ec <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e053      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b92:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f003 020c 	and.w	r2, r3, #12
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d1eb      	bne.n	8004b7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d210      	bcs.n	8004bd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 0207 	bic.w	r2, r3, #7
 8004bba:	4922      	ldr	r1, [pc, #136]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc2:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e032      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be0:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4916      	ldr	r1, [pc, #88]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bfe:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	490e      	ldr	r1, [pc, #56]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c12:	f000 f821 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8004c16:	4602      	mov	r2, r0
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	490a      	ldr	r1, [pc, #40]	; (8004c4c <HAL_RCC_ClockConfig+0x1c8>)
 8004c24:	5ccb      	ldrb	r3, [r1, r3]
 8004c26:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2a:	4a09      	ldr	r2, [pc, #36]	; (8004c50 <HAL_RCC_ClockConfig+0x1cc>)
 8004c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_RCC_ClockConfig+0x1d0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fd fc18 	bl	8002468 <HAL_InitTick>

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40022000 	.word	0x40022000
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	08006908 	.word	0x08006908
 8004c50:	20000018 	.word	0x20000018
 8004c54:	20000020 	.word	0x20000020

08004c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c72:	4b1e      	ldr	r3, [pc, #120]	; (8004cec <HAL_RCC_GetSysClockFreq+0x94>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d002      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x30>
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d003      	beq.n	8004c8e <HAL_RCC_GetSysClockFreq+0x36>
 8004c86:	e027      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c8a:	613b      	str	r3, [r7, #16]
      break;
 8004c8c:	e027      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	0c9b      	lsrs	r3, r3, #18
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c98:	5cd3      	ldrb	r3, [r2, r3]
 8004c9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d010      	beq.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ca6:	4b11      	ldr	r3, [pc, #68]	; (8004cec <HAL_RCC_GetSysClockFreq+0x94>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	0c5b      	lsrs	r3, r3, #17
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	4a11      	ldr	r2, [pc, #68]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004cb2:	5cd3      	ldrb	r3, [r2, r3]
 8004cb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a0d      	ldr	r2, [pc, #52]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cba:	fb03 f202 	mul.w	r2, r3, r2
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	e004      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a0c      	ldr	r2, [pc, #48]	; (8004cfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	613b      	str	r3, [r7, #16]
      break;
 8004cd6:	e002      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cda:	613b      	str	r3, [r7, #16]
      break;
 8004cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cde:	693b      	ldr	r3, [r7, #16]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	371c      	adds	r7, #28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	007a1200 	.word	0x007a1200
 8004cf4:	08006920 	.word	0x08006920
 8004cf8:	08006930 	.word	0x08006930
 8004cfc:	003d0900 	.word	0x003d0900

08004d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d04:	4b02      	ldr	r3, [pc, #8]	; (8004d10 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d06:	681b      	ldr	r3, [r3, #0]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr
 8004d10:	20000018 	.word	0x20000018

08004d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d18:	f7ff fff2 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	0a1b      	lsrs	r3, r3, #8
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	4903      	ldr	r1, [pc, #12]	; (8004d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d2a:	5ccb      	ldrb	r3, [r1, r3]
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000
 8004d38:	08006918 	.word	0x08006918

08004d3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <RCC_Delay+0x34>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <RCC_Delay+0x38>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	0a5b      	lsrs	r3, r3, #9
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	fb02 f303 	mul.w	r3, r2, r3
 8004d56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d58:	bf00      	nop
  }
  while (Delay --);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1e5a      	subs	r2, r3, #1
 8004d5e:	60fa      	str	r2, [r7, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f9      	bne.n	8004d58 <RCC_Delay+0x1c>
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr
 8004d70:	20000018 	.word	0x20000018
 8004d74:	10624dd3 	.word	0x10624dd3

08004d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d07d      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d94:	2300      	movs	r3, #0
 8004d96:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d98:	4b4f      	ldr	r3, [pc, #316]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10d      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da4:	4b4c      	ldr	r3, [pc, #304]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	4a4b      	ldr	r2, [pc, #300]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dae:	61d3      	str	r3, [r2, #28]
 8004db0:	4b49      	ldr	r3, [pc, #292]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc0:	4b46      	ldr	r3, [pc, #280]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d118      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dcc:	4b43      	ldr	r3, [pc, #268]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a42      	ldr	r2, [pc, #264]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd8:	f7fd fb88 	bl	80024ec <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dde:	e008      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de0:	f7fd fb84 	bl	80024ec <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b64      	cmp	r3, #100	; 0x64
 8004dec:	d901      	bls.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e06d      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df2:	4b3a      	ldr	r3, [pc, #232]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dfe:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d02e      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d027      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e1c:	4b2e      	ldr	r3, [pc, #184]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e26:	4b2e      	ldr	r3, [pc, #184]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e32:	4a29      	ldr	r2, [pc, #164]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d014      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e42:	f7fd fb53 	bl	80024ec <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e48:	e00a      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4a:	f7fd fb4f 	bl	80024ec <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e036      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e60:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0ee      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4917      	ldr	r1, [pc, #92]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e7e:	7dfb      	ldrb	r3, [r7, #23]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d105      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e84:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e9c:	4b0e      	ldr	r3, [pc, #56]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	490b      	ldr	r1, [pc, #44]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d008      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	4904      	ldr	r1, [pc, #16]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	40007000 	.word	0x40007000
 8004ee0:	42420440 	.word	0x42420440

08004ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e041      	b.n	8004f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fc fd54 	bl	80019b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f000 fbc2 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d001      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e03a      	b.n	8005012 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a18      	ldr	r2, [pc, #96]	; (800501c <HAL_TIM_Base_Start_IT+0x98>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00e      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x58>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc6:	d009      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x58>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a14      	ldr	r2, [pc, #80]	; (8005020 <HAL_TIM_Base_Start_IT+0x9c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x58>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a13      	ldr	r2, [pc, #76]	; (8005024 <HAL_TIM_Base_Start_IT+0xa0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d111      	bne.n	8005000 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b06      	cmp	r3, #6
 8004fec:	d010      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0201 	orr.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffe:	e007      	b.n	8005010 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800

08005028 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e041      	b.n	80050be <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f839 	bl	80050c6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f000 fb20 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b0c      	cmp	r3, #12
 80050ea:	d841      	bhi.n	8005170 <HAL_TIM_OC_Stop_IT+0x98>
 80050ec:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <HAL_TIM_OC_Stop_IT+0x1c>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	08005129 	.word	0x08005129
 80050f8:	08005171 	.word	0x08005171
 80050fc:	08005171 	.word	0x08005171
 8005100:	08005171 	.word	0x08005171
 8005104:	0800513b 	.word	0x0800513b
 8005108:	08005171 	.word	0x08005171
 800510c:	08005171 	.word	0x08005171
 8005110:	08005171 	.word	0x08005171
 8005114:	0800514d 	.word	0x0800514d
 8005118:	08005171 	.word	0x08005171
 800511c:	08005171 	.word	0x08005171
 8005120:	08005171 	.word	0x08005171
 8005124:	0800515f 	.word	0x0800515f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0202 	bic.w	r2, r2, #2
 8005136:	60da      	str	r2, [r3, #12]
      break;
 8005138:	e01d      	b.n	8005176 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0204 	bic.w	r2, r2, #4
 8005148:	60da      	str	r2, [r3, #12]
      break;
 800514a:	e014      	b.n	8005176 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0208 	bic.w	r2, r2, #8
 800515a:	60da      	str	r2, [r3, #12]
      break;
 800515c:	e00b      	b.n	8005176 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0210 	bic.w	r2, r2, #16
 800516c:	60da      	str	r2, [r3, #12]
      break;
 800516e:	e002      	b.n	8005176 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
      break;
 8005174:	bf00      	nop
  }

  if (status == HAL_OK)
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d157      	bne.n	800522c <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2200      	movs	r2, #0
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fd1d 	bl	8005bc4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a2a      	ldr	r2, [pc, #168]	; (8005238 <HAL_TIM_OC_Stop_IT+0x160>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d117      	bne.n	80051c4 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6a1a      	ldr	r2, [r3, #32]
 800519a:	f241 1311 	movw	r3, #4369	; 0x1111
 800519e:	4013      	ands	r3, r2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10f      	bne.n	80051c4 <HAL_TIM_OC_Stop_IT+0xec>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6a1a      	ldr	r2, [r3, #32]
 80051aa:	f240 4344 	movw	r3, #1092	; 0x444
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d107      	bne.n	80051c4 <HAL_TIM_OC_Stop_IT+0xec>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6a1a      	ldr	r2, [r3, #32]
 80051ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10f      	bne.n	80051f4 <HAL_TIM_OC_Stop_IT+0x11c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6a1a      	ldr	r2, [r3, #32]
 80051da:	f240 4344 	movw	r3, #1092	; 0x444
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d107      	bne.n	80051f4 <HAL_TIM_OC_Stop_IT+0x11c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0201 	bic.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d104      	bne.n	8005204 <HAL_TIM_OC_Stop_IT+0x12c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005202:	e013      	b.n	800522c <HAL_TIM_OC_Stop_IT+0x154>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b04      	cmp	r3, #4
 8005208:	d104      	bne.n	8005214 <HAL_TIM_OC_Stop_IT+0x13c>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005212:	e00b      	b.n	800522c <HAL_TIM_OC_Stop_IT+0x154>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b08      	cmp	r3, #8
 8005218:	d104      	bne.n	8005224 <HAL_TIM_OC_Stop_IT+0x14c>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005222:	e003      	b.n	800522c <HAL_TIM_OC_Stop_IT+0x154>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800522c:	7bfb      	ldrb	r3, [r7, #15]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40012c00 	.word	0x40012c00

0800523c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d020      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01b      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0202 	mvn.w	r2, #2
 8005270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f9f4 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 800528c:	e005      	b.n	800529a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f9e7 	bl	8005662 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f9f6 	bl	8005686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d020      	beq.n	80052ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01b      	beq.n	80052ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0204 	mvn.w	r2, #4
 80052bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f9ce 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 80052d8:	e005      	b.n	80052e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f9c1 	bl	8005662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f9d0 	bl	8005686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d020      	beq.n	8005338 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01b      	beq.n	8005338 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0208 	mvn.w	r2, #8
 8005308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2204      	movs	r2, #4
 800530e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f9a8 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f99b 	bl	8005662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f9aa 	bl	8005686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 0310 	and.w	r3, r3, #16
 800533e:	2b00      	cmp	r3, #0
 8005340:	d020      	beq.n	8005384 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01b      	beq.n	8005384 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0210 	mvn.w	r2, #16
 8005354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2208      	movs	r2, #8
 800535a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f982 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f975 	bl	8005662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f984 	bl	8005686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00c      	beq.n	80053a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0201 	mvn.w	r2, #1
 80053a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fb fc70 	bl	8000c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00c      	beq.n	80053cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d007      	beq.n	80053cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fc87 	bl	8005cda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00c      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f954 	bl	8005698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00c      	beq.n	8005414 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0220 	mvn.w	r2, #32
 800540c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fc5a 	bl	8005cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005436:	2302      	movs	r3, #2
 8005438:	e048      	b.n	80054cc <HAL_TIM_OC_ConfigChannel+0xb0>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b0c      	cmp	r3, #12
 8005446:	d839      	bhi.n	80054bc <HAL_TIM_OC_ConfigChannel+0xa0>
 8005448:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <HAL_TIM_OC_ConfigChannel+0x34>)
 800544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544e:	bf00      	nop
 8005450:	08005485 	.word	0x08005485
 8005454:	080054bd 	.word	0x080054bd
 8005458:	080054bd 	.word	0x080054bd
 800545c:	080054bd 	.word	0x080054bd
 8005460:	08005493 	.word	0x08005493
 8005464:	080054bd 	.word	0x080054bd
 8005468:	080054bd 	.word	0x080054bd
 800546c:	080054bd 	.word	0x080054bd
 8005470:	080054a1 	.word	0x080054a1
 8005474:	080054bd 	.word	0x080054bd
 8005478:	080054bd 	.word	0x080054bd
 800547c:	080054bd 	.word	0x080054bd
 8005480:	080054af 	.word	0x080054af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f97c 	bl	8005788 <TIM_OC1_SetConfig>
      break;
 8005490:	e017      	b.n	80054c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f9db 	bl	8005854 <TIM_OC2_SetConfig>
      break;
 800549e:	e010      	b.n	80054c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fa3e 	bl	8005928 <TIM_OC3_SetConfig>
      break;
 80054ac:	e009      	b.n	80054c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 faa1 	bl	80059fc <TIM_OC4_SetConfig>
      break;
 80054ba:	e002      	b.n	80054c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	75fb      	strb	r3, [r7, #23]
      break;
 80054c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_TIM_ConfigClockSource+0x1c>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e0b4      	b.n	800565a <HAL_TIM_ConfigClockSource+0x186>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800550e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005528:	d03e      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0xd4>
 800552a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800552e:	f200 8087 	bhi.w	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005536:	f000 8086 	beq.w	8005646 <HAL_TIM_ConfigClockSource+0x172>
 800553a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553e:	d87f      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005540:	2b70      	cmp	r3, #112	; 0x70
 8005542:	d01a      	beq.n	800557a <HAL_TIM_ConfigClockSource+0xa6>
 8005544:	2b70      	cmp	r3, #112	; 0x70
 8005546:	d87b      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005548:	2b60      	cmp	r3, #96	; 0x60
 800554a:	d050      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x11a>
 800554c:	2b60      	cmp	r3, #96	; 0x60
 800554e:	d877      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005550:	2b50      	cmp	r3, #80	; 0x50
 8005552:	d03c      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0xfa>
 8005554:	2b50      	cmp	r3, #80	; 0x50
 8005556:	d873      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005558:	2b40      	cmp	r3, #64	; 0x40
 800555a:	d058      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x13a>
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d86f      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005560:	2b30      	cmp	r3, #48	; 0x30
 8005562:	d064      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x15a>
 8005564:	2b30      	cmp	r3, #48	; 0x30
 8005566:	d86b      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005568:	2b20      	cmp	r3, #32
 800556a:	d060      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x15a>
 800556c:	2b20      	cmp	r3, #32
 800556e:	d867      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d05c      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x15a>
 8005574:	2b10      	cmp	r3, #16
 8005576:	d05a      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x15a>
 8005578:	e062      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6899      	ldr	r1, [r3, #8]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f000 fafc 	bl	8005b86 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800559c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	609a      	str	r2, [r3, #8]
      break;
 80055a6:	e04f      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6899      	ldr	r1, [r3, #8]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f000 fae5 	bl	8005b86 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ca:	609a      	str	r2, [r3, #8]
      break;
 80055cc:	e03c      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 fa5c 	bl	8005a98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2150      	movs	r1, #80	; 0x50
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fab3 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e02c      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f000 fa7a 	bl	8005af4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2160      	movs	r1, #96	; 0x60
 8005606:	4618      	mov	r0, r3
 8005608:	f000 faa3 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 800560c:	e01c      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	6859      	ldr	r1, [r3, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	461a      	mov	r2, r3
 800561c:	f000 fa3c 	bl	8005a98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2140      	movs	r1, #64	; 0x40
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fa93 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 800562c:	e00c      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4619      	mov	r1, r3
 8005638:	4610      	mov	r0, r2
 800563a:	f000 fa8a 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 800563e:	e003      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
      break;
 8005644:	e000      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr

08005674 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr

08005686 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr

08005698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr
	...

080056ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a2f      	ldr	r2, [pc, #188]	; (800577c <TIM_Base_SetConfig+0xd0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00b      	beq.n	80056dc <TIM_Base_SetConfig+0x30>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ca:	d007      	beq.n	80056dc <TIM_Base_SetConfig+0x30>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a2c      	ldr	r2, [pc, #176]	; (8005780 <TIM_Base_SetConfig+0xd4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_Base_SetConfig+0x30>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a2b      	ldr	r2, [pc, #172]	; (8005784 <TIM_Base_SetConfig+0xd8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d108      	bne.n	80056ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a22      	ldr	r2, [pc, #136]	; (800577c <TIM_Base_SetConfig+0xd0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fc:	d007      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1f      	ldr	r2, [pc, #124]	; (8005780 <TIM_Base_SetConfig+0xd4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1e      	ldr	r2, [pc, #120]	; (8005784 <TIM_Base_SetConfig+0xd8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d108      	bne.n	8005720 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a0d      	ldr	r2, [pc, #52]	; (800577c <TIM_Base_SetConfig+0xd0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d103      	bne.n	8005754 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f023 0201 	bic.w	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	611a      	str	r2, [r3, #16]
  }
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr
 800577c:	40012c00 	.word	0x40012c00
 8005780:	40000400 	.word	0x40000400
 8005784:	40000800 	.word	0x40000800

08005788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	f023 0201 	bic.w	r2, r3, #1
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0303 	bic.w	r3, r3, #3
 80057be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 0302 	bic.w	r3, r3, #2
 80057d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a1c      	ldr	r2, [pc, #112]	; (8005850 <TIM_OC1_SetConfig+0xc8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d10c      	bne.n	80057fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f023 0308 	bic.w	r3, r3, #8
 80057ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 0304 	bic.w	r3, r3, #4
 80057fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a13      	ldr	r2, [pc, #76]	; (8005850 <TIM_OC1_SetConfig+0xc8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d111      	bne.n	800582a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800580c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	621a      	str	r2, [r3, #32]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40012c00 	.word	0x40012c00

08005854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f023 0210 	bic.w	r2, r3, #16
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	021b      	lsls	r3, r3, #8
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f023 0320 	bic.w	r3, r3, #32
 800589e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a1d      	ldr	r2, [pc, #116]	; (8005924 <TIM_OC2_SetConfig+0xd0>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d10d      	bne.n	80058d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a14      	ldr	r2, [pc, #80]	; (8005924 <TIM_OC2_SetConfig+0xd0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d113      	bne.n	8005900 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr
 8005924:	40012c00 	.word	0x40012c00

08005928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a1d      	ldr	r2, [pc, #116]	; (80059f8 <TIM_OC3_SetConfig+0xd0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10d      	bne.n	80059a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800598c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a14      	ldr	r2, [pc, #80]	; (80059f8 <TIM_OC3_SetConfig+0xd0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d113      	bne.n	80059d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	621a      	str	r2, [r3, #32]
}
 80059ec:	bf00      	nop
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40012c00 	.word	0x40012c00

080059fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	021b      	lsls	r3, r3, #8
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	031b      	lsls	r3, r3, #12
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a0f      	ldr	r2, [pc, #60]	; (8005a94 <TIM_OC4_SetConfig+0x98>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d109      	bne.n	8005a70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	019b      	lsls	r3, r3, #6
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	40012c00 	.word	0x40012c00

08005a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f023 0201 	bic.w	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f023 030a 	bic.w	r3, r3, #10
 8005ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	621a      	str	r2, [r3, #32]
}
 8005aea:	bf00      	nop
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f023 0210 	bic.w	r2, r3, #16
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	031b      	lsls	r3, r3, #12
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	621a      	str	r2, [r3, #32]
}
 8005b48:	bf00      	nop
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr

08005b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	f043 0307 	orr.w	r3, r3, #7
 8005b74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	609a      	str	r2, [r3, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr

08005b86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b087      	sub	sp, #28
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	60f8      	str	r0, [r7, #12]
 8005b8e:	60b9      	str	r1, [r7, #8]
 8005b90:	607a      	str	r2, [r7, #4]
 8005b92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ba0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	021a      	lsls	r2, r3, #8
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	609a      	str	r2, [r3, #8]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr

08005bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a1a      	ldr	r2, [r3, #32]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	43db      	mvns	r3, r3
 8005be6:	401a      	ands	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a1a      	ldr	r2, [r3, #32]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 031f 	and.w	r3, r3, #31
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr

08005c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e046      	b.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a16      	ldr	r2, [pc, #88]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00e      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c70:	d009      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a12      	ldr	r2, [pc, #72]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a10      	ldr	r2, [pc, #64]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d10c      	bne.n	8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40000400 	.word	0x40000400
 8005cc4:	40000800 	.word	0x40000800

08005cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr

08005cda <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr

08005cec <__errno>:
 8005cec:	4b01      	ldr	r3, [pc, #4]	; (8005cf4 <__errno+0x8>)
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20000028 	.word	0x20000028

08005cf8 <__libc_init_array>:
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	2600      	movs	r6, #0
 8005cfc:	4d0c      	ldr	r5, [pc, #48]	; (8005d30 <__libc_init_array+0x38>)
 8005cfe:	4c0d      	ldr	r4, [pc, #52]	; (8005d34 <__libc_init_array+0x3c>)
 8005d00:	1b64      	subs	r4, r4, r5
 8005d02:	10a4      	asrs	r4, r4, #2
 8005d04:	42a6      	cmp	r6, r4
 8005d06:	d109      	bne.n	8005d1c <__libc_init_array+0x24>
 8005d08:	f000 fc9c 	bl	8006644 <_init>
 8005d0c:	2600      	movs	r6, #0
 8005d0e:	4d0a      	ldr	r5, [pc, #40]	; (8005d38 <__libc_init_array+0x40>)
 8005d10:	4c0a      	ldr	r4, [pc, #40]	; (8005d3c <__libc_init_array+0x44>)
 8005d12:	1b64      	subs	r4, r4, r5
 8005d14:	10a4      	asrs	r4, r4, #2
 8005d16:	42a6      	cmp	r6, r4
 8005d18:	d105      	bne.n	8005d26 <__libc_init_array+0x2e>
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d20:	4798      	blx	r3
 8005d22:	3601      	adds	r6, #1
 8005d24:	e7ee      	b.n	8005d04 <__libc_init_array+0xc>
 8005d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2a:	4798      	blx	r3
 8005d2c:	3601      	adds	r6, #1
 8005d2e:	e7f2      	b.n	8005d16 <__libc_init_array+0x1e>
 8005d30:	08006968 	.word	0x08006968
 8005d34:	08006968 	.word	0x08006968
 8005d38:	08006968 	.word	0x08006968
 8005d3c:	0800696c 	.word	0x0800696c

08005d40 <memset>:
 8005d40:	4603      	mov	r3, r0
 8005d42:	4402      	add	r2, r0
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d100      	bne.n	8005d4a <memset+0xa>
 8005d48:	4770      	bx	lr
 8005d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d4e:	e7f9      	b.n	8005d44 <memset+0x4>

08005d50 <siprintf>:
 8005d50:	b40e      	push	{r1, r2, r3}
 8005d52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d56:	b500      	push	{lr}
 8005d58:	b09c      	sub	sp, #112	; 0x70
 8005d5a:	ab1d      	add	r3, sp, #116	; 0x74
 8005d5c:	9002      	str	r0, [sp, #8]
 8005d5e:	9006      	str	r0, [sp, #24]
 8005d60:	9107      	str	r1, [sp, #28]
 8005d62:	9104      	str	r1, [sp, #16]
 8005d64:	4808      	ldr	r0, [pc, #32]	; (8005d88 <siprintf+0x38>)
 8005d66:	4909      	ldr	r1, [pc, #36]	; (8005d8c <siprintf+0x3c>)
 8005d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d6c:	9105      	str	r1, [sp, #20]
 8005d6e:	6800      	ldr	r0, [r0, #0]
 8005d70:	a902      	add	r1, sp, #8
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	f000 f868 	bl	8005e48 <_svfiprintf_r>
 8005d78:	2200      	movs	r2, #0
 8005d7a:	9b02      	ldr	r3, [sp, #8]
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	b01c      	add	sp, #112	; 0x70
 8005d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d84:	b003      	add	sp, #12
 8005d86:	4770      	bx	lr
 8005d88:	20000028 	.word	0x20000028
 8005d8c:	ffff0208 	.word	0xffff0208

08005d90 <__ssputs_r>:
 8005d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d94:	688e      	ldr	r6, [r1, #8]
 8005d96:	4682      	mov	sl, r0
 8005d98:	429e      	cmp	r6, r3
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	4690      	mov	r8, r2
 8005d9e:	461f      	mov	r7, r3
 8005da0:	d838      	bhi.n	8005e14 <__ssputs_r+0x84>
 8005da2:	898a      	ldrh	r2, [r1, #12]
 8005da4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005da8:	d032      	beq.n	8005e10 <__ssputs_r+0x80>
 8005daa:	6825      	ldr	r5, [r4, #0]
 8005dac:	6909      	ldr	r1, [r1, #16]
 8005dae:	3301      	adds	r3, #1
 8005db0:	eba5 0901 	sub.w	r9, r5, r1
 8005db4:	6965      	ldr	r5, [r4, #20]
 8005db6:	444b      	add	r3, r9
 8005db8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005dc0:	106d      	asrs	r5, r5, #1
 8005dc2:	429d      	cmp	r5, r3
 8005dc4:	bf38      	it	cc
 8005dc6:	461d      	movcc	r5, r3
 8005dc8:	0553      	lsls	r3, r2, #21
 8005dca:	d531      	bpl.n	8005e30 <__ssputs_r+0xa0>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	f000 fb6f 	bl	80064b0 <_malloc_r>
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	b950      	cbnz	r0, 8005dec <__ssputs_r+0x5c>
 8005dd6:	230c      	movs	r3, #12
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	f8ca 3000 	str.w	r3, [sl]
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de6:	81a3      	strh	r3, [r4, #12]
 8005de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dec:	464a      	mov	r2, r9
 8005dee:	6921      	ldr	r1, [r4, #16]
 8005df0:	f000 face 	bl	8006390 <memcpy>
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfe:	81a3      	strh	r3, [r4, #12]
 8005e00:	6126      	str	r6, [r4, #16]
 8005e02:	444e      	add	r6, r9
 8005e04:	6026      	str	r6, [r4, #0]
 8005e06:	463e      	mov	r6, r7
 8005e08:	6165      	str	r5, [r4, #20]
 8005e0a:	eba5 0509 	sub.w	r5, r5, r9
 8005e0e:	60a5      	str	r5, [r4, #8]
 8005e10:	42be      	cmp	r6, r7
 8005e12:	d900      	bls.n	8005e16 <__ssputs_r+0x86>
 8005e14:	463e      	mov	r6, r7
 8005e16:	4632      	mov	r2, r6
 8005e18:	4641      	mov	r1, r8
 8005e1a:	6820      	ldr	r0, [r4, #0]
 8005e1c:	f000 fac6 	bl	80063ac <memmove>
 8005e20:	68a3      	ldr	r3, [r4, #8]
 8005e22:	2000      	movs	r0, #0
 8005e24:	1b9b      	subs	r3, r3, r6
 8005e26:	60a3      	str	r3, [r4, #8]
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	4433      	add	r3, r6
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	e7db      	b.n	8005de8 <__ssputs_r+0x58>
 8005e30:	462a      	mov	r2, r5
 8005e32:	f000 fbb1 	bl	8006598 <_realloc_r>
 8005e36:	4606      	mov	r6, r0
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d1e1      	bne.n	8005e00 <__ssputs_r+0x70>
 8005e3c:	4650      	mov	r0, sl
 8005e3e:	6921      	ldr	r1, [r4, #16]
 8005e40:	f000 face 	bl	80063e0 <_free_r>
 8005e44:	e7c7      	b.n	8005dd6 <__ssputs_r+0x46>
	...

08005e48 <_svfiprintf_r>:
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	4698      	mov	r8, r3
 8005e4e:	898b      	ldrh	r3, [r1, #12]
 8005e50:	4607      	mov	r7, r0
 8005e52:	061b      	lsls	r3, r3, #24
 8005e54:	460d      	mov	r5, r1
 8005e56:	4614      	mov	r4, r2
 8005e58:	b09d      	sub	sp, #116	; 0x74
 8005e5a:	d50e      	bpl.n	8005e7a <_svfiprintf_r+0x32>
 8005e5c:	690b      	ldr	r3, [r1, #16]
 8005e5e:	b963      	cbnz	r3, 8005e7a <_svfiprintf_r+0x32>
 8005e60:	2140      	movs	r1, #64	; 0x40
 8005e62:	f000 fb25 	bl	80064b0 <_malloc_r>
 8005e66:	6028      	str	r0, [r5, #0]
 8005e68:	6128      	str	r0, [r5, #16]
 8005e6a:	b920      	cbnz	r0, 8005e76 <_svfiprintf_r+0x2e>
 8005e6c:	230c      	movs	r3, #12
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295
 8005e74:	e0d1      	b.n	800601a <_svfiprintf_r+0x1d2>
 8005e76:	2340      	movs	r3, #64	; 0x40
 8005e78:	616b      	str	r3, [r5, #20]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e7e:	2320      	movs	r3, #32
 8005e80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e84:	2330      	movs	r3, #48	; 0x30
 8005e86:	f04f 0901 	mov.w	r9, #1
 8005e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006034 <_svfiprintf_r+0x1ec>
 8005e92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e96:	4623      	mov	r3, r4
 8005e98:	469a      	mov	sl, r3
 8005e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e9e:	b10a      	cbz	r2, 8005ea4 <_svfiprintf_r+0x5c>
 8005ea0:	2a25      	cmp	r2, #37	; 0x25
 8005ea2:	d1f9      	bne.n	8005e98 <_svfiprintf_r+0x50>
 8005ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ea8:	d00b      	beq.n	8005ec2 <_svfiprintf_r+0x7a>
 8005eaa:	465b      	mov	r3, fp
 8005eac:	4622      	mov	r2, r4
 8005eae:	4629      	mov	r1, r5
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	f7ff ff6d 	bl	8005d90 <__ssputs_r>
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f000 80aa 	beq.w	8006010 <_svfiprintf_r+0x1c8>
 8005ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ebe:	445a      	add	r2, fp
 8005ec0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 80a2 	beq.w	8006010 <_svfiprintf_r+0x1c8>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ed6:	f10a 0a01 	add.w	sl, sl, #1
 8005eda:	9304      	str	r3, [sp, #16]
 8005edc:	9307      	str	r3, [sp, #28]
 8005ede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ee2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ee4:	4654      	mov	r4, sl
 8005ee6:	2205      	movs	r2, #5
 8005ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eec:	4851      	ldr	r0, [pc, #324]	; (8006034 <_svfiprintf_r+0x1ec>)
 8005eee:	f000 fa41 	bl	8006374 <memchr>
 8005ef2:	9a04      	ldr	r2, [sp, #16]
 8005ef4:	b9d8      	cbnz	r0, 8005f2e <_svfiprintf_r+0xe6>
 8005ef6:	06d0      	lsls	r0, r2, #27
 8005ef8:	bf44      	itt	mi
 8005efa:	2320      	movmi	r3, #32
 8005efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f00:	0711      	lsls	r1, r2, #28
 8005f02:	bf44      	itt	mi
 8005f04:	232b      	movmi	r3, #43	; 0x2b
 8005f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f10:	d015      	beq.n	8005f3e <_svfiprintf_r+0xf6>
 8005f12:	4654      	mov	r4, sl
 8005f14:	2000      	movs	r0, #0
 8005f16:	f04f 0c0a 	mov.w	ip, #10
 8005f1a:	9a07      	ldr	r2, [sp, #28]
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f22:	3b30      	subs	r3, #48	; 0x30
 8005f24:	2b09      	cmp	r3, #9
 8005f26:	d94e      	bls.n	8005fc6 <_svfiprintf_r+0x17e>
 8005f28:	b1b0      	cbz	r0, 8005f58 <_svfiprintf_r+0x110>
 8005f2a:	9207      	str	r2, [sp, #28]
 8005f2c:	e014      	b.n	8005f58 <_svfiprintf_r+0x110>
 8005f2e:	eba0 0308 	sub.w	r3, r0, r8
 8005f32:	fa09 f303 	lsl.w	r3, r9, r3
 8005f36:	4313      	orrs	r3, r2
 8005f38:	46a2      	mov	sl, r4
 8005f3a:	9304      	str	r3, [sp, #16]
 8005f3c:	e7d2      	b.n	8005ee4 <_svfiprintf_r+0x9c>
 8005f3e:	9b03      	ldr	r3, [sp, #12]
 8005f40:	1d19      	adds	r1, r3, #4
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	9103      	str	r1, [sp, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bfbb      	ittet	lt
 8005f4a:	425b      	neglt	r3, r3
 8005f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f50:	9307      	strge	r3, [sp, #28]
 8005f52:	9307      	strlt	r3, [sp, #28]
 8005f54:	bfb8      	it	lt
 8005f56:	9204      	strlt	r2, [sp, #16]
 8005f58:	7823      	ldrb	r3, [r4, #0]
 8005f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f5c:	d10c      	bne.n	8005f78 <_svfiprintf_r+0x130>
 8005f5e:	7863      	ldrb	r3, [r4, #1]
 8005f60:	2b2a      	cmp	r3, #42	; 0x2a
 8005f62:	d135      	bne.n	8005fd0 <_svfiprintf_r+0x188>
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	3402      	adds	r4, #2
 8005f68:	1d1a      	adds	r2, r3, #4
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	9203      	str	r2, [sp, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bfb8      	it	lt
 8005f72:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f76:	9305      	str	r3, [sp, #20]
 8005f78:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006038 <_svfiprintf_r+0x1f0>
 8005f7c:	2203      	movs	r2, #3
 8005f7e:	4650      	mov	r0, sl
 8005f80:	7821      	ldrb	r1, [r4, #0]
 8005f82:	f000 f9f7 	bl	8006374 <memchr>
 8005f86:	b140      	cbz	r0, 8005f9a <_svfiprintf_r+0x152>
 8005f88:	2340      	movs	r3, #64	; 0x40
 8005f8a:	eba0 000a 	sub.w	r0, r0, sl
 8005f8e:	fa03 f000 	lsl.w	r0, r3, r0
 8005f92:	9b04      	ldr	r3, [sp, #16]
 8005f94:	3401      	adds	r4, #1
 8005f96:	4303      	orrs	r3, r0
 8005f98:	9304      	str	r3, [sp, #16]
 8005f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f9e:	2206      	movs	r2, #6
 8005fa0:	4826      	ldr	r0, [pc, #152]	; (800603c <_svfiprintf_r+0x1f4>)
 8005fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fa6:	f000 f9e5 	bl	8006374 <memchr>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d038      	beq.n	8006020 <_svfiprintf_r+0x1d8>
 8005fae:	4b24      	ldr	r3, [pc, #144]	; (8006040 <_svfiprintf_r+0x1f8>)
 8005fb0:	bb1b      	cbnz	r3, 8005ffa <_svfiprintf_r+0x1b2>
 8005fb2:	9b03      	ldr	r3, [sp, #12]
 8005fb4:	3307      	adds	r3, #7
 8005fb6:	f023 0307 	bic.w	r3, r3, #7
 8005fba:	3308      	adds	r3, #8
 8005fbc:	9303      	str	r3, [sp, #12]
 8005fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc0:	4433      	add	r3, r6
 8005fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fc4:	e767      	b.n	8005e96 <_svfiprintf_r+0x4e>
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	2001      	movs	r0, #1
 8005fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fce:	e7a5      	b.n	8005f1c <_svfiprintf_r+0xd4>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f04f 0c0a 	mov.w	ip, #10
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	3401      	adds	r4, #1
 8005fda:	9305      	str	r3, [sp, #20]
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fe2:	3a30      	subs	r2, #48	; 0x30
 8005fe4:	2a09      	cmp	r2, #9
 8005fe6:	d903      	bls.n	8005ff0 <_svfiprintf_r+0x1a8>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0c5      	beq.n	8005f78 <_svfiprintf_r+0x130>
 8005fec:	9105      	str	r1, [sp, #20]
 8005fee:	e7c3      	b.n	8005f78 <_svfiprintf_r+0x130>
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ff8:	e7f0      	b.n	8005fdc <_svfiprintf_r+0x194>
 8005ffa:	ab03      	add	r3, sp, #12
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	462a      	mov	r2, r5
 8006000:	4638      	mov	r0, r7
 8006002:	4b10      	ldr	r3, [pc, #64]	; (8006044 <_svfiprintf_r+0x1fc>)
 8006004:	a904      	add	r1, sp, #16
 8006006:	f3af 8000 	nop.w
 800600a:	1c42      	adds	r2, r0, #1
 800600c:	4606      	mov	r6, r0
 800600e:	d1d6      	bne.n	8005fbe <_svfiprintf_r+0x176>
 8006010:	89ab      	ldrh	r3, [r5, #12]
 8006012:	065b      	lsls	r3, r3, #25
 8006014:	f53f af2c 	bmi.w	8005e70 <_svfiprintf_r+0x28>
 8006018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800601a:	b01d      	add	sp, #116	; 0x74
 800601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006020:	ab03      	add	r3, sp, #12
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	462a      	mov	r2, r5
 8006026:	4638      	mov	r0, r7
 8006028:	4b06      	ldr	r3, [pc, #24]	; (8006044 <_svfiprintf_r+0x1fc>)
 800602a:	a904      	add	r1, sp, #16
 800602c:	f000 f87c 	bl	8006128 <_printf_i>
 8006030:	e7eb      	b.n	800600a <_svfiprintf_r+0x1c2>
 8006032:	bf00      	nop
 8006034:	08006932 	.word	0x08006932
 8006038:	08006938 	.word	0x08006938
 800603c:	0800693c 	.word	0x0800693c
 8006040:	00000000 	.word	0x00000000
 8006044:	08005d91 	.word	0x08005d91

08006048 <_printf_common>:
 8006048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800604c:	4616      	mov	r6, r2
 800604e:	4699      	mov	r9, r3
 8006050:	688a      	ldr	r2, [r1, #8]
 8006052:	690b      	ldr	r3, [r1, #16]
 8006054:	4607      	mov	r7, r0
 8006056:	4293      	cmp	r3, r2
 8006058:	bfb8      	it	lt
 800605a:	4613      	movlt	r3, r2
 800605c:	6033      	str	r3, [r6, #0]
 800605e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006062:	460c      	mov	r4, r1
 8006064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006068:	b10a      	cbz	r2, 800606e <_printf_common+0x26>
 800606a:	3301      	adds	r3, #1
 800606c:	6033      	str	r3, [r6, #0]
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	0699      	lsls	r1, r3, #26
 8006072:	bf42      	ittt	mi
 8006074:	6833      	ldrmi	r3, [r6, #0]
 8006076:	3302      	addmi	r3, #2
 8006078:	6033      	strmi	r3, [r6, #0]
 800607a:	6825      	ldr	r5, [r4, #0]
 800607c:	f015 0506 	ands.w	r5, r5, #6
 8006080:	d106      	bne.n	8006090 <_printf_common+0x48>
 8006082:	f104 0a19 	add.w	sl, r4, #25
 8006086:	68e3      	ldr	r3, [r4, #12]
 8006088:	6832      	ldr	r2, [r6, #0]
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	42ab      	cmp	r3, r5
 800608e:	dc28      	bgt.n	80060e2 <_printf_common+0x9a>
 8006090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006094:	1e13      	subs	r3, r2, #0
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	bf18      	it	ne
 800609a:	2301      	movne	r3, #1
 800609c:	0692      	lsls	r2, r2, #26
 800609e:	d42d      	bmi.n	80060fc <_printf_common+0xb4>
 80060a0:	4649      	mov	r1, r9
 80060a2:	4638      	mov	r0, r7
 80060a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060a8:	47c0      	blx	r8
 80060aa:	3001      	adds	r0, #1
 80060ac:	d020      	beq.n	80060f0 <_printf_common+0xa8>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	68e5      	ldr	r5, [r4, #12]
 80060b2:	f003 0306 	and.w	r3, r3, #6
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	bf18      	it	ne
 80060ba:	2500      	movne	r5, #0
 80060bc:	6832      	ldr	r2, [r6, #0]
 80060be:	f04f 0600 	mov.w	r6, #0
 80060c2:	68a3      	ldr	r3, [r4, #8]
 80060c4:	bf08      	it	eq
 80060c6:	1aad      	subeq	r5, r5, r2
 80060c8:	6922      	ldr	r2, [r4, #16]
 80060ca:	bf08      	it	eq
 80060cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d0:	4293      	cmp	r3, r2
 80060d2:	bfc4      	itt	gt
 80060d4:	1a9b      	subgt	r3, r3, r2
 80060d6:	18ed      	addgt	r5, r5, r3
 80060d8:	341a      	adds	r4, #26
 80060da:	42b5      	cmp	r5, r6
 80060dc:	d11a      	bne.n	8006114 <_printf_common+0xcc>
 80060de:	2000      	movs	r0, #0
 80060e0:	e008      	b.n	80060f4 <_printf_common+0xac>
 80060e2:	2301      	movs	r3, #1
 80060e4:	4652      	mov	r2, sl
 80060e6:	4649      	mov	r1, r9
 80060e8:	4638      	mov	r0, r7
 80060ea:	47c0      	blx	r8
 80060ec:	3001      	adds	r0, #1
 80060ee:	d103      	bne.n	80060f8 <_printf_common+0xb0>
 80060f0:	f04f 30ff 	mov.w	r0, #4294967295
 80060f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f8:	3501      	adds	r5, #1
 80060fa:	e7c4      	b.n	8006086 <_printf_common+0x3e>
 80060fc:	2030      	movs	r0, #48	; 0x30
 80060fe:	18e1      	adds	r1, r4, r3
 8006100:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800610a:	4422      	add	r2, r4
 800610c:	3302      	adds	r3, #2
 800610e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006112:	e7c5      	b.n	80060a0 <_printf_common+0x58>
 8006114:	2301      	movs	r3, #1
 8006116:	4622      	mov	r2, r4
 8006118:	4649      	mov	r1, r9
 800611a:	4638      	mov	r0, r7
 800611c:	47c0      	blx	r8
 800611e:	3001      	adds	r0, #1
 8006120:	d0e6      	beq.n	80060f0 <_printf_common+0xa8>
 8006122:	3601      	adds	r6, #1
 8006124:	e7d9      	b.n	80060da <_printf_common+0x92>
	...

08006128 <_printf_i>:
 8006128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800612c:	7e0f      	ldrb	r7, [r1, #24]
 800612e:	4691      	mov	r9, r2
 8006130:	2f78      	cmp	r7, #120	; 0x78
 8006132:	4680      	mov	r8, r0
 8006134:	460c      	mov	r4, r1
 8006136:	469a      	mov	sl, r3
 8006138:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800613a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800613e:	d807      	bhi.n	8006150 <_printf_i+0x28>
 8006140:	2f62      	cmp	r7, #98	; 0x62
 8006142:	d80a      	bhi.n	800615a <_printf_i+0x32>
 8006144:	2f00      	cmp	r7, #0
 8006146:	f000 80d9 	beq.w	80062fc <_printf_i+0x1d4>
 800614a:	2f58      	cmp	r7, #88	; 0x58
 800614c:	f000 80a4 	beq.w	8006298 <_printf_i+0x170>
 8006150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006158:	e03a      	b.n	80061d0 <_printf_i+0xa8>
 800615a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800615e:	2b15      	cmp	r3, #21
 8006160:	d8f6      	bhi.n	8006150 <_printf_i+0x28>
 8006162:	a101      	add	r1, pc, #4	; (adr r1, 8006168 <_printf_i+0x40>)
 8006164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006168:	080061c1 	.word	0x080061c1
 800616c:	080061d5 	.word	0x080061d5
 8006170:	08006151 	.word	0x08006151
 8006174:	08006151 	.word	0x08006151
 8006178:	08006151 	.word	0x08006151
 800617c:	08006151 	.word	0x08006151
 8006180:	080061d5 	.word	0x080061d5
 8006184:	08006151 	.word	0x08006151
 8006188:	08006151 	.word	0x08006151
 800618c:	08006151 	.word	0x08006151
 8006190:	08006151 	.word	0x08006151
 8006194:	080062e3 	.word	0x080062e3
 8006198:	08006205 	.word	0x08006205
 800619c:	080062c5 	.word	0x080062c5
 80061a0:	08006151 	.word	0x08006151
 80061a4:	08006151 	.word	0x08006151
 80061a8:	08006305 	.word	0x08006305
 80061ac:	08006151 	.word	0x08006151
 80061b0:	08006205 	.word	0x08006205
 80061b4:	08006151 	.word	0x08006151
 80061b8:	08006151 	.word	0x08006151
 80061bc:	080062cd 	.word	0x080062cd
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	1d1a      	adds	r2, r3, #4
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	602a      	str	r2, [r5, #0]
 80061c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061d0:	2301      	movs	r3, #1
 80061d2:	e0a4      	b.n	800631e <_printf_i+0x1f6>
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	6829      	ldr	r1, [r5, #0]
 80061d8:	0606      	lsls	r6, r0, #24
 80061da:	f101 0304 	add.w	r3, r1, #4
 80061de:	d50a      	bpl.n	80061f6 <_printf_i+0xce>
 80061e0:	680e      	ldr	r6, [r1, #0]
 80061e2:	602b      	str	r3, [r5, #0]
 80061e4:	2e00      	cmp	r6, #0
 80061e6:	da03      	bge.n	80061f0 <_printf_i+0xc8>
 80061e8:	232d      	movs	r3, #45	; 0x2d
 80061ea:	4276      	negs	r6, r6
 80061ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f0:	230a      	movs	r3, #10
 80061f2:	485e      	ldr	r0, [pc, #376]	; (800636c <_printf_i+0x244>)
 80061f4:	e019      	b.n	800622a <_printf_i+0x102>
 80061f6:	680e      	ldr	r6, [r1, #0]
 80061f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061fc:	602b      	str	r3, [r5, #0]
 80061fe:	bf18      	it	ne
 8006200:	b236      	sxthne	r6, r6
 8006202:	e7ef      	b.n	80061e4 <_printf_i+0xbc>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	6820      	ldr	r0, [r4, #0]
 8006208:	1d19      	adds	r1, r3, #4
 800620a:	6029      	str	r1, [r5, #0]
 800620c:	0601      	lsls	r1, r0, #24
 800620e:	d501      	bpl.n	8006214 <_printf_i+0xec>
 8006210:	681e      	ldr	r6, [r3, #0]
 8006212:	e002      	b.n	800621a <_printf_i+0xf2>
 8006214:	0646      	lsls	r6, r0, #25
 8006216:	d5fb      	bpl.n	8006210 <_printf_i+0xe8>
 8006218:	881e      	ldrh	r6, [r3, #0]
 800621a:	2f6f      	cmp	r7, #111	; 0x6f
 800621c:	bf0c      	ite	eq
 800621e:	2308      	moveq	r3, #8
 8006220:	230a      	movne	r3, #10
 8006222:	4852      	ldr	r0, [pc, #328]	; (800636c <_printf_i+0x244>)
 8006224:	2100      	movs	r1, #0
 8006226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800622a:	6865      	ldr	r5, [r4, #4]
 800622c:	2d00      	cmp	r5, #0
 800622e:	bfa8      	it	ge
 8006230:	6821      	ldrge	r1, [r4, #0]
 8006232:	60a5      	str	r5, [r4, #8]
 8006234:	bfa4      	itt	ge
 8006236:	f021 0104 	bicge.w	r1, r1, #4
 800623a:	6021      	strge	r1, [r4, #0]
 800623c:	b90e      	cbnz	r6, 8006242 <_printf_i+0x11a>
 800623e:	2d00      	cmp	r5, #0
 8006240:	d04d      	beq.n	80062de <_printf_i+0x1b6>
 8006242:	4615      	mov	r5, r2
 8006244:	fbb6 f1f3 	udiv	r1, r6, r3
 8006248:	fb03 6711 	mls	r7, r3, r1, r6
 800624c:	5dc7      	ldrb	r7, [r0, r7]
 800624e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006252:	4637      	mov	r7, r6
 8006254:	42bb      	cmp	r3, r7
 8006256:	460e      	mov	r6, r1
 8006258:	d9f4      	bls.n	8006244 <_printf_i+0x11c>
 800625a:	2b08      	cmp	r3, #8
 800625c:	d10b      	bne.n	8006276 <_printf_i+0x14e>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	07de      	lsls	r6, r3, #31
 8006262:	d508      	bpl.n	8006276 <_printf_i+0x14e>
 8006264:	6923      	ldr	r3, [r4, #16]
 8006266:	6861      	ldr	r1, [r4, #4]
 8006268:	4299      	cmp	r1, r3
 800626a:	bfde      	ittt	le
 800626c:	2330      	movle	r3, #48	; 0x30
 800626e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006272:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006276:	1b52      	subs	r2, r2, r5
 8006278:	6122      	str	r2, [r4, #16]
 800627a:	464b      	mov	r3, r9
 800627c:	4621      	mov	r1, r4
 800627e:	4640      	mov	r0, r8
 8006280:	f8cd a000 	str.w	sl, [sp]
 8006284:	aa03      	add	r2, sp, #12
 8006286:	f7ff fedf 	bl	8006048 <_printf_common>
 800628a:	3001      	adds	r0, #1
 800628c:	d14c      	bne.n	8006328 <_printf_i+0x200>
 800628e:	f04f 30ff 	mov.w	r0, #4294967295
 8006292:	b004      	add	sp, #16
 8006294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006298:	4834      	ldr	r0, [pc, #208]	; (800636c <_printf_i+0x244>)
 800629a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800629e:	6829      	ldr	r1, [r5, #0]
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80062a6:	6029      	str	r1, [r5, #0]
 80062a8:	061d      	lsls	r5, r3, #24
 80062aa:	d514      	bpl.n	80062d6 <_printf_i+0x1ae>
 80062ac:	07df      	lsls	r7, r3, #31
 80062ae:	bf44      	itt	mi
 80062b0:	f043 0320 	orrmi.w	r3, r3, #32
 80062b4:	6023      	strmi	r3, [r4, #0]
 80062b6:	b91e      	cbnz	r6, 80062c0 <_printf_i+0x198>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	f023 0320 	bic.w	r3, r3, #32
 80062be:	6023      	str	r3, [r4, #0]
 80062c0:	2310      	movs	r3, #16
 80062c2:	e7af      	b.n	8006224 <_printf_i+0xfc>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	f043 0320 	orr.w	r3, r3, #32
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	2378      	movs	r3, #120	; 0x78
 80062ce:	4828      	ldr	r0, [pc, #160]	; (8006370 <_printf_i+0x248>)
 80062d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062d4:	e7e3      	b.n	800629e <_printf_i+0x176>
 80062d6:	0659      	lsls	r1, r3, #25
 80062d8:	bf48      	it	mi
 80062da:	b2b6      	uxthmi	r6, r6
 80062dc:	e7e6      	b.n	80062ac <_printf_i+0x184>
 80062de:	4615      	mov	r5, r2
 80062e0:	e7bb      	b.n	800625a <_printf_i+0x132>
 80062e2:	682b      	ldr	r3, [r5, #0]
 80062e4:	6826      	ldr	r6, [r4, #0]
 80062e6:	1d18      	adds	r0, r3, #4
 80062e8:	6961      	ldr	r1, [r4, #20]
 80062ea:	6028      	str	r0, [r5, #0]
 80062ec:	0635      	lsls	r5, r6, #24
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	d501      	bpl.n	80062f6 <_printf_i+0x1ce>
 80062f2:	6019      	str	r1, [r3, #0]
 80062f4:	e002      	b.n	80062fc <_printf_i+0x1d4>
 80062f6:	0670      	lsls	r0, r6, #25
 80062f8:	d5fb      	bpl.n	80062f2 <_printf_i+0x1ca>
 80062fa:	8019      	strh	r1, [r3, #0]
 80062fc:	2300      	movs	r3, #0
 80062fe:	4615      	mov	r5, r2
 8006300:	6123      	str	r3, [r4, #16]
 8006302:	e7ba      	b.n	800627a <_printf_i+0x152>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	2100      	movs	r1, #0
 8006308:	1d1a      	adds	r2, r3, #4
 800630a:	602a      	str	r2, [r5, #0]
 800630c:	681d      	ldr	r5, [r3, #0]
 800630e:	6862      	ldr	r2, [r4, #4]
 8006310:	4628      	mov	r0, r5
 8006312:	f000 f82f 	bl	8006374 <memchr>
 8006316:	b108      	cbz	r0, 800631c <_printf_i+0x1f4>
 8006318:	1b40      	subs	r0, r0, r5
 800631a:	6060      	str	r0, [r4, #4]
 800631c:	6863      	ldr	r3, [r4, #4]
 800631e:	6123      	str	r3, [r4, #16]
 8006320:	2300      	movs	r3, #0
 8006322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006326:	e7a8      	b.n	800627a <_printf_i+0x152>
 8006328:	462a      	mov	r2, r5
 800632a:	4649      	mov	r1, r9
 800632c:	4640      	mov	r0, r8
 800632e:	6923      	ldr	r3, [r4, #16]
 8006330:	47d0      	blx	sl
 8006332:	3001      	adds	r0, #1
 8006334:	d0ab      	beq.n	800628e <_printf_i+0x166>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	079b      	lsls	r3, r3, #30
 800633a:	d413      	bmi.n	8006364 <_printf_i+0x23c>
 800633c:	68e0      	ldr	r0, [r4, #12]
 800633e:	9b03      	ldr	r3, [sp, #12]
 8006340:	4298      	cmp	r0, r3
 8006342:	bfb8      	it	lt
 8006344:	4618      	movlt	r0, r3
 8006346:	e7a4      	b.n	8006292 <_printf_i+0x16a>
 8006348:	2301      	movs	r3, #1
 800634a:	4632      	mov	r2, r6
 800634c:	4649      	mov	r1, r9
 800634e:	4640      	mov	r0, r8
 8006350:	47d0      	blx	sl
 8006352:	3001      	adds	r0, #1
 8006354:	d09b      	beq.n	800628e <_printf_i+0x166>
 8006356:	3501      	adds	r5, #1
 8006358:	68e3      	ldr	r3, [r4, #12]
 800635a:	9903      	ldr	r1, [sp, #12]
 800635c:	1a5b      	subs	r3, r3, r1
 800635e:	42ab      	cmp	r3, r5
 8006360:	dcf2      	bgt.n	8006348 <_printf_i+0x220>
 8006362:	e7eb      	b.n	800633c <_printf_i+0x214>
 8006364:	2500      	movs	r5, #0
 8006366:	f104 0619 	add.w	r6, r4, #25
 800636a:	e7f5      	b.n	8006358 <_printf_i+0x230>
 800636c:	08006943 	.word	0x08006943
 8006370:	08006954 	.word	0x08006954

08006374 <memchr>:
 8006374:	4603      	mov	r3, r0
 8006376:	b510      	push	{r4, lr}
 8006378:	b2c9      	uxtb	r1, r1
 800637a:	4402      	add	r2, r0
 800637c:	4293      	cmp	r3, r2
 800637e:	4618      	mov	r0, r3
 8006380:	d101      	bne.n	8006386 <memchr+0x12>
 8006382:	2000      	movs	r0, #0
 8006384:	e003      	b.n	800638e <memchr+0x1a>
 8006386:	7804      	ldrb	r4, [r0, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	428c      	cmp	r4, r1
 800638c:	d1f6      	bne.n	800637c <memchr+0x8>
 800638e:	bd10      	pop	{r4, pc}

08006390 <memcpy>:
 8006390:	440a      	add	r2, r1
 8006392:	4291      	cmp	r1, r2
 8006394:	f100 33ff 	add.w	r3, r0, #4294967295
 8006398:	d100      	bne.n	800639c <memcpy+0xc>
 800639a:	4770      	bx	lr
 800639c:	b510      	push	{r4, lr}
 800639e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063a2:	4291      	cmp	r1, r2
 80063a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a8:	d1f9      	bne.n	800639e <memcpy+0xe>
 80063aa:	bd10      	pop	{r4, pc}

080063ac <memmove>:
 80063ac:	4288      	cmp	r0, r1
 80063ae:	b510      	push	{r4, lr}
 80063b0:	eb01 0402 	add.w	r4, r1, r2
 80063b4:	d902      	bls.n	80063bc <memmove+0x10>
 80063b6:	4284      	cmp	r4, r0
 80063b8:	4623      	mov	r3, r4
 80063ba:	d807      	bhi.n	80063cc <memmove+0x20>
 80063bc:	1e43      	subs	r3, r0, #1
 80063be:	42a1      	cmp	r1, r4
 80063c0:	d008      	beq.n	80063d4 <memmove+0x28>
 80063c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063ca:	e7f8      	b.n	80063be <memmove+0x12>
 80063cc:	4601      	mov	r1, r0
 80063ce:	4402      	add	r2, r0
 80063d0:	428a      	cmp	r2, r1
 80063d2:	d100      	bne.n	80063d6 <memmove+0x2a>
 80063d4:	bd10      	pop	{r4, pc}
 80063d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063de:	e7f7      	b.n	80063d0 <memmove+0x24>

080063e0 <_free_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	4605      	mov	r5, r0
 80063e4:	2900      	cmp	r1, #0
 80063e6:	d040      	beq.n	800646a <_free_r+0x8a>
 80063e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ec:	1f0c      	subs	r4, r1, #4
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bfb8      	it	lt
 80063f2:	18e4      	addlt	r4, r4, r3
 80063f4:	f000 f910 	bl	8006618 <__malloc_lock>
 80063f8:	4a1c      	ldr	r2, [pc, #112]	; (800646c <_free_r+0x8c>)
 80063fa:	6813      	ldr	r3, [r2, #0]
 80063fc:	b933      	cbnz	r3, 800640c <_free_r+0x2c>
 80063fe:	6063      	str	r3, [r4, #4]
 8006400:	6014      	str	r4, [r2, #0]
 8006402:	4628      	mov	r0, r5
 8006404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006408:	f000 b90c 	b.w	8006624 <__malloc_unlock>
 800640c:	42a3      	cmp	r3, r4
 800640e:	d908      	bls.n	8006422 <_free_r+0x42>
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	1821      	adds	r1, r4, r0
 8006414:	428b      	cmp	r3, r1
 8006416:	bf01      	itttt	eq
 8006418:	6819      	ldreq	r1, [r3, #0]
 800641a:	685b      	ldreq	r3, [r3, #4]
 800641c:	1809      	addeq	r1, r1, r0
 800641e:	6021      	streq	r1, [r4, #0]
 8006420:	e7ed      	b.n	80063fe <_free_r+0x1e>
 8006422:	461a      	mov	r2, r3
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	b10b      	cbz	r3, 800642c <_free_r+0x4c>
 8006428:	42a3      	cmp	r3, r4
 800642a:	d9fa      	bls.n	8006422 <_free_r+0x42>
 800642c:	6811      	ldr	r1, [r2, #0]
 800642e:	1850      	adds	r0, r2, r1
 8006430:	42a0      	cmp	r0, r4
 8006432:	d10b      	bne.n	800644c <_free_r+0x6c>
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	4401      	add	r1, r0
 8006438:	1850      	adds	r0, r2, r1
 800643a:	4283      	cmp	r3, r0
 800643c:	6011      	str	r1, [r2, #0]
 800643e:	d1e0      	bne.n	8006402 <_free_r+0x22>
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4401      	add	r1, r0
 8006446:	6011      	str	r1, [r2, #0]
 8006448:	6053      	str	r3, [r2, #4]
 800644a:	e7da      	b.n	8006402 <_free_r+0x22>
 800644c:	d902      	bls.n	8006454 <_free_r+0x74>
 800644e:	230c      	movs	r3, #12
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	e7d6      	b.n	8006402 <_free_r+0x22>
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	1821      	adds	r1, r4, r0
 8006458:	428b      	cmp	r3, r1
 800645a:	bf01      	itttt	eq
 800645c:	6819      	ldreq	r1, [r3, #0]
 800645e:	685b      	ldreq	r3, [r3, #4]
 8006460:	1809      	addeq	r1, r1, r0
 8006462:	6021      	streq	r1, [r4, #0]
 8006464:	6063      	str	r3, [r4, #4]
 8006466:	6054      	str	r4, [r2, #4]
 8006468:	e7cb      	b.n	8006402 <_free_r+0x22>
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	20000288 	.word	0x20000288

08006470 <sbrk_aligned>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	4e0e      	ldr	r6, [pc, #56]	; (80064ac <sbrk_aligned+0x3c>)
 8006474:	460c      	mov	r4, r1
 8006476:	6831      	ldr	r1, [r6, #0]
 8006478:	4605      	mov	r5, r0
 800647a:	b911      	cbnz	r1, 8006482 <sbrk_aligned+0x12>
 800647c:	f000 f8bc 	bl	80065f8 <_sbrk_r>
 8006480:	6030      	str	r0, [r6, #0]
 8006482:	4621      	mov	r1, r4
 8006484:	4628      	mov	r0, r5
 8006486:	f000 f8b7 	bl	80065f8 <_sbrk_r>
 800648a:	1c43      	adds	r3, r0, #1
 800648c:	d00a      	beq.n	80064a4 <sbrk_aligned+0x34>
 800648e:	1cc4      	adds	r4, r0, #3
 8006490:	f024 0403 	bic.w	r4, r4, #3
 8006494:	42a0      	cmp	r0, r4
 8006496:	d007      	beq.n	80064a8 <sbrk_aligned+0x38>
 8006498:	1a21      	subs	r1, r4, r0
 800649a:	4628      	mov	r0, r5
 800649c:	f000 f8ac 	bl	80065f8 <_sbrk_r>
 80064a0:	3001      	adds	r0, #1
 80064a2:	d101      	bne.n	80064a8 <sbrk_aligned+0x38>
 80064a4:	f04f 34ff 	mov.w	r4, #4294967295
 80064a8:	4620      	mov	r0, r4
 80064aa:	bd70      	pop	{r4, r5, r6, pc}
 80064ac:	2000028c 	.word	0x2000028c

080064b0 <_malloc_r>:
 80064b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b4:	1ccd      	adds	r5, r1, #3
 80064b6:	f025 0503 	bic.w	r5, r5, #3
 80064ba:	3508      	adds	r5, #8
 80064bc:	2d0c      	cmp	r5, #12
 80064be:	bf38      	it	cc
 80064c0:	250c      	movcc	r5, #12
 80064c2:	2d00      	cmp	r5, #0
 80064c4:	4607      	mov	r7, r0
 80064c6:	db01      	blt.n	80064cc <_malloc_r+0x1c>
 80064c8:	42a9      	cmp	r1, r5
 80064ca:	d905      	bls.n	80064d8 <_malloc_r+0x28>
 80064cc:	230c      	movs	r3, #12
 80064ce:	2600      	movs	r6, #0
 80064d0:	603b      	str	r3, [r7, #0]
 80064d2:	4630      	mov	r0, r6
 80064d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d8:	4e2e      	ldr	r6, [pc, #184]	; (8006594 <_malloc_r+0xe4>)
 80064da:	f000 f89d 	bl	8006618 <__malloc_lock>
 80064de:	6833      	ldr	r3, [r6, #0]
 80064e0:	461c      	mov	r4, r3
 80064e2:	bb34      	cbnz	r4, 8006532 <_malloc_r+0x82>
 80064e4:	4629      	mov	r1, r5
 80064e6:	4638      	mov	r0, r7
 80064e8:	f7ff ffc2 	bl	8006470 <sbrk_aligned>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	4604      	mov	r4, r0
 80064f0:	d14d      	bne.n	800658e <_malloc_r+0xde>
 80064f2:	6834      	ldr	r4, [r6, #0]
 80064f4:	4626      	mov	r6, r4
 80064f6:	2e00      	cmp	r6, #0
 80064f8:	d140      	bne.n	800657c <_malloc_r+0xcc>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	4631      	mov	r1, r6
 80064fe:	4638      	mov	r0, r7
 8006500:	eb04 0803 	add.w	r8, r4, r3
 8006504:	f000 f878 	bl	80065f8 <_sbrk_r>
 8006508:	4580      	cmp	r8, r0
 800650a:	d13a      	bne.n	8006582 <_malloc_r+0xd2>
 800650c:	6821      	ldr	r1, [r4, #0]
 800650e:	3503      	adds	r5, #3
 8006510:	1a6d      	subs	r5, r5, r1
 8006512:	f025 0503 	bic.w	r5, r5, #3
 8006516:	3508      	adds	r5, #8
 8006518:	2d0c      	cmp	r5, #12
 800651a:	bf38      	it	cc
 800651c:	250c      	movcc	r5, #12
 800651e:	4638      	mov	r0, r7
 8006520:	4629      	mov	r1, r5
 8006522:	f7ff ffa5 	bl	8006470 <sbrk_aligned>
 8006526:	3001      	adds	r0, #1
 8006528:	d02b      	beq.n	8006582 <_malloc_r+0xd2>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	442b      	add	r3, r5
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	e00e      	b.n	8006550 <_malloc_r+0xa0>
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	1b52      	subs	r2, r2, r5
 8006536:	d41e      	bmi.n	8006576 <_malloc_r+0xc6>
 8006538:	2a0b      	cmp	r2, #11
 800653a:	d916      	bls.n	800656a <_malloc_r+0xba>
 800653c:	1961      	adds	r1, r4, r5
 800653e:	42a3      	cmp	r3, r4
 8006540:	6025      	str	r5, [r4, #0]
 8006542:	bf18      	it	ne
 8006544:	6059      	strne	r1, [r3, #4]
 8006546:	6863      	ldr	r3, [r4, #4]
 8006548:	bf08      	it	eq
 800654a:	6031      	streq	r1, [r6, #0]
 800654c:	5162      	str	r2, [r4, r5]
 800654e:	604b      	str	r3, [r1, #4]
 8006550:	4638      	mov	r0, r7
 8006552:	f104 060b 	add.w	r6, r4, #11
 8006556:	f000 f865 	bl	8006624 <__malloc_unlock>
 800655a:	f026 0607 	bic.w	r6, r6, #7
 800655e:	1d23      	adds	r3, r4, #4
 8006560:	1af2      	subs	r2, r6, r3
 8006562:	d0b6      	beq.n	80064d2 <_malloc_r+0x22>
 8006564:	1b9b      	subs	r3, r3, r6
 8006566:	50a3      	str	r3, [r4, r2]
 8006568:	e7b3      	b.n	80064d2 <_malloc_r+0x22>
 800656a:	6862      	ldr	r2, [r4, #4]
 800656c:	42a3      	cmp	r3, r4
 800656e:	bf0c      	ite	eq
 8006570:	6032      	streq	r2, [r6, #0]
 8006572:	605a      	strne	r2, [r3, #4]
 8006574:	e7ec      	b.n	8006550 <_malloc_r+0xa0>
 8006576:	4623      	mov	r3, r4
 8006578:	6864      	ldr	r4, [r4, #4]
 800657a:	e7b2      	b.n	80064e2 <_malloc_r+0x32>
 800657c:	4634      	mov	r4, r6
 800657e:	6876      	ldr	r6, [r6, #4]
 8006580:	e7b9      	b.n	80064f6 <_malloc_r+0x46>
 8006582:	230c      	movs	r3, #12
 8006584:	4638      	mov	r0, r7
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	f000 f84c 	bl	8006624 <__malloc_unlock>
 800658c:	e7a1      	b.n	80064d2 <_malloc_r+0x22>
 800658e:	6025      	str	r5, [r4, #0]
 8006590:	e7de      	b.n	8006550 <_malloc_r+0xa0>
 8006592:	bf00      	nop
 8006594:	20000288 	.word	0x20000288

08006598 <_realloc_r>:
 8006598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800659c:	4680      	mov	r8, r0
 800659e:	4614      	mov	r4, r2
 80065a0:	460e      	mov	r6, r1
 80065a2:	b921      	cbnz	r1, 80065ae <_realloc_r+0x16>
 80065a4:	4611      	mov	r1, r2
 80065a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065aa:	f7ff bf81 	b.w	80064b0 <_malloc_r>
 80065ae:	b92a      	cbnz	r2, 80065bc <_realloc_r+0x24>
 80065b0:	f7ff ff16 	bl	80063e0 <_free_r>
 80065b4:	4625      	mov	r5, r4
 80065b6:	4628      	mov	r0, r5
 80065b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065bc:	f000 f838 	bl	8006630 <_malloc_usable_size_r>
 80065c0:	4284      	cmp	r4, r0
 80065c2:	4607      	mov	r7, r0
 80065c4:	d802      	bhi.n	80065cc <_realloc_r+0x34>
 80065c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065ca:	d812      	bhi.n	80065f2 <_realloc_r+0x5a>
 80065cc:	4621      	mov	r1, r4
 80065ce:	4640      	mov	r0, r8
 80065d0:	f7ff ff6e 	bl	80064b0 <_malloc_r>
 80065d4:	4605      	mov	r5, r0
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d0ed      	beq.n	80065b6 <_realloc_r+0x1e>
 80065da:	42bc      	cmp	r4, r7
 80065dc:	4622      	mov	r2, r4
 80065de:	4631      	mov	r1, r6
 80065e0:	bf28      	it	cs
 80065e2:	463a      	movcs	r2, r7
 80065e4:	f7ff fed4 	bl	8006390 <memcpy>
 80065e8:	4631      	mov	r1, r6
 80065ea:	4640      	mov	r0, r8
 80065ec:	f7ff fef8 	bl	80063e0 <_free_r>
 80065f0:	e7e1      	b.n	80065b6 <_realloc_r+0x1e>
 80065f2:	4635      	mov	r5, r6
 80065f4:	e7df      	b.n	80065b6 <_realloc_r+0x1e>
	...

080065f8 <_sbrk_r>:
 80065f8:	b538      	push	{r3, r4, r5, lr}
 80065fa:	2300      	movs	r3, #0
 80065fc:	4d05      	ldr	r5, [pc, #20]	; (8006614 <_sbrk_r+0x1c>)
 80065fe:	4604      	mov	r4, r0
 8006600:	4608      	mov	r0, r1
 8006602:	602b      	str	r3, [r5, #0]
 8006604:	f7fb fab8 	bl	8001b78 <_sbrk>
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	d102      	bne.n	8006612 <_sbrk_r+0x1a>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	b103      	cbz	r3, 8006612 <_sbrk_r+0x1a>
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	bd38      	pop	{r3, r4, r5, pc}
 8006614:	20000290 	.word	0x20000290

08006618 <__malloc_lock>:
 8006618:	4801      	ldr	r0, [pc, #4]	; (8006620 <__malloc_lock+0x8>)
 800661a:	f000 b811 	b.w	8006640 <__retarget_lock_acquire_recursive>
 800661e:	bf00      	nop
 8006620:	20000294 	.word	0x20000294

08006624 <__malloc_unlock>:
 8006624:	4801      	ldr	r0, [pc, #4]	; (800662c <__malloc_unlock+0x8>)
 8006626:	f000 b80c 	b.w	8006642 <__retarget_lock_release_recursive>
 800662a:	bf00      	nop
 800662c:	20000294 	.word	0x20000294

08006630 <_malloc_usable_size_r>:
 8006630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006634:	1f18      	subs	r0, r3, #4
 8006636:	2b00      	cmp	r3, #0
 8006638:	bfbc      	itt	lt
 800663a:	580b      	ldrlt	r3, [r1, r0]
 800663c:	18c0      	addlt	r0, r0, r3
 800663e:	4770      	bx	lr

08006640 <__retarget_lock_acquire_recursive>:
 8006640:	4770      	bx	lr

08006642 <__retarget_lock_release_recursive>:
 8006642:	4770      	bx	lr

08006644 <_init>:
 8006644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006646:	bf00      	nop
 8006648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664a:	bc08      	pop	{r3}
 800664c:	469e      	mov	lr, r3
 800664e:	4770      	bx	lr

08006650 <_fini>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	bf00      	nop
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr
