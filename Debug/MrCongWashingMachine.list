
MrCongWashingMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006304  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006638  08006638  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08006638  08006638  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006638  08006638  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800663c  0800663c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000008c  080066cc  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080066cc  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e60b  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ec  00000000  00000000  0002e6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  000309b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00031820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c4b  00000000  00000000  00032590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fce  00000000  00000000  0004b1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fffd  00000000  00000000  0005c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec1a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000413c  00000000  00000000  000ec1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	080063fc 	.word	0x080063fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	080063fc 	.word	0x080063fc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2uiz>:
 800093c:	004a      	lsls	r2, r1, #1
 800093e:	d211      	bcs.n	8000964 <__aeabi_d2uiz+0x28>
 8000940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000944:	d211      	bcs.n	800096a <__aeabi_d2uiz+0x2e>
 8000946:	d50d      	bpl.n	8000964 <__aeabi_d2uiz+0x28>
 8000948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800094c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000950:	d40e      	bmi.n	8000970 <__aeabi_d2uiz+0x34>
 8000952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800095a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800095e:	fa23 f002 	lsr.w	r0, r3, r2
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096e:	d102      	bne.n	8000976 <__aeabi_d2uiz+0x3a>
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	4770      	bx	lr
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	4770      	bx	lr

0800097c <at24_isConnected>:
 * @brief  Checks if memory device is ready for communication.
 * @param  none
 * @retval bool status
 */
bool at24_isConnected(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&hi2c2, _EEPROM_ADDRESS, 2, 100) == HAL_OK)
 8000980:	2364      	movs	r3, #100	; 0x64
 8000982:	2202      	movs	r2, #2
 8000984:	21a0      	movs	r1, #160	; 0xa0
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <at24_isConnected+0x20>)
 8000988:	f002 fe82 	bl	8003690 <HAL_I2C_IsDeviceReady>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d101      	bne.n	8000996 <at24_isConnected+0x1a>
		return true;
 8000992:	2301      	movs	r3, #1
 8000994:	e000      	b.n	8000998 <at24_isConnected+0x1c>
	else
		return false;
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000130 	.word	0x20000130

080009a0 <at24_write>:
 * @param  len Amount of data to be sent
 * @param  timeout Timeout duration
 * @retval bool status
 */
bool at24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af04      	add	r7, sp, #16
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	4603      	mov	r3, r0
 80009ae:	81fb      	strh	r3, [r7, #14]
	if (at24_lock == 1)
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <at24_write+0xb8>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d101      	bne.n	80009bc <at24_write+0x1c>
		return false;
 80009b8:	2300      	movs	r3, #0
 80009ba:	e049      	b.n	8000a50 <at24_write+0xb0>

	at24_lock = 1;
 80009bc:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <at24_write+0xb8>)
 80009be:	2201      	movs	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
	uint16_t w;
	uint32_t startTime = HAL_GetTick();
 80009c2:	f001 fb9b 	bl	80020fc <HAL_GetTick>
 80009c6:	6138      	str	r0, [r7, #16]

	while (1)
	{
		w = _EEPROM_PSIZE - (address % _EEPROM_PSIZE);
 80009c8:	89fb      	ldrh	r3, [r7, #14]
 80009ca:	f003 031f 	and.w	r3, r3, #31
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	f1c3 0320 	rsb	r3, r3, #32
 80009d4:	82fb      	strh	r3, [r7, #22]
		if (w > len)
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d201      	bcs.n	80009e2 <at24_write+0x42>
			w = len;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	82fb      	strh	r3, [r7, #22]
#elif (_EEPROM_SIZE_KBIT == 8)
		if (HAL_I2C_Mem_Write(&hi2c2, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
#elif (_EEPROM_SIZE_KBIT == 16)
		if (HAL_I2C_Mem_Write(&hi2c2, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&hi2c2, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 100) == HAL_OK)
 80009e2:	89fa      	ldrh	r2, [r7, #14]
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	9302      	str	r3, [sp, #8]
 80009e8:	8afb      	ldrh	r3, [r7, #22]
 80009ea:	9301      	str	r3, [sp, #4]
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2310      	movs	r3, #16
 80009f2:	21a0      	movs	r1, #160	; 0xa0
 80009f4:	4819      	ldr	r0, [pc, #100]	; (8000a5c <at24_write+0xbc>)
 80009f6:	f002 fadd 	bl	8002fb4 <HAL_I2C_Mem_Write>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d123      	bne.n	8000a48 <at24_write+0xa8>
#endif
		{
			at24_delay(10);
 8000a00:	200a      	movs	r0, #10
 8000a02:	f001 fb85 	bl	8002110 <HAL_Delay>
			len -= w;
 8000a06:	8afb      	ldrh	r3, [r7, #22]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	607b      	str	r3, [r7, #4]
			data += w;
 8000a0e:	8afb      	ldrh	r3, [r7, #22]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	4413      	add	r3, r2
 8000a14:	60bb      	str	r3, [r7, #8]
			address += w;
 8000a16:	89fa      	ldrh	r2, [r7, #14]
 8000a18:	8afb      	ldrh	r3, [r7, #22]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	81fb      	strh	r3, [r7, #14]
			if (len == 0)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d104      	bne.n	8000a2e <at24_write+0x8e>
			{
				at24_lock = 0;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <at24_write+0xb8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
				return true;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e010      	b.n	8000a50 <at24_write+0xb0>
			}
			if (HAL_GetTick() - startTime >= timeout)
 8000a2e:	f001 fb65 	bl	80020fc <HAL_GetTick>
 8000a32:	4602      	mov	r2, r0
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d8c4      	bhi.n	80009c8 <at24_write+0x28>
			{
				at24_lock = 0;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <at24_write+0xb8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
				return false;
 8000a44:	2300      	movs	r3, #0
 8000a46:	e003      	b.n	8000a50 <at24_write+0xb0>
			}
		}
		else
		{
			at24_lock = 0;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <at24_write+0xb8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
			return false;
 8000a4e:	2300      	movs	r3, #0
		}
	}
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000a8 	.word	0x200000a8
 8000a5c:	20000130 	.word	0x20000130

08000a60 <at24_read>:
 * @param  len Amount of data to be sent
 * @param  timeout Timeout duration
 * @retval bool status
 */
bool at24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	81fb      	strh	r3, [r7, #14]
	if (at24_lock == 1)
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <at24_read+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d101      	bne.n	8000a7c <at24_read+0x1c>
		return false;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e019      	b.n	8000ab0 <at24_read+0x50>
#elif (_EEPROM_SIZE_KBIT == 8)
	if (HAL_I2C_Mem_Read(&hi2c2, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
#elif (_EEPROM_SIZE_KBIT == 16)
	if (HAL_I2C_Mem_Read(&hi2c2, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
#else
	if (HAL_I2C_Mem_Read(&hi2c2, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	89f9      	ldrh	r1, [r7, #14]
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	9202      	str	r2, [sp, #8]
 8000a86:	9301      	str	r3, [sp, #4]
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	460a      	mov	r2, r1
 8000a90:	21a0      	movs	r1, #160	; 0xa0
 8000a92:	480a      	ldr	r0, [pc, #40]	; (8000abc <at24_read+0x5c>)
 8000a94:	f002 fb88 	bl	80031a8 <HAL_I2C_Mem_Read>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d104      	bne.n	8000aa8 <at24_read+0x48>
#endif
	{
		at24_lock = 0;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <at24_read+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
		return true;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e003      	b.n	8000ab0 <at24_read+0x50>
	}
	else
	{
		at24_lock = 0;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <at24_read+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
		return false;
 8000aae:	2300      	movs	r3, #0
	}
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200000a8 	.word	0x200000a8
 8000abc:	20000130 	.word	0x20000130

08000ac0 <check_eeprom>:
	}
	return true;
}

int8_t check_eeprom(uint8_t backupData_eeprom[])
{
 8000ac0:	b5b0      	push	{r4, r5, r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval -1: no eeprom found, 0: no backup data saved, 1: have backup data
	 */

	if (at24_isConnected())
 8000ac8:	f7ff ff58 	bl	800097c <at24_isConnected>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d02a      	beq.n	8000b28 <check_eeprom+0x68>
	{
		at24_read(0, backupData_eeprom, 5, 500);
 8000ad2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ad6:	2205      	movs	r2, #5
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff ffc0 	bl	8000a60 <at24_read>
		for (int i = 0; i < 5; i++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ae4:	e01b      	b.n	8000b1e <check_eeprom+0x5e>
		{
			if (backupData_eeprom[i] != 0xFF)
 8000ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	4413      	add	r3, r2
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2bff      	cmp	r3, #255	; 0xff
 8000af0:	d012      	beq.n	8000b18 <check_eeprom+0x58>
			{
				const uint8_t eraseData[32] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <check_eeprom+0x74>)
 8000af4:	f107 040c 	add.w	r4, r7, #12
 8000af8:	461d      	mov	r5, r3
 8000afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				at24_write(0, (uint8_t *)eraseData, sizeof(eraseData), 100);
 8000b06:	f107 010c 	add.w	r1, r7, #12
 8000b0a:	2364      	movs	r3, #100	; 0x64
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff ff46 	bl	80009a0 <at24_write>
				return 1; // return 1 if any of data_read == 0xFF ( has backup data )
 8000b14:	2301      	movs	r3, #1
 8000b16:	e009      	b.n	8000b2c <check_eeprom+0x6c>
		for (int i = 0; i < 5; i++)
 8000b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b20:	2b04      	cmp	r3, #4
 8000b22:	dde0      	ble.n	8000ae6 <check_eeprom+0x26>
			}
		}
		return 0; // return 0 if all data_read == 0xFF ( no backup data )
 8000b24:	2300      	movs	r3, #0
 8000b26:	e001      	b.n	8000b2c <check_eeprom+0x6c>
	}
	else
	{
		return -1;
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3730      	adds	r7, #48	; 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bdb0      	pop	{r4, r5, r7, pc}
 8000b34:	08006414 	.word	0x08006414

08000b38 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x7E // some lcd 0x3F

void lcd_send_cmd (char cmd)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af02      	add	r7, sp, #8
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f023 030f 	bic.w	r3, r3, #15
 8000b48:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	011b      	lsls	r3, r3, #4
 8000b4e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	f043 030c 	orr.w	r3, r3, #12
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000b64:	7bbb      	ldrb	r3, [r7, #14]
 8000b66:	f043 030c 	orr.w	r3, r3, #12
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000b6e:	7bbb      	ldrb	r3, [r7, #14]
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b78:	f107 0208 	add.w	r2, r7, #8
 8000b7c:	2364      	movs	r3, #100	; 0x64
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	2304      	movs	r3, #4
 8000b82:	217e      	movs	r1, #126	; 0x7e
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <lcd_send_cmd+0x5c>)
 8000b86:	f002 f917 	bl	8002db8 <HAL_I2C_Master_Transmit>
}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000dc 	.word	0x200000dc

08000b98 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f023 030f 	bic.w	r3, r3, #15
 8000ba8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	f043 030d 	orr.w	r3, r3, #13
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	f043 0309 	orr.w	r3, r3, #9
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	f043 030d 	orr.w	r3, r3, #13
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000bce:	7bbb      	ldrb	r3, [r7, #14]
 8000bd0:	f043 0309 	orr.w	r3, r3, #9
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bd8:	f107 0208 	add.w	r2, r7, #8
 8000bdc:	2364      	movs	r3, #100	; 0x64
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2304      	movs	r3, #4
 8000be2:	217e      	movs	r1, #126	; 0x7e
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <lcd_send_data+0x5c>)
 8000be6:	f002 f8e7 	bl	8002db8 <HAL_I2C_Master_Transmit>
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000dc 	.word	0x200000dc

08000bf8 <lcd_init>:

void lcd_init (void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000bfc:	2033      	movs	r0, #51	; 0x33
 8000bfe:	f7ff ff9b 	bl	8000b38 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000c02:	2032      	movs	r0, #50	; 0x32
 8000c04:	f7ff ff98 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(50);
 8000c08:	2032      	movs	r0, #50	; 0x32
 8000c0a:	f001 fa81 	bl	8002110 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000c0e:	2028      	movs	r0, #40	; 0x28
 8000c10:	f7ff ff92 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(50);
 8000c14:	2032      	movs	r0, #50	; 0x32
 8000c16:	f001 fa7b 	bl	8002110 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff ff8c 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(50);
 8000c20:	2032      	movs	r0, #50	; 0x32
 8000c22:	f001 fa75 	bl	8002110 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000c26:	2006      	movs	r0, #6
 8000c28:	f7ff ff86 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(50);
 8000c2c:	2032      	movs	r0, #50	; 0x32
 8000c2e:	f001 fa6f 	bl	8002110 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000c32:	200c      	movs	r0, #12
 8000c34:	f7ff ff80 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(50);
 8000c38:	2032      	movs	r0, #50	; 0x32
 8000c3a:	f001 fa69 	bl	8002110 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f7ff ff7a 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(50);
 8000c44:	2032      	movs	r0, #50	; 0x32
 8000c46:	f001 fa63 	bl	8002110 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000c4a:	2080      	movs	r0, #128	; 0x80
 8000c4c:	f7ff ff74 	bl	8000b38 <lcd_send_cmd>
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000c5c:	e006      	b.n	8000c6c <lcd_send_string+0x18>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	1c5a      	adds	r2, r3, #1
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ff96 	bl	8000b98 <lcd_send_data>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1f4      	bne.n	8000c5e <lcd_send_string+0xa>
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <lcd_clear_display>:
	for (int i; i < sizeof(str_data); i++) {
		lcd_send_data(str_data[i]);
	}
}
void lcd_clear_display (void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff ff58 	bl	8000b38 <lcd_send_cmd>
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d108      	bne.n	8000cae <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	337f      	adds	r3, #127	; 0x7f
 8000caa:	73fb      	strb	r3, [r7, #15]
 8000cac:	e008      	b.n	8000cc0 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	3340      	adds	r3, #64	; 0x40
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff38 	bl	8000b38 <lcd_send_cmd>
}
 8000cc8:	bf00      	nop
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == watersensor_input_Pin)
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	2b40      	cmp	r3, #64	; 0x40
 8000cde:	d104      	bne.n	8000cea <HAL_GPIO_EXTI_Callback+0x1a>
	{
		freq_count++;
 8000ce0:	4b50      	ldr	r3, [pc, #320]	; (8000e24 <HAL_GPIO_EXTI_Callback+0x154>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	4a4f      	ldr	r2, [pc, #316]	; (8000e24 <HAL_GPIO_EXTI_Callback+0x154>)
 8000ce8:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == pulse_input_Pin)
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	2b80      	cmp	r3, #128	; 0x80
 8000cee:	d11a      	bne.n	8000d26 <HAL_GPIO_EXTI_Callback+0x56>
	{
		ZC = true;
 8000cf0:	4b4d      	ldr	r3, [pc, #308]	; (8000e28 <HAL_GPIO_EXTI_Callback+0x158>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
		// turn on triac and start timer 2
		if (motorRun)
 8000cf6:	4b4d      	ldr	r3, [pc, #308]	; (8000e2c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_EXTI_Callback+0x56>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, alpha); // Change CCR1 value dynamically
 8000cfe:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <HAL_GPIO_EXTI_Callback+0x160>)
 8000d00:	881a      	ldrh	r2, [r3, #0]
 8000d02:	4b4c      	ldr	r3, [pc, #304]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x164>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);			 // Starts the timer
 8000d08:	2100      	movs	r1, #0
 8000d0a:	484a      	ldr	r0, [pc, #296]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x164>)
 8000d0c:	f003 ffd0 	bl	8004cb0 <HAL_TIM_OC_Start_IT>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d16:	4848      	ldr	r0, [pc, #288]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x168>)
 8000d18:	f001 fed9 	bl	8002ace <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(triac_gate_GPIO_Port, triac_gate_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2108      	movs	r1, #8
 8000d20:	4846      	ldr	r0, [pc, #280]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x16c>)
 8000d22:	f001 fed4 	bl	8002ace <HAL_GPIO_WritePin>
		}
	}
	if (GPIO_Pin == button1_Pin)
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d2c:	d142      	bne.n	8000db4 <HAL_GPIO_EXTI_Callback+0xe4>
	{
		relayOn = !relayOn;
 8000d2e:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <HAL_GPIO_EXTI_Callback+0x170>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bf14      	ite	ne
 8000d36:	2301      	movne	r3, #1
 8000d38:	2300      	moveq	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	f083 0301 	eor.w	r3, r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <HAL_GPIO_EXTI_Callback+0x170>)
 8000d4a:	701a      	strb	r2, [r3, #0]
		if (onStart)
 8000d4c:	4b3d      	ldr	r3, [pc, #244]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x174>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_EXTI_Callback+0x8c>
		{
			continue_backup_run = true; // fix hêrre
 8000d54:	4b3c      	ldr	r3, [pc, #240]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x178>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	e02b      	b.n	8000db4 <HAL_GPIO_EXTI_Callback+0xe4>
		}
		else
		{
			if (!HAL_GPIO_ReadPin(door_sensor_GPIO_Port, door_sensor_Pin))
 8000d5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d60:	483a      	ldr	r0, [pc, #232]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x17c>)
 8000d62:	f001 fe9d 	bl	8002aa0 <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d11d      	bne.n	8000da8 <HAL_GPIO_EXTI_Callback+0xd8>
			{
				if ((mode_select[0] != 0 && mode_select[1] != 0 && mode_select[2] != 0) || (mode_select[0] == 5))
 8000d6c:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d007      	beq.n	8000d84 <HAL_GPIO_EXTI_Callback+0xb4>
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000d76:	785b      	ldrb	r3, [r3, #1]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <HAL_GPIO_EXTI_Callback+0xb4>
 8000d7c:	4b34      	ldr	r3, [pc, #208]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000d7e:	789b      	ldrb	r3, [r3, #2]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d103      	bne.n	8000d8c <HAL_GPIO_EXTI_Callback+0xbc>
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b05      	cmp	r3, #5
 8000d8a:	d106      	bne.n	8000d9a <HAL_GPIO_EXTI_Callback+0xca>
				{
					flag = true;
 8000d8c:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <HAL_GPIO_EXTI_Callback+0x184>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
					procedure_run_flag = 1;
 8000d92:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x188>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e00c      	b.n	8000db4 <HAL_GPIO_EXTI_Callback+0xe4>
				}
				else
				{
					flag = true;
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <HAL_GPIO_EXTI_Callback+0x184>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
					procedure_run_flag = -1;
 8000da0:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x188>)
 8000da2:	22ff      	movs	r2, #255	; 0xff
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e005      	b.n	8000db4 <HAL_GPIO_EXTI_Callback+0xe4>
				}
			}
			else
			{
				flag = true;
 8000da8:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <HAL_GPIO_EXTI_Callback+0x184>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
				procedure_run_flag = -2;
 8000dae:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x188>)
 8000db0:	22fe      	movs	r2, #254	; 0xfe
 8000db2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (GPIO_Pin == button2_Pin)
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dba:	d10c      	bne.n	8000dd6 <HAL_GPIO_EXTI_Callback+0x106>
		== 2 : giat ngam (giat lau lau lau)
		== 3 : giat nhanh (giat nhe)
		== 4 : vat va xa
		== 5 : chi xa
		*/
		mode_select[0]++;
 8000dbc:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000dc6:	701a      	strb	r2, [r3, #0]
		if (mode_select[0] > 5)
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b05      	cmp	r3, #5
 8000dce:	d902      	bls.n	8000dd6 <HAL_GPIO_EXTI_Callback+0x106>
		{
			mode_select[0] = 1;
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == button3_Pin)
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ddc:	d10c      	bne.n	8000df8 <HAL_GPIO_EXTI_Callback+0x128>
	{
		/*
		mode_select[1] - bien luu muc nuoc
		== i : muc nuoc = (i*10)%
		*/
		mode_select[1]++;
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000de0:	785b      	ldrb	r3, [r3, #1]
 8000de2:	3301      	adds	r3, #1
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000de8:	705a      	strb	r2, [r3, #1]
		if (mode_select[1] > 10)
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000dec:	785b      	ldrb	r3, [r3, #1]
 8000dee:	2b0a      	cmp	r3, #10
 8000df0:	d902      	bls.n	8000df8 <HAL_GPIO_EXTI_Callback+0x128>
		{
			mode_select[1] = 1;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	705a      	strb	r2, [r3, #1]
		}
	}
	if (GPIO_Pin == button4_Pin)
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dfe:	d10c      	bne.n	8000e1a <HAL_GPIO_EXTI_Callback+0x14a>
	{
		/*
		mode_select[2] - bien luu so lan xa
		== i : so lan xa = i (i <= 3)
		*/
		mode_select[2]++;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000e02:	789b      	ldrb	r3, [r3, #2]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000e0a:	709a      	strb	r2, [r3, #2]
		if (mode_select[2] > 3)
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000e0e:	789b      	ldrb	r3, [r3, #2]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d902      	bls.n	8000e1a <HAL_GPIO_EXTI_Callback+0x14a>
		{
			mode_select[2] = 1;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x180>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	709a      	strb	r2, [r3, #2]
		}
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000021c 	.word	0x2000021c
 8000e28:	20000218 	.word	0x20000218
 8000e2c:	20000217 	.word	0x20000217
 8000e30:	20000222 	.word	0x20000222
 8000e34:	20000184 	.word	0x20000184
 8000e38:	40011000 	.word	0x40011000
 8000e3c:	40010c00 	.word	0x40010c00
 8000e40:	20000216 	.word	0x20000216
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000214 	.word	0x20000214
 8000e4c:	40010800 	.word	0x40010800
 8000e50:	20000224 	.word	0x20000224
 8000e54:	2000022d 	.word	0x2000022d
 8000e58:	20000215 	.word	0x20000215
 8000e5c:	00000000 	.word	0x00000000

08000e60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d12e      	bne.n	8000ed0 <HAL_TIM_PeriodElapsedCallback+0x70>
		// frequency = freq_count
		/*
		 * Water level: 0% ~ f = 11300Hz; 100% ~ f = 9000Hz
		 * Need to make a graph for this, temporarily use Linear
		 */
		water_level = (int)(freq_count - 9000.0) / (11300.0 - 9000.0) * 100.0; // convert into 0-100%
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff faac 	bl	80003d4 <__aeabi_ui2d>
 8000e7c:	a316      	add	r3, pc, #88	; (adr r3, 8000ed8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e82:	f7ff f969 	bl	8000158 <__aeabi_dsub>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f7ff fd2d 	bl	80008ec <__aeabi_d2iz>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff faad 	bl	80003f4 <__aeabi_i2d>
 8000e9a:	a311      	add	r3, pc, #68	; (adr r3, 8000ee0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea0:	f7ff fc3c 	bl	800071c <__aeabi_ddiv>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000eb2:	f7ff fb09 	bl	80004c8 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f7ff fd3d 	bl	800093c <__aeabi_d2uiz>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000ec8:	701a      	strb	r2, [r3, #0]
		freq_count = 0;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
	}
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	00000000 	.word	0x00000000
 8000edc:	40c19400 	.word	0x40c19400
 8000ee0:	00000000 	.word	0x00000000
 8000ee4:	40a1f800 	.word	0x40a1f800
 8000ee8:	40000800 	.word	0x40000800
 8000eec:	2000021c 	.word	0x2000021c
 8000ef0:	40590000 	.word	0x40590000
 8000ef4:	20000220 	.word	0x20000220

08000ef8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000efc:	f001 f8a6 	bl	800204c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f00:	f000 f832 	bl	8000f68 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f04:	f000 f9e4 	bl	80012d0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000f08:	f000 f880 	bl	800100c <MX_ADC1_Init>
	MX_TIM2_Init();
 8000f0c:	f000 f918 	bl	8001140 <MX_TIM2_Init>
	MX_I2C1_Init();
 8000f10:	f000 f8ba 	bl	8001088 <MX_I2C1_Init>
	MX_I2C2_Init();
 8000f14:	f000 f8e6 	bl	80010e4 <MX_I2C2_Init>
	MX_TIM4_Init();
 8000f18:	f000 f988 	bl	800122c <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(1000); // delay 1000ms to wait for everything
 8000f1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f20:	f001 f8f6 	bl	8002110 <HAL_Delay>
	// if (ZC)
	// {
	// 	onStart = true;
	// }
	lcd_init();
 8000f24:	f7ff fe68 	bl	8000bf8 <lcd_init>
	updateLCD(100);
 8000f28:	2064      	movs	r0, #100	; 0x64
 8000f2a:	f000 fa99 	bl	8001460 <updateLCD>
	onStart = false;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <main+0x60>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
	procedure_init();
 8000f34:	f000 fe42 	bl	8001bbc <procedure_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		updateLCD(100);
 8000f38:	2064      	movs	r0, #100	; 0x64
 8000f3a:	f000 fa91 	bl	8001460 <updateLCD>
		// power_observer();
		if (procedure_run_flag)
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <main+0x64>)
 8000f40:	f993 3000 	ldrsb.w	r3, [r3]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f7      	beq.n	8000f38 <main+0x40>
		{
			run_procedure(mode_select, water_level, &procedure_run_flag);
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <main+0x68>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <main+0x64>)
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <main+0x6c>)
 8000f52:	f000 fe41 	bl	8001bd8 <run_procedure>
		updateLCD(100);
 8000f56:	e7ef      	b.n	8000f38 <main+0x40>
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000215 	.word	0x20000215
 8000f60:	20000220 	.word	0x20000220
 8000f64:	20000224 	.word	0x20000224

08000f68 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b094      	sub	sp, #80	; 0x50
 8000f6c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f72:	2228      	movs	r2, #40	; 0x28
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 fdbe 	bl	8005af8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 f8d3 	bl	8004158 <HAL_RCC_OscConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x54>
	{
		Error_Handler();
 8000fb8:	f000 fbec 	bl	8001794 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fcc:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f003 fb3f 	bl	800465c <HAL_RCC_ClockConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x80>
	{
		Error_Handler();
 8000fe4:	f000 fbd6 	bl	8001794 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 fcac 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000ffe:	f000 fbc9 	bl	8001794 <Error_Handler>
	}
}
 8001002:	bf00      	nop
 8001004:	3750      	adds	r7, #80	; 0x50
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_ADC1_Init+0x74>)
 800101e:	4a19      	ldr	r2, [pc, #100]	; (8001084 <MX_ADC1_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_ADC1_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_ADC1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_ADC1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_ADC1_Init+0x74>)
 8001036:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800103a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_ADC1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_ADC1_Init+0x74>)
 8001044:	2201      	movs	r2, #1
 8001046:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_ADC1_Init+0x74>)
 800104a:	f001 f885 	bl	8002158 <HAL_ADC_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8001054:	f000 fb9e 	bl	8001794 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8001058:	2302      	movs	r3, #2
 800105a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800105c:	2301      	movs	r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_ADC1_Init+0x74>)
 800106a:	f001 f94d 	bl	8002308 <HAL_ADC_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8001074:	f000 fb8e 	bl	8001794 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200000ac 	.word	0x200000ac
 8001084:	40012400 	.word	0x40012400

08001088 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_I2C1_Init+0x50>)
 800108e:	4a13      	ldr	r2, [pc, #76]	; (80010dc <MX_I2C1_Init+0x54>)
 8001090:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_I2C1_Init+0x50>)
 8001094:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <MX_I2C1_Init+0x58>)
 8001096:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010aa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010c6:	f001 fd33 	bl	8002b30 <HAL_I2C_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80010d0:	f000 fb60 	bl	8001794 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200000dc 	.word	0x200000dc
 80010dc:	40005400 	.word	0x40005400
 80010e0:	000186a0 	.word	0x000186a0

080010e4 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2C2_Init+0x50>)
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <MX_I2C2_Init+0x54>)
 80010ec:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_I2C2_Init+0x50>)
 80010f0:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_I2C2_Init+0x58>)
 80010f2:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_I2C2_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_I2C2_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_I2C2_Init+0x50>)
 8001102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001106:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_I2C2_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_I2C2_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_I2C2_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_I2C2_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_I2C2_Init+0x50>)
 8001122:	f001 fd05 	bl	8002b30 <HAL_I2C_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 800112c:	f000 fb32 	bl	8001794 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000130 	.word	0x20000130
 8001138:	40005800 	.word	0x40005800
 800113c:	000186a0 	.word	0x000186a0

08001140 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08e      	sub	sp, #56	; 0x38
 8001144:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001170:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <MX_TIM2_Init+0xe8>)
 8001172:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001176:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16 - 1;
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <MX_TIM2_Init+0xe8>)
 800117a:	220f      	movs	r2, #15
 800117c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_TIM2_Init+0xe8>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFF - 1;
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <MX_TIM2_Init+0xe8>)
 8001186:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800118a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <MX_TIM2_Init+0xe8>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_TIM2_Init+0xe8>)
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001198:	4823      	ldr	r0, [pc, #140]	; (8001228 <MX_TIM2_Init+0xe8>)
 800119a:	f003 fc8f 	bl	8004abc <HAL_TIM_Base_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM2_Init+0x68>
	{
		Error_Handler();
 80011a4:	f000 faf6 	bl	8001794 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b2:	4619      	mov	r1, r3
 80011b4:	481c      	ldr	r0, [pc, #112]	; (8001228 <MX_TIM2_Init+0xe8>)
 80011b6:	f004 f869 	bl	800528c <HAL_TIM_ConfigClockSource>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 80011c0:	f000 fae8 	bl	8001794 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80011c4:	4818      	ldr	r0, [pc, #96]	; (8001228 <MX_TIM2_Init+0xe8>)
 80011c6:	f003 fd1b 	bl	8004c00 <HAL_TIM_OC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 80011d0:	f000 fae0 	bl	8001794 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4619      	mov	r1, r3
 80011e2:	4811      	ldr	r0, [pc, #68]	; (8001228 <MX_TIM2_Init+0xe8>)
 80011e4:	f004 fbee 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0xb2>
	{
		Error_Handler();
 80011ee:	f000 fad1 	bl	8001794 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	4619      	mov	r1, r3
 8001208:	4807      	ldr	r0, [pc, #28]	; (8001228 <MX_TIM2_Init+0xe8>)
 800120a:	f003 ffe3 	bl	80051d4 <HAL_TIM_OC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM2_Init+0xd8>
	{
		Error_Handler();
 8001214:	f000 fabe 	bl	8001794 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <MX_TIM2_Init+0xe8>)
 800121a:	f000 fbeb 	bl	80019f4 <HAL_TIM_MspPostInit>
}
 800121e:	bf00      	nop
 8001220:	3738      	adds	r7, #56	; 0x38
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000184 	.word	0x20000184

0800122c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <MX_TIM4_Init+0x9c>)
 800124a:	4a20      	ldr	r2, [pc, #128]	; (80012cc <MX_TIM4_Init+0xa0>)
 800124c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 8000 - 1;
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <MX_TIM4_Init+0x9c>)
 8001250:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001254:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_TIM4_Init+0x9c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1000 - 1;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_TIM4_Init+0x9c>)
 800125e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001262:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_TIM4_Init+0x9c>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_TIM4_Init+0x9c>)
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001270:	4815      	ldr	r0, [pc, #84]	; (80012c8 <MX_TIM4_Init+0x9c>)
 8001272:	f003 fc23 	bl	8004abc <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM4_Init+0x54>
	{
		Error_Handler();
 800127c:	f000 fa8a 	bl	8001794 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001284:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4619      	mov	r1, r3
 800128c:	480e      	ldr	r0, [pc, #56]	; (80012c8 <MX_TIM4_Init+0x9c>)
 800128e:	f003 fffd 	bl	800528c <HAL_TIM_ConfigClockSource>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 8001298:	f000 fa7c 	bl	8001794 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129c:	2300      	movs	r3, #0
 800129e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <MX_TIM4_Init+0x9c>)
 80012aa:	f004 fb8b 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 80012b4:	f000 fa6e 	bl	8001794 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <MX_TIM4_Init+0x9c>)
 80012ba:	f003 fc4f 	bl	8004b5c <HAL_TIM_Base_Start_IT>
	/* USER CODE END TIM4_Init 2 */
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200001cc 	.word	0x200001cc
 80012cc:	40000800 	.word	0x40000800

080012d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012e4:	4b59      	ldr	r3, [pc, #356]	; (800144c <MX_GPIO_Init+0x17c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a58      	ldr	r2, [pc, #352]	; (800144c <MX_GPIO_Init+0x17c>)
 80012ea:	f043 0310 	orr.w	r3, r3, #16
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b56      	ldr	r3, [pc, #344]	; (800144c <MX_GPIO_Init+0x17c>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012fc:	4b53      	ldr	r3, [pc, #332]	; (800144c <MX_GPIO_Init+0x17c>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <MX_GPIO_Init+0x17c>)
 8001302:	f043 0320 	orr.w	r3, r3, #32
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b50      	ldr	r3, [pc, #320]	; (800144c <MX_GPIO_Init+0x17c>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0320 	and.w	r3, r3, #32
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b4d      	ldr	r3, [pc, #308]	; (800144c <MX_GPIO_Init+0x17c>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a4c      	ldr	r2, [pc, #304]	; (800144c <MX_GPIO_Init+0x17c>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b4a      	ldr	r3, [pc, #296]	; (800144c <MX_GPIO_Init+0x17c>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	4b47      	ldr	r3, [pc, #284]	; (800144c <MX_GPIO_Init+0x17c>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a46      	ldr	r2, [pc, #280]	; (800144c <MX_GPIO_Init+0x17c>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b44      	ldr	r3, [pc, #272]	; (800144c <MX_GPIO_Init+0x17c>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134a:	4841      	ldr	r0, [pc, #260]	; (8001450 <MX_GPIO_Init+0x180>)
 800134c:	f001 fbbf 	bl	8002ace <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_12, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f241 0102 	movw	r1, #4098	; 0x1002
 8001356:	483f      	ldr	r0, [pc, #252]	; (8001454 <MX_GPIO_Init+0x184>)
 8001358:	f001 fbb9 	bl	8002ace <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2138      	movs	r1, #56	; 0x38
 8001360:	483d      	ldr	r0, [pc, #244]	; (8001458 <MX_GPIO_Init+0x188>)
 8001362:	f001 fbb4 	bl	8002ace <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2302      	movs	r3, #2
 8001376:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4619      	mov	r1, r3
 800137e:	4834      	ldr	r0, [pc, #208]	; (8001450 <MX_GPIO_Init+0x180>)
 8001380:	f001 fa0a 	bl	8002798 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_12;
 8001384:	f241 0302 	movw	r3, #4098	; 0x1002
 8001388:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2302      	movs	r3, #2
 8001394:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4619      	mov	r1, r3
 800139c:	482d      	ldr	r0, [pc, #180]	; (8001454 <MX_GPIO_Init+0x184>)
 800139e:	f001 f9fb 	bl	8002798 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80013a2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <MX_GPIO_Init+0x18c>)
 80013aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	4619      	mov	r1, r3
 80013b6:	4828      	ldr	r0, [pc, #160]	; (8001458 <MX_GPIO_Init+0x188>)
 80013b8:	f001 f9ee 	bl	8002798 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	4619      	mov	r1, r3
 80013d0:	4820      	ldr	r0, [pc, #128]	; (8001454 <MX_GPIO_Init+0x184>)
 80013d2:	f001 f9e1 	bl	8002798 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80013d6:	2338      	movs	r3, #56	; 0x38
 80013d8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4619      	mov	r1, r3
 80013ec:	481a      	ldr	r0, [pc, #104]	; (8001458 <MX_GPIO_Init+0x188>)
 80013ee:	f001 f9d3 	bl	8002798 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013f2:	2340      	movs	r3, #64	; 0x40
 80013f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_GPIO_Init+0x18c>)
 80013f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	4814      	ldr	r0, [pc, #80]	; (8001458 <MX_GPIO_Init+0x188>)
 8001406:	f001 f9c7 	bl	8002798 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <MX_GPIO_Init+0x18c>)
 8001410:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001412:	2301      	movs	r3, #1
 8001414:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	4619      	mov	r1, r3
 800141c:	480e      	ldr	r0, [pc, #56]	; (8001458 <MX_GPIO_Init+0x188>)
 800141e:	f001 f9bb 	bl	8002798 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2017      	movs	r0, #23
 8001428:	f001 f97f 	bl	800272a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800142c:	2017      	movs	r0, #23
 800142e:	f001 f998 	bl	8002762 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2028      	movs	r0, #40	; 0x28
 8001438:	f001 f977 	bl	800272a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800143c:	2028      	movs	r0, #40	; 0x28
 800143e:	f001 f990 	bl	8002762 <HAL_NVIC_EnableIRQ>
}
 8001442:	bf00      	nop
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	40011000 	.word	0x40011000
 8001454:	40010800 	.word	0x40010800
 8001458:	40010c00 	.word	0x40010c00
 800145c:	10110000 	.word	0x10110000

08001460 <updateLCD>:

/* USER CODE BEGIN 4 */
void updateLCD(int index)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	; 0x50
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	/*
	Updating LCD if index is different from current index;
	*/
	static uint32_t previous_tick = 0;		 // variable to store previous time
	static int previous_mode[3] = {0, 0, 0}; // make sure initial current == mode_select to display first message
	if (onStart)
 8001468:	4bae      	ldr	r3, [pc, #696]	; (8001724 <updateLCD+0x2c4>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d038      	beq.n	80014e2 <updateLCD+0x82>
	{
		lcd_goto_XY(1, 0);
 8001470:	2100      	movs	r1, #0
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff fc0a 	bl	8000c8c <lcd_goto_XY>
		lcd_send_string("MyWashingMachine");
 8001478:	48ab      	ldr	r0, [pc, #684]	; (8001728 <updateLCD+0x2c8>)
 800147a:	f7ff fbeb 	bl	8000c54 <lcd_send_string>
		int8_t retval = check_eeprom(backupData_eeprom);
 800147e:	48ab      	ldr	r0, [pc, #684]	; (800172c <updateLCD+0x2cc>)
 8001480:	f7ff fb1e 	bl	8000ac0 <check_eeprom>
 8001484:	4603      	mov	r3, r0
 8001486:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		switch (retval)
 800148a:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800148e:	2b01      	cmp	r3, #1
 8001490:	d018      	beq.n	80014c4 <updateLCD+0x64>
 8001492:	2b01      	cmp	r3, #1
 8001494:	f300 8142 	bgt.w	800171c <updateLCD+0x2bc>
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d002      	beq.n	80014a4 <updateLCD+0x44>
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d008      	beq.n	80014b4 <updateLCD+0x54>
 80014a2:	e13b      	b.n	800171c <updateLCD+0x2bc>
		{
		case -1: // eeprom error code
			lcd_goto_XY(2, 0);
 80014a4:	2100      	movs	r1, #0
 80014a6:	2002      	movs	r0, #2
 80014a8:	f7ff fbf0 	bl	8000c8c <lcd_goto_XY>
			lcd_send_string("Eeprom failed!");
 80014ac:	48a0      	ldr	r0, [pc, #640]	; (8001730 <updateLCD+0x2d0>)
 80014ae:	f7ff fbd1 	bl	8000c54 <lcd_send_string>
			return;
 80014b2:	e133      	b.n	800171c <updateLCD+0x2bc>
		case 0: // eeprom ok, no recovery data
			lcd_goto_XY(2, 0);
 80014b4:	2100      	movs	r1, #0
 80014b6:	2002      	movs	r0, #2
 80014b8:	f7ff fbe8 	bl	8000c8c <lcd_goto_XY>
			lcd_send_string("Eeprom OK!");
 80014bc:	489d      	ldr	r0, [pc, #628]	; (8001734 <updateLCD+0x2d4>)
 80014be:	f7ff fbc9 	bl	8000c54 <lcd_send_string>
			return;
 80014c2:	e12b      	b.n	800171c <updateLCD+0x2bc>
		case 1:
			lcd_goto_XY(1, 0);
 80014c4:	2100      	movs	r1, #0
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff fbe0 	bl	8000c8c <lcd_goto_XY>
			lcd_send_string("Bkup available! ");
 80014cc:	489a      	ldr	r0, [pc, #616]	; (8001738 <updateLCD+0x2d8>)
 80014ce:	f7ff fbc1 	bl	8000c54 <lcd_send_string>
			lcd_goto_XY(2, 0);
 80014d2:	2100      	movs	r1, #0
 80014d4:	2002      	movs	r0, #2
 80014d6:	f7ff fbd9 	bl	8000c8c <lcd_goto_XY>
			lcd_send_string("START to resume ");
 80014da:	4898      	ldr	r0, [pc, #608]	; (800173c <updateLCD+0x2dc>)
 80014dc:	f7ff fbba 	bl	8000c54 <lcd_send_string>
			return;
 80014e0:	e11c      	b.n	800171c <updateLCD+0x2bc>
		}
	}
	else
	{
		for (int i = 0; i < 3; i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014e6:	e07e      	b.n	80015e6 <updateLCD+0x186>
		{
			if (previous_mode[i] != mode_select[i])
 80014e8:	4a95      	ldr	r2, [pc, #596]	; (8001740 <updateLCD+0x2e0>)
 80014ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f0:	4994      	ldr	r1, [pc, #592]	; (8001744 <updateLCD+0x2e4>)
 80014f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014f4:	440a      	add	r2, r1
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d071      	beq.n	80015e0 <updateLCD+0x180>
			{
				flag = true;
 80014fc:	4b92      	ldr	r3, [pc, #584]	; (8001748 <updateLCD+0x2e8>)
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
				previous_tick = HAL_GetTick();
 8001502:	f000 fdfb 	bl	80020fc <HAL_GetTick>
 8001506:	4603      	mov	r3, r0
 8001508:	4a90      	ldr	r2, [pc, #576]	; (800174c <updateLCD+0x2ec>)
 800150a:	6013      	str	r3, [r2, #0]
				previous_mode[i] = mode_select[i];
 800150c:	4a8d      	ldr	r2, [pc, #564]	; (8001744 <updateLCD+0x2e4>)
 800150e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001510:	4413      	add	r3, r2
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	4a8a      	ldr	r2, [pc, #552]	; (8001740 <updateLCD+0x2e0>)
 8001518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800151a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (i == 0)
 800151e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001520:	2b00      	cmp	r3, #0
 8001522:	d11c      	bne.n	800155e <updateLCD+0xfe>
				{
					/*
					 * che do giat changed
					 */
					lcd_goto_XY(1, 0);
 8001524:	2100      	movs	r1, #0
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff fbb0 	bl	8000c8c <lcd_goto_XY>
					lcd_send_string("CHON MODE GIAT: ");
 800152c:	4888      	ldr	r0, [pc, #544]	; (8001750 <updateLCD+0x2f0>)
 800152e:	f7ff fb91 	bl	8000c54 <lcd_send_string>
					lcd_goto_XY(2, 0);
 8001532:	2100      	movs	r1, #0
 8001534:	2002      	movs	r0, #2
 8001536:	f7ff fba9 	bl	8000c8c <lcd_goto_XY>
					char data[16];
					sprintf(data, "%s             ", mode_names[previous_mode[0] - 1]);
 800153a:	4b81      	ldr	r3, [pc, #516]	; (8001740 <updateLCD+0x2e0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3b01      	subs	r3, #1
 8001540:	4a84      	ldr	r2, [pc, #528]	; (8001754 <updateLCD+0x2f4>)
 8001542:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001546:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800154a:	4983      	ldr	r1, [pc, #524]	; (8001758 <updateLCD+0x2f8>)
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fadb 	bl	8005b08 <siprintf>
					lcd_send_string(data);
 8001552:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fb7c 	bl	8000c54 <lcd_send_string>
 800155c:	e0de      	b.n	800171c <updateLCD+0x2bc>
					return;
				}
				if (i == 1)
 800155e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001560:	2b01      	cmp	r3, #1
 8001562:	d11f      	bne.n	80015a4 <updateLCD+0x144>
				{
					/*
					 * Muc nuoc changed
					 */
					lcd_goto_XY(1, 0);
 8001564:	2100      	movs	r1, #0
 8001566:	2001      	movs	r0, #1
 8001568:	f7ff fb90 	bl	8000c8c <lcd_goto_XY>
					lcd_send_string("CHON MUC NUOC:  ");
 800156c:	487b      	ldr	r0, [pc, #492]	; (800175c <updateLCD+0x2fc>)
 800156e:	f7ff fb71 	bl	8000c54 <lcd_send_string>
					char data[16];
					sprintf(data, "%d %%           ", previous_mode[i] * 10);
 8001572:	4a73      	ldr	r2, [pc, #460]	; (8001740 <updateLCD+0x2e0>)
 8001574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001576:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	461a      	mov	r2, r3
 8001584:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001588:	4975      	ldr	r1, [pc, #468]	; (8001760 <updateLCD+0x300>)
 800158a:	4618      	mov	r0, r3
 800158c:	f004 fabc 	bl	8005b08 <siprintf>
					lcd_goto_XY(2, 0);
 8001590:	2100      	movs	r1, #0
 8001592:	2002      	movs	r0, #2
 8001594:	f7ff fb7a 	bl	8000c8c <lcd_goto_XY>
					lcd_send_string(data);
 8001598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fb59 	bl	8000c54 <lcd_send_string>
 80015a2:	e0bb      	b.n	800171c <updateLCD+0x2bc>
					return;
				}
				if (i == 2)
 80015a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d11a      	bne.n	80015e0 <updateLCD+0x180>
				{
					/*
					 * Chu ky xa changed
					 */
					lcd_goto_XY(1, 0);
 80015aa:	2100      	movs	r1, #0
 80015ac:	2001      	movs	r0, #1
 80015ae:	f7ff fb6d 	bl	8000c8c <lcd_goto_XY>
					lcd_send_string("CHON SO LAN XA: ");
 80015b2:	486c      	ldr	r0, [pc, #432]	; (8001764 <updateLCD+0x304>)
 80015b4:	f7ff fb4e 	bl	8000c54 <lcd_send_string>
					char data[16];
					sprintf(data, "Xa %d lan nuoc   ", previous_mode[i]);
 80015b8:	4a61      	ldr	r2, [pc, #388]	; (8001740 <updateLCD+0x2e0>)
 80015ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015c0:	f107 0318 	add.w	r3, r7, #24
 80015c4:	4968      	ldr	r1, [pc, #416]	; (8001768 <updateLCD+0x308>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 fa9e 	bl	8005b08 <siprintf>
					lcd_goto_XY(2, 0);
 80015cc:	2100      	movs	r1, #0
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff fb5c 	bl	8000c8c <lcd_goto_XY>
					lcd_send_string(data);
 80015d4:	f107 0318 	add.w	r3, r7, #24
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fb3b 	bl	8000c54 <lcd_send_string>
 80015de:	e09d      	b.n	800171c <updateLCD+0x2bc>
		for (int i = 0; i < 3; i++)
 80015e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015e2:	3301      	adds	r3, #1
 80015e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	f77f af7d 	ble.w	80014e8 <updateLCD+0x88>
					return;
				}
			}
		}
		if (procedure_run_flag == 1 && flag)
 80015ee:	4b5f      	ldr	r3, [pc, #380]	; (800176c <updateLCD+0x30c>)
 80015f0:	f993 3000 	ldrsb.w	r3, [r3]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d115      	bne.n	8001624 <updateLCD+0x1c4>
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <updateLCD+0x2e8>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d011      	beq.n	8001624 <updateLCD+0x1c4>
		{
			flag = false;
 8001600:	4b51      	ldr	r3, [pc, #324]	; (8001748 <updateLCD+0x2e8>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
			lcd_goto_XY(1, 0);
 8001606:	2100      	movs	r1, #0
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff fb3f 	bl	8000c8c <lcd_goto_XY>
			lcd_send_string("    Running...  ");
 800160e:	4858      	ldr	r0, [pc, #352]	; (8001770 <updateLCD+0x310>)
 8001610:	f7ff fb20 	bl	8000c54 <lcd_send_string>
			lcd_goto_XY(2, 0);
 8001614:	2100      	movs	r1, #0
 8001616:	2002      	movs	r0, #2
 8001618:	f7ff fb38 	bl	8000c8c <lcd_goto_XY>
			lcd_send_string("Remains: 1h45m");
 800161c:	4855      	ldr	r0, [pc, #340]	; (8001774 <updateLCD+0x314>)
 800161e:	f7ff fb19 	bl	8000c54 <lcd_send_string>
			return;
 8001622:	e07b      	b.n	800171c <updateLCD+0x2bc>
		}
		else if (procedure_run_flag == -1 && flag)
 8001624:	4b51      	ldr	r3, [pc, #324]	; (800176c <updateLCD+0x30c>)
 8001626:	f993 3000 	ldrsb.w	r3, [r3]
 800162a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162e:	d118      	bne.n	8001662 <updateLCD+0x202>
 8001630:	4b45      	ldr	r3, [pc, #276]	; (8001748 <updateLCD+0x2e8>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d014      	beq.n	8001662 <updateLCD+0x202>
		{
			flag = false;
 8001638:	4b43      	ldr	r3, [pc, #268]	; (8001748 <updateLCD+0x2e8>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
			lcd_goto_XY(1, 0);
 800163e:	2100      	movs	r1, #0
 8001640:	2001      	movs	r0, #1
 8001642:	f7ff fb23 	bl	8000c8c <lcd_goto_XY>
			lcd_send_string("Select all input");
 8001646:	484c      	ldr	r0, [pc, #304]	; (8001778 <updateLCD+0x318>)
 8001648:	f7ff fb04 	bl	8000c54 <lcd_send_string>
			lcd_goto_XY(2, 0);
 800164c:	2100      	movs	r1, #0
 800164e:	2002      	movs	r0, #2
 8001650:	f7ff fb1c 	bl	8000c8c <lcd_goto_XY>
			lcd_send_string("to run!         ");
 8001654:	4849      	ldr	r0, [pc, #292]	; (800177c <updateLCD+0x31c>)
 8001656:	f7ff fafd 	bl	8000c54 <lcd_send_string>
			procedure_run_flag = 0; // set procedure_run_flag = 0 to display Home back
 800165a:	4b44      	ldr	r3, [pc, #272]	; (800176c <updateLCD+0x30c>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
			return;
 8001660:	e05c      	b.n	800171c <updateLCD+0x2bc>
		}
		else if (procedure_run_flag == -2 && flag)
 8001662:	4b42      	ldr	r3, [pc, #264]	; (800176c <updateLCD+0x30c>)
 8001664:	f993 3000 	ldrsb.w	r3, [r3]
 8001668:	f113 0f02 	cmn.w	r3, #2
 800166c:	d118      	bne.n	80016a0 <updateLCD+0x240>
 800166e:	4b36      	ldr	r3, [pc, #216]	; (8001748 <updateLCD+0x2e8>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d014      	beq.n	80016a0 <updateLCD+0x240>
		{
			flag = false;
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <updateLCD+0x2e8>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
			lcd_goto_XY(1, 0);
 800167c:	2100      	movs	r1, #0
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff fb04 	bl	8000c8c <lcd_goto_XY>
			lcd_send_string("Lid not closed, ");
 8001684:	483e      	ldr	r0, [pc, #248]	; (8001780 <updateLCD+0x320>)
 8001686:	f7ff fae5 	bl	8000c54 <lcd_send_string>
			lcd_goto_XY(2, 0);
 800168a:	2100      	movs	r1, #0
 800168c:	2002      	movs	r0, #2
 800168e:	f7ff fafd 	bl	8000c8c <lcd_goto_XY>
			lcd_send_string("close to run!   ");
 8001692:	483c      	ldr	r0, [pc, #240]	; (8001784 <updateLCD+0x324>)
 8001694:	f7ff fade 	bl	8000c54 <lcd_send_string>
			procedure_run_flag = 0; // set procedure_run_flag = 0 to display Home back
 8001698:	4b34      	ldr	r3, [pc, #208]	; (800176c <updateLCD+0x30c>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
			return;
 800169e:	e03d      	b.n	800171c <updateLCD+0x2bc>
		}
		if ((HAL_GetTick() - previous_tick > 2000) && flag)
 80016a0:	f000 fd2c 	bl	80020fc <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b29      	ldr	r3, [pc, #164]	; (800174c <updateLCD+0x2ec>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016b0:	d934      	bls.n	800171c <updateLCD+0x2bc>
 80016b2:	4b25      	ldr	r3, [pc, #148]	; (8001748 <updateLCD+0x2e8>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d030      	beq.n	800171c <updateLCD+0x2bc>
		{
			// This is HOME SCREEN, get back to Home after 2000ms
			flag = false;
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <updateLCD+0x2e8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
			lcd_clear_display();
 80016c0:	f7ff fadd 	bl	8000c7e <lcd_clear_display>
			char data[16];
			sprintf(data, " %s", mode_names[previous_mode[0] - 1]);
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <updateLCD+0x2e0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	4a22      	ldr	r2, [pc, #136]	; (8001754 <updateLCD+0x2f4>)
 80016cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	492c      	ldr	r1, [pc, #176]	; (8001788 <updateLCD+0x328>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fa16 	bl	8005b08 <siprintf>
			lcd_goto_XY(1, 0);
 80016dc:	2100      	movs	r1, #0
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff fad4 	bl	8000c8c <lcd_goto_XY>
			lcd_send_string(data);
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fab3 	bl	8000c54 <lcd_send_string>
			sprintf(data, "Nuoc: %d%% Xa: %d", previous_mode[1] * 10, water_level);
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <updateLCD+0x2e0>)
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <updateLCD+0x32c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	f107 0008 	add.w	r0, r7, #8
 8001704:	4922      	ldr	r1, [pc, #136]	; (8001790 <updateLCD+0x330>)
 8001706:	f004 f9ff 	bl	8005b08 <siprintf>
			lcd_goto_XY(2, 0);
 800170a:	2100      	movs	r1, #0
 800170c:	2002      	movs	r0, #2
 800170e:	f7ff fabd 	bl	8000c8c <lcd_goto_XY>
			lcd_send_string(data);
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fa9c 	bl	8000c54 <lcd_send_string>
		}
	}
}
 800171c:	3750      	adds	r7, #80	; 0x50
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000000 	.word	0x20000000
 8001728:	0800646c 	.word	0x0800646c
 800172c:	20000228 	.word	0x20000228
 8001730:	08006480 	.word	0x08006480
 8001734:	08006490 	.word	0x08006490
 8001738:	0800649c 	.word	0x0800649c
 800173c:	080064b0 	.word	0x080064b0
 8001740:	20000230 	.word	0x20000230
 8001744:	20000224 	.word	0x20000224
 8001748:	2000022d 	.word	0x2000022d
 800174c:	2000023c 	.word	0x2000023c
 8001750:	080064c4 	.word	0x080064c4
 8001754:	20000004 	.word	0x20000004
 8001758:	080064d8 	.word	0x080064d8
 800175c:	080064e8 	.word	0x080064e8
 8001760:	080064fc 	.word	0x080064fc
 8001764:	08006510 	.word	0x08006510
 8001768:	08006524 	.word	0x08006524
 800176c:	20000215 	.word	0x20000215
 8001770:	08006538 	.word	0x08006538
 8001774:	0800654c 	.word	0x0800654c
 8001778:	0800655c 	.word	0x0800655c
 800177c:	08006570 	.word	0x08006570
 8001780:	08006584 	.word	0x08006584
 8001784:	08006598 	.word	0x08006598
 8001788:	080065ac 	.word	0x080065ac
 800178c:	20000220 	.word	0x20000220
 8001790:	080065b0 	.word	0x080065b0

08001794 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
}
 800179a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800179c:	e7fe      	b.n	800179c <Error_Handler+0x8>
	...

080017a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_MspInit+0x5c>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	4a14      	ldr	r2, [pc, #80]	; (80017fc <HAL_MspInit+0x5c>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6193      	str	r3, [r2, #24]
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_MspInit+0x5c>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_MspInit+0x5c>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <HAL_MspInit+0x5c>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_MspInit+0x5c>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_MspInit+0x60>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_MspInit+0x60>)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000

08001804 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a14      	ldr	r2, [pc, #80]	; (8001870 <HAL_ADC_MspInit+0x6c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d121      	bne.n	8001868 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_ADC_MspInit+0x70>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <HAL_ADC_MspInit+0x70>)
 800182a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b10      	ldr	r3, [pc, #64]	; (8001874 <HAL_ADC_MspInit+0x70>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <HAL_ADC_MspInit+0x70>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <HAL_ADC_MspInit+0x70>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_ADC_MspInit+0x70>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001854:	2304      	movs	r3, #4
 8001856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001858:	2303      	movs	r3, #3
 800185a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	4619      	mov	r1, r3
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <HAL_ADC_MspInit+0x74>)
 8001864:	f000 ff98 	bl	8002798 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001868:	bf00      	nop
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40012400 	.word	0x40012400
 8001874:	40021000 	.word	0x40021000
 8001878:	40010800 	.word	0x40010800

0800187c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	; 0x30
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a32      	ldr	r2, [pc, #200]	; (8001960 <HAL_I2C_MspInit+0xe4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d133      	bne.n	8001904 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a30      	ldr	r2, [pc, #192]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 80018a2:	f043 0308 	orr.w	r3, r3, #8
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ba:	2312      	movs	r3, #18
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	4827      	ldr	r0, [pc, #156]	; (8001968 <HAL_I2C_MspInit+0xec>)
 80018ca:	f000 ff65 	bl	8002798 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80018ce:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_I2C_MspInit+0xf0>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e4:	4a21      	ldr	r2, [pc, #132]	; (800196c <HAL_I2C_MspInit+0xf0>)
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 80018f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f4:	61d3      	str	r3, [r2, #28]
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001902:	e029      	b.n	8001958 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <HAL_I2C_MspInit+0xf4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d124      	bne.n	8001958 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	4a14      	ldr	r2, [pc, #80]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 8001914:	f043 0308 	orr.w	r3, r3, #8
 8001918:	6193      	str	r3, [r2, #24]
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001926:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192c:	2312      	movs	r3, #18
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	480b      	ldr	r0, [pc, #44]	; (8001968 <HAL_I2C_MspInit+0xec>)
 800193c:	f000 ff2c 	bl	8002798 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 8001946:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800194a:	61d3      	str	r3, [r2, #28]
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_I2C_MspInit+0xe8>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	bf00      	nop
 800195a:	3730      	adds	r7, #48	; 0x30
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40005400 	.word	0x40005400
 8001964:	40021000 	.word	0x40021000
 8001968:	40010c00 	.word	0x40010c00
 800196c:	40010000 	.word	0x40010000
 8001970:	40005800 	.word	0x40005800

08001974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001984:	d114      	bne.n	80019b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_TIM_Base_MspInit+0x78>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <HAL_TIM_Base_MspInit+0x78>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_TIM_Base_MspInit+0x78>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	201c      	movs	r0, #28
 80019a4:	f000 fec1 	bl	800272a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019a8:	201c      	movs	r0, #28
 80019aa:	f000 feda 	bl	8002762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019ae:	e018      	b.n	80019e2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_TIM_Base_MspInit+0x7c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d113      	bne.n	80019e2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_TIM_Base_MspInit+0x78>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <HAL_TIM_Base_MspInit+0x78>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_TIM_Base_MspInit+0x78>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	201e      	movs	r0, #30
 80019d8:	f000 fea7 	bl	800272a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019dc:	201e      	movs	r0, #30
 80019de:	f000 fec0 	bl	8002762 <HAL_NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40000800 	.word	0x40000800

080019f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a12:	d117      	bne.n	8001a44 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <HAL_TIM_MspPostInit+0x58>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <HAL_TIM_MspPostInit+0x58>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_TIM_MspPostInit+0x58>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2302      	movs	r3, #2
 8001a36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4804      	ldr	r0, [pc, #16]	; (8001a50 <HAL_TIM_MspPostInit+0x5c>)
 8001a40:	f000 feaa 	bl	8002798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a44:	bf00      	nop
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010800 	.word	0x40010800

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <NMI_Handler+0x4>

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <MemManage_Handler+0x4>

08001a66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9a:	f000 fb1d 	bl	80020d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001aa6:	2040      	movs	r0, #64	; 0x40
 8001aa8:	f001 f82a 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001aac:	2080      	movs	r0, #128	; 0x80
 8001aae:	f001 f827 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
// Check if the interrupt was triggered by Output Compare match on Channel 1
	if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_CC1))
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <TIM2_IRQHandler+0x44>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d113      	bne.n	8001af2 <TIM2_IRQHandler+0x3a>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // Toggle an LED or perform action
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad0:	480b      	ldr	r0, [pc, #44]	; (8001b00 <TIM2_IRQHandler+0x48>)
 8001ad2:	f000 fffc 	bl	8002ace <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); //Reset triac pin
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2108      	movs	r1, #8
 8001ada:	480a      	ldr	r0, [pc, #40]	; (8001b04 <TIM2_IRQHandler+0x4c>)
 8001adc:	f000 fff7 	bl	8002ace <HAL_GPIO_WritePin>
		// Clear the interrupt flag
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <TIM2_IRQHandler+0x44>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0202 	mvn.w	r2, #2
 8001ae8:	611a      	str	r2, [r3, #16]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);  // Stops the timer and disables interrupt
 8001aea:	2100      	movs	r1, #0
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <TIM2_IRQHandler+0x44>)
 8001aee:	f003 f9cf 	bl	8004e90 <HAL_TIM_OC_Stop_IT>
		// Handle the interrupt (e.g., toggle an LED, etc.)
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001af2:	4802      	ldr	r0, [pc, #8]	; (8001afc <TIM2_IRQHandler+0x44>)
 8001af4:	f003 fa7e 	bl	8004ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000184 	.word	0x20000184
 8001b00:	40011000 	.word	0x40011000
 8001b04:	40010c00 	.word	0x40010c00

08001b08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <TIM4_IRQHandler+0x10>)
 8001b0e:	f003 fa71 	bl	8004ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200001cc 	.word	0x200001cc

08001b1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b24:	f000 ffec 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b2c:	f000 ffe8 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001b30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b34:	f000 ffe4 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001b38:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b3c:	f000 ffe0 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <_sbrk+0x5c>)
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <_sbrk+0x60>)
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <_sbrk+0x64>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <_sbrk+0x68>)
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d207      	bcs.n	8001b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b74:	f003 ff96 	bl	8005aa4 <__errno>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e009      	b.n	8001b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <_sbrk+0x64>)
 8001b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20005000 	.word	0x20005000
 8001ba4:	00000400 	.word	0x00000400
 8001ba8:	20000240 	.word	0x20000240
 8001bac:	20000278 	.word	0x20000278

08001bb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <procedure_init>:
uint8_t m_rinse_and_drain_times; //so lan vat xa
bool wash_done; // bien trang thai buoc giat xong

void (*runningFunc)();

void procedure_init( void ) {
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
    // run once just to reset the procedure sequence
    runningFunc = &start_procedure;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <procedure_init+0x14>)
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <procedure_init+0x18>)
 8001bc4:	601a      	str	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000250 	.word	0x20000250
 8001bd4:	08001ca9 	.word	0x08001ca9

08001bd8 <run_procedure>:
void run_procedure( uint8_t mode[], uint8_t water_level, bool *procedure_run_flag) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	460b      	mov	r3, r1
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	72fb      	strb	r3, [r7, #11]
    if (wash_done) {
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <run_procedure+0xb4>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <run_procedure+0x1c>
        /* after washing done, stop procedure*/
        *procedure_run_flag = false;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
    }
    m_current_water_level = water_level;
 8001bf4:	4a26      	ldr	r2, [pc, #152]	; (8001c90 <run_procedure+0xb8>)
 8001bf6:	7afb      	ldrb	r3, [r7, #11]
 8001bf8:	7013      	strb	r3, [r2, #0]
    if (runningFunc == &start_procedure) {
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <run_procedure+0xbc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a26      	ldr	r2, [pc, #152]	; (8001c98 <run_procedure+0xc0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d13b      	bne.n	8001c7c <run_procedure+0xa4>
        wash_done = false;
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <run_procedure+0xb4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
        m_mode_select[0] = mode[0];
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	781a      	ldrb	r2, [r3, #0]
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <run_procedure+0xc4>)
 8001c10:	701a      	strb	r2, [r3, #0]
        m_mode_select[1] = mode[1];
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	785a      	ldrb	r2, [r3, #1]
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <run_procedure+0xc4>)
 8001c18:	705a      	strb	r2, [r3, #1]
        m_mode_select[2] = mode[2];
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	789a      	ldrb	r2, [r3, #2]
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <run_procedure+0xc4>)
 8001c20:	709a      	strb	r2, [r3, #2]
        switch( m_mode_select[0]) {
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <run_procedure+0xc4>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d823      	bhi.n	8001c74 <run_procedure+0x9c>
 8001c2c:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <run_procedure+0x5c>)
 8001c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c32:	bf00      	nop
 8001c34:	08001c49 	.word	0x08001c49
 8001c38:	08001c53 	.word	0x08001c53
 8001c3c:	08001c5d 	.word	0x08001c5d
 8001c40:	08001c67 	.word	0x08001c67
 8001c44:	08001c6f 	.word	0x08001c6f
            case 1: 
                m_wash_interval = 15000; //giat thuong, giat trong 15s
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <run_procedure+0xc8>)
 8001c4a:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001c4e:	601a      	str	r2, [r3, #0]
                break;
 8001c50:	e010      	b.n	8001c74 <run_procedure+0x9c>
            case 2:
                m_wash_interval = 25000; //giat ngam, giat trong 25s
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <run_procedure+0xc8>)
 8001c54:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001c58:	601a      	str	r2, [r3, #0]
                break;
 8001c5a:	e00b      	b.n	8001c74 <run_procedure+0x9c>
            case 3: 
                m_wash_interval = 10000; //giat nhanh, giat trong 10s
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <run_procedure+0xc8>)
 8001c5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c62:	601a      	str	r2, [r3, #0]
                break;
 8001c64:	e006      	b.n	8001c74 <run_procedure+0x9c>
            case 4:
                m_wash_interval = 0; // vat va xa, k giat
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <run_procedure+0xc8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
                break;
 8001c6c:	e002      	b.n	8001c74 <run_procedure+0x9c>
            case 5: 
                m_wash_interval = 0; // chi vat, k giat
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <run_procedure+0xc8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
        }
        m_rinse_and_drain_times = m_mode_select[2];
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <run_procedure+0xc4>)
 8001c76:	789a      	ldrb	r2, [r3, #2]
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <run_procedure+0xcc>)
 8001c7a:	701a      	strb	r2, [r3, #0]
    }
    runningFunc();
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <run_procedure+0xbc>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4798      	blx	r3
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000024d 	.word	0x2000024d
 8001c90:	20000247 	.word	0x20000247
 8001c94:	20000250 	.word	0x20000250
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	20000244 	.word	0x20000244
 8001ca0:	20000248 	.word	0x20000248
 8001ca4:	2000024c 	.word	0x2000024c

08001ca8 <start_procedure>:

void start_procedure(uint8_t mode[]) {
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
    runningFunc = &m_fillWater;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <start_procedure+0x18>)
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <start_procedure+0x1c>)
 8001cb4:	601a      	str	r2, [r3, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000250 	.word	0x20000250
 8001cc4:	08001cc9 	.word	0x08001cc9

08001cc8 <m_fillWater>:

void m_fillWater( void ) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
    lcd_goto_XY(2, 0);
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f7fe ffdc 	bl	8000c8c <lcd_goto_XY>
    lcd_send_string("filling wota    ");
 8001cd4:	4819      	ldr	r0, [pc, #100]	; (8001d3c <m_fillWater+0x74>)
 8001cd6:	f7fe ffbd 	bl	8000c54 <lcd_send_string>
    if (m_mode_select[0] == 5) {
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <m_fillWater+0x78>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d103      	bne.n	8001cea <m_fillWater+0x22>
        /* Neu chi xa, khong cap nuoc, goi xuong luon ham chi xa */
        runningFunc = &m_spin;
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <m_fillWater+0x7c>)
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <m_fillWater+0x80>)
 8001ce6:	601a      	str	r2, [r3, #0]
                runningFunc = &m_rinse_and_drain;
            }
        }
    }
    
}
 8001ce8:	e026      	b.n	8001d38 <m_fillWater+0x70>
        if ( m_current_water_level <= m_mode_select[1]*10 ) {
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <m_fillWater+0x84>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <m_fillWater+0x78>)
 8001cf2:	785b      	ldrb	r3, [r3, #1]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4299      	cmp	r1, r3
 8001d00:	dc06      	bgt.n	8001d10 <m_fillWater+0x48>
            HAL_GPIO_WritePin(water_in_GPIO_Port, water_in_Pin, GPIO_PIN_SET);
 8001d02:	2201      	movs	r2, #1
 8001d04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d08:	4811      	ldr	r0, [pc, #68]	; (8001d50 <m_fillWater+0x88>)
 8001d0a:	f000 fee0 	bl	8002ace <HAL_GPIO_WritePin>
}
 8001d0e:	e013      	b.n	8001d38 <m_fillWater+0x70>
            HAL_GPIO_WritePin(water_in_GPIO_Port, water_in_Pin, GPIO_PIN_RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d16:	480e      	ldr	r0, [pc, #56]	; (8001d50 <m_fillWater+0x88>)
 8001d18:	f000 fed9 	bl	8002ace <HAL_GPIO_WritePin>
            if (!wash_done) {
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <m_fillWater+0x8c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	f083 0301 	eor.w	r3, r3, #1
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <m_fillWater+0x6a>
                runningFunc = &m_wash;
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <m_fillWater+0x7c>)
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <m_fillWater+0x90>)
 8001d2e:	601a      	str	r2, [r3, #0]
}
 8001d30:	e002      	b.n	8001d38 <m_fillWater+0x70>
                runningFunc = &m_rinse_and_drain;
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <m_fillWater+0x7c>)
 8001d34:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <m_fillWater+0x94>)
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	080065c4 	.word	0x080065c4
 8001d40:	20000244 	.word	0x20000244
 8001d44:	20000250 	.word	0x20000250
 8001d48:	08001f81 	.word	0x08001f81
 8001d4c:	20000247 	.word	0x20000247
 8001d50:	40010800 	.word	0x40010800
 8001d54:	2000024d 	.word	0x2000024d
 8001d58:	08001d61 	.word	0x08001d61
 8001d5c:	08001ef1 	.word	0x08001ef1

08001d60 <m_wash>:
void m_wash( void ) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
    /*
    * Ham chu trinh giat
    */
    static bool firstRun_wash = true, motor_dir;
    static uint32_t time_wash, change_direction_time;
    if ( firstRun_wash ) {
 8001d66:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <m_wash+0x16c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <m_wash+0x26>
        time_wash = HAL_GetTick(); // thoi gian bat dau giat
 8001d6e:	f000 f9c5 	bl	80020fc <HAL_GetTick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a56      	ldr	r2, [pc, #344]	; (8001ed0 <m_wash+0x170>)
 8001d76:	6013      	str	r3, [r2, #0]
        change_direction_time = time_wash; 
 8001d78:	4b55      	ldr	r3, [pc, #340]	; (8001ed0 <m_wash+0x170>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a55      	ldr	r2, [pc, #340]	; (8001ed4 <m_wash+0x174>)
 8001d7e:	6013      	str	r3, [r2, #0]
        firstRun_wash = false;
 8001d80:	4b52      	ldr	r3, [pc, #328]	; (8001ecc <m_wash+0x16c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
    // lcd_goto_XY(1, 0);
    // lcd_send_string(data);
    // lcd_goto_XY(2, 0);
    // lcd_send_string(motor_dir? "washin -":"washin +");

    if (m_mode_select[0] != 2 ) { // giat ngam
 8001d86:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <m_wash+0x178>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d05a      	beq.n	8001e44 <m_wash+0xe4>
        /*
        * Giat ngam trong 25s:
        * giat 10s, ngam 5s, giat tiep 10s
        */
        if (HAL_GetTick() - time_wash < m_wash_interval) {
 8001d8e:	f000 f9b5 	bl	80020fc <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b4e      	ldr	r3, [pc, #312]	; (8001ed0 <m_wash+0x170>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	1ad2      	subs	r2, r2, r3
 8001d9a:	4b50      	ldr	r3, [pc, #320]	; (8001edc <m_wash+0x17c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d244      	bcs.n	8001e2c <m_wash+0xcc>
            if ((HAL_GetTick() - time_wash < 10000) || (HAL_GetTick() - time_wash > 15000)) {
 8001da2:	f000 f9ab 	bl	80020fc <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	4b49      	ldr	r3, [pc, #292]	; (8001ed0 <m_wash+0x170>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f242 720f 	movw	r2, #9999	; 0x270f
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d909      	bls.n	8001dca <m_wash+0x6a>
 8001db6:	f000 f9a1 	bl	80020fc <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <m_wash+0x170>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d92a      	bls.n	8001e20 <m_wash+0xc0>
                HAL_GPIO_WritePin(triac_gate_GPIO_Port, triac_gate_Pin, GPIO_PIN_SET);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2108      	movs	r1, #8
 8001dce:	4844      	ldr	r0, [pc, #272]	; (8001ee0 <m_wash+0x180>)
 8001dd0:	f000 fe7d 	bl	8002ace <HAL_GPIO_WritePin>
                if (HAL_GetTick() - change_direction_time > 3000) {
 8001dd4:	f000 f992 	bl	80020fc <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b3e      	ldr	r3, [pc, #248]	; (8001ed4 <m_wash+0x174>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d913      	bls.n	8001e10 <m_wash+0xb0>
                    // dao chieu moi 3s
                    motor_dir = !motor_dir;
 8001de8:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <m_wash+0x184>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f083 0301 	eor.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <m_wash+0x184>)
 8001e04:	701a      	strb	r2, [r3, #0]
                    change_direction_time = HAL_GetTick();
 8001e06:	f000 f979 	bl	80020fc <HAL_GetTick>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a31      	ldr	r2, [pc, #196]	; (8001ed4 <m_wash+0x174>)
 8001e0e:	6013      	str	r3, [r2, #0]
                }
                HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, motor_dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001e10:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <m_wash+0x184>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	2120      	movs	r1, #32
 8001e18:	4831      	ldr	r0, [pc, #196]	; (8001ee0 <m_wash+0x180>)
 8001e1a:	f000 fe58 	bl	8002ace <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(triac_gate_GPIO_Port, triac_gate_Pin, GPIO_PIN_RESET);
            firstRun_wash = true; //reset bit
            runningFunc = &m_rinse_and_drain; //giat xong, chuyen sang xa
        }
    }
}
 8001e1e:	e051      	b.n	8001ec4 <m_wash+0x164>
                HAL_GPIO_WritePin(triac_gate_GPIO_Port, triac_gate_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2108      	movs	r1, #8
 8001e24:	482e      	ldr	r0, [pc, #184]	; (8001ee0 <m_wash+0x180>)
 8001e26:	f000 fe52 	bl	8002ace <HAL_GPIO_WritePin>
}
 8001e2a:	e04b      	b.n	8001ec4 <m_wash+0x164>
            HAL_GPIO_WritePin(triac_gate_GPIO_Port, triac_gate_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2108      	movs	r1, #8
 8001e30:	482b      	ldr	r0, [pc, #172]	; (8001ee0 <m_wash+0x180>)
 8001e32:	f000 fe4c 	bl	8002ace <HAL_GPIO_WritePin>
            firstRun_wash = true; //reset bit
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <m_wash+0x16c>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
            runningFunc = &m_rinse_and_drain; //giat xong, chuyen sang xa
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <m_wash+0x188>)
 8001e3e:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <m_wash+0x18c>)
 8001e40:	601a      	str	r2, [r3, #0]
}
 8001e42:	e03f      	b.n	8001ec4 <m_wash+0x164>
        if (HAL_GetTick() - time_wash < m_wash_interval) {
 8001e44:	f000 f95a 	bl	80020fc <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <m_wash+0x170>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1ad2      	subs	r2, r2, r3
 8001e50:	4b22      	ldr	r3, [pc, #136]	; (8001edc <m_wash+0x17c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d22a      	bcs.n	8001eae <m_wash+0x14e>
            HAL_GPIO_WritePin(triac_gate_GPIO_Port, triac_gate_Pin, GPIO_PIN_SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2108      	movs	r1, #8
 8001e5c:	4820      	ldr	r0, [pc, #128]	; (8001ee0 <m_wash+0x180>)
 8001e5e:	f000 fe36 	bl	8002ace <HAL_GPIO_WritePin>
            if (HAL_GetTick() - change_direction_time > 3000) {
 8001e62:	f000 f94b 	bl	80020fc <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <m_wash+0x174>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d913      	bls.n	8001e9e <m_wash+0x13e>
                motor_dir = !motor_dir;
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <m_wash+0x184>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf14      	ite	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	2300      	moveq	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f083 0301 	eor.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <m_wash+0x184>)
 8001e92:	701a      	strb	r2, [r3, #0]
                change_direction_time = HAL_GetTick();
 8001e94:	f000 f932 	bl	80020fc <HAL_GetTick>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <m_wash+0x174>)
 8001e9c:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, motor_dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <m_wash+0x184>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	480e      	ldr	r0, [pc, #56]	; (8001ee0 <m_wash+0x180>)
 8001ea8:	f000 fe11 	bl	8002ace <HAL_GPIO_WritePin>
}
 8001eac:	e00a      	b.n	8001ec4 <m_wash+0x164>
            HAL_GPIO_WritePin(triac_gate_GPIO_Port, triac_gate_Pin, GPIO_PIN_RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2108      	movs	r1, #8
 8001eb2:	480b      	ldr	r0, [pc, #44]	; (8001ee0 <m_wash+0x180>)
 8001eb4:	f000 fe0b 	bl	8002ace <HAL_GPIO_WritePin>
            firstRun_wash = true; //reset bit
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <m_wash+0x16c>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
            runningFunc = &m_rinse_and_drain; //giat xong, chuyen sang xa
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <m_wash+0x188>)
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <m_wash+0x18c>)
 8001ec2:	601a      	str	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000001c 	.word	0x2000001c
 8001ed0:	20000254 	.word	0x20000254
 8001ed4:	20000258 	.word	0x20000258
 8001ed8:	20000244 	.word	0x20000244
 8001edc:	20000248 	.word	0x20000248
 8001ee0:	40010c00 	.word	0x40010c00
 8001ee4:	2000025c 	.word	0x2000025c
 8001ee8:	20000250 	.word	0x20000250
 8001eec:	08001ef1 	.word	0x08001ef1

08001ef0 <m_rinse_and_drain>:

void m_rinse_and_drain( void ) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
    // sprintf(data, "rnd:%d-  %d         ", m_current_water_level, rinse_times);
    // lcd_goto_XY(1, 0);
    // lcd_send_string(data);
    // lcd_goto_XY(2, 0);
    // lcd_send_string("rinse nad drain ");
    if (m_current_water_level >= 10) {
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <m_rinse_and_drain+0x70>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b09      	cmp	r3, #9
 8001efc:	d90b      	bls.n	8001f16 <m_rinse_and_drain+0x26>
        HAL_GPIO_WritePin(drain_gate_GPIO_Port, drain_gate_Pin, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	2110      	movs	r1, #16
 8001f02:	4818      	ldr	r0, [pc, #96]	; (8001f64 <m_rinse_and_drain+0x74>)
 8001f04:	f000 fde3 	bl	8002ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f0e:	4816      	ldr	r0, [pc, #88]	; (8001f68 <m_rinse_and_drain+0x78>)
 8001f10:	f000 fddd 	bl	8002ace <HAL_GPIO_WritePin>
            rinse_times = 0;
            runningFunc = &m_spin;
        }
        
    }
}
 8001f14:	e020      	b.n	8001f58 <m_rinse_and_drain+0x68>
        HAL_GPIO_WritePin(drain_gate_GPIO_Port, drain_gate_Pin, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2110      	movs	r1, #16
 8001f1a:	4812      	ldr	r0, [pc, #72]	; (8001f64 <m_rinse_and_drain+0x74>)
 8001f1c:	f000 fdd7 	bl	8002ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f26:	4810      	ldr	r0, [pc, #64]	; (8001f68 <m_rinse_and_drain+0x78>)
 8001f28:	f000 fdd1 	bl	8002ace <HAL_GPIO_WritePin>
        rinse_times++;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <m_rinse_and_drain+0x7c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <m_rinse_and_drain+0x7c>)
 8001f36:	701a      	strb	r2, [r3, #0]
        if (rinse_times != m_mode_select[2]) {
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <m_rinse_and_drain+0x80>)
 8001f3a:	789a      	ldrb	r2, [r3, #2]
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <m_rinse_and_drain+0x7c>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d003      	beq.n	8001f4c <m_rinse_and_drain+0x5c>
            runningFunc = &m_fillWater;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <m_rinse_and_drain+0x84>)
 8001f46:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <m_rinse_and_drain+0x88>)
 8001f48:	601a      	str	r2, [r3, #0]
}
 8001f4a:	e005      	b.n	8001f58 <m_rinse_and_drain+0x68>
            rinse_times = 0;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <m_rinse_and_drain+0x7c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
            runningFunc = &m_spin;
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <m_rinse_and_drain+0x84>)
 8001f54:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <m_rinse_and_drain+0x8c>)
 8001f56:	601a      	str	r2, [r3, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000247 	.word	0x20000247
 8001f64:	40010c00 	.word	0x40010c00
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	2000025d 	.word	0x2000025d
 8001f70:	20000244 	.word	0x20000244
 8001f74:	20000250 	.word	0x20000250
 8001f78:	08001cc9 	.word	0x08001cc9
 8001f7c:	08001f81 	.word	0x08001f81

08001f80 <m_spin>:

void m_spin( void ) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
    /*
    * Ham chi xa, quay dong co max 10s
    */
    static bool firstRun_spin = true;
    static uint32_t time_spin;
    if ( firstRun_spin ) {
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <m_spin+0x68>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <m_spin+0x1c>
        time_spin = HAL_GetTick(); // thoi gian bat dau quay
 8001f8c:	f000 f8b6 	bl	80020fc <HAL_GetTick>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4a16      	ldr	r2, [pc, #88]	; (8001fec <m_spin+0x6c>)
 8001f94:	6013      	str	r3, [r2, #0]
        firstRun_spin = false;
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <m_spin+0x68>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
    // lcd_goto_XY(1, 0);
    // lcd_send_string(data);
    // lcd_goto_XY(2, 0);
    // lcd_send_string(wash_done? "spuin         ":"spinning        ");

    if (HAL_GetTick() - time_spin < 10000) {
 8001f9c:	f000 f8ae 	bl	80020fc <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <m_spin+0x6c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d80f      	bhi.n	8001fd0 <m_spin+0x50>
        HAL_GPIO_WritePin(drain_gate_GPIO_Port, drain_gate_Pin, GPIO_PIN_SET);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2110      	movs	r1, #16
 8001fb4:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <m_spin+0x70>)
 8001fb6:	f000 fd8a 	bl	8002ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(triac_gate_GPIO_Port, triac_gate_Pin, GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2108      	movs	r1, #8
 8001fbe:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <m_spin+0x70>)
 8001fc0:	f000 fd85 	bl	8002ace <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_SET);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2120      	movs	r1, #32
 8001fc8:	4809      	ldr	r0, [pc, #36]	; (8001ff0 <m_spin+0x70>)
 8001fca:	f000 fd80 	bl	8002ace <HAL_GPIO_WritePin>
    } else {
        wash_done = true;
        firstRun_spin = true; //reset bit
        runningFunc = &start_procedure; //return to start function
    }
}
 8001fce:	e008      	b.n	8001fe2 <m_spin+0x62>
        wash_done = true;
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <m_spin+0x74>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
        firstRun_spin = true; //reset bit
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <m_spin+0x68>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
        runningFunc = &start_procedure; //return to start function
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <m_spin+0x78>)
 8001fde:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <m_spin+0x7c>)
 8001fe0:	601a      	str	r2, [r3, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2000001d 	.word	0x2000001d
 8001fec:	20000260 	.word	0x20000260
 8001ff0:	40010c00 	.word	0x40010c00
 8001ff4:	2000024d 	.word	0x2000024d
 8001ff8:	20000250 	.word	0x20000250
 8001ffc:	08001ca9 	.word	0x08001ca9

08002000 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002000:	f7ff fdd6 	bl	8001bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002004:	480b      	ldr	r0, [pc, #44]	; (8002034 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002006:	490c      	ldr	r1, [pc, #48]	; (8002038 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002008:	4a0c      	ldr	r2, [pc, #48]	; (800203c <LoopFillZerobss+0x16>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800201c:	4c09      	ldr	r4, [pc, #36]	; (8002044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800202a:	f003 fd41 	bl	8005ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800202e:	f7fe ff63 	bl	8000ef8 <main>
  bx lr
 8002032:	4770      	bx	lr
  ldr r0, =_sdata
 8002034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002038:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800203c:	08006640 	.word	0x08006640
  ldr r2, =_sbss
 8002040:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002044:	20000278 	.word	0x20000278

08002048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC1_2_IRQHandler>
	...

0800204c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_Init+0x28>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_Init+0x28>)
 8002056:	f043 0310 	orr.w	r3, r3, #16
 800205a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205c:	2003      	movs	r0, #3
 800205e:	f000 fb59 	bl	8002714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002062:	200f      	movs	r0, #15
 8002064:	f000 f808 	bl	8002078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002068:	f7ff fb9a 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40022000 	.word	0x40022000

08002078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x54>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_InitTick+0x58>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f000 fb71 	bl	800277e <HAL_SYSTICK_Config>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00e      	b.n	80020c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b0f      	cmp	r3, #15
 80020aa:	d80a      	bhi.n	80020c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ac:	2200      	movs	r2, #0
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f000 fb39 	bl	800272a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b8:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <HAL_InitTick+0x5c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000018 	.word	0x20000018
 80020d0:	20000024 	.word	0x20000024
 80020d4:	20000020 	.word	0x20000020

080020d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_IncTick+0x1c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_IncTick+0x20>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	4a03      	ldr	r2, [pc, #12]	; (80020f8 <HAL_IncTick+0x20>)
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	20000024 	.word	0x20000024
 80020f8:	20000264 	.word	0x20000264

080020fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002100:	4b02      	ldr	r3, [pc, #8]	; (800210c <HAL_GetTick+0x10>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	20000264 	.word	0x20000264

08002110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff fff0 	bl	80020fc <HAL_GetTick>
 800211c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d005      	beq.n	8002136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_Delay+0x44>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002136:	bf00      	nop
 8002138:	f7ff ffe0 	bl	80020fc <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	429a      	cmp	r2, r3
 8002146:	d8f7      	bhi.n	8002138 <HAL_Delay+0x28>
  {
  }
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000024 	.word	0x20000024

08002158 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0be      	b.n	80022f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fb34 	bl	8001804 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f9ab 	bl	80024f8 <ADC_ConversionStop_Disable>
 80021a2:	4603      	mov	r3, r0
 80021a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 8099 	bne.w	80022e6 <HAL_ADC_Init+0x18e>
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 8095 	bne.w	80022e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021c4:	f023 0302 	bic.w	r3, r3, #2
 80021c8:	f043 0202 	orr.w	r2, r3, #2
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7b1b      	ldrb	r3, [r3, #12]
 80021de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f0:	d003      	beq.n	80021fa <HAL_ADC_Init+0xa2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d102      	bne.n	8002200 <HAL_ADC_Init+0xa8>
 80021fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021fe:	e000      	b.n	8002202 <HAL_ADC_Init+0xaa>
 8002200:	2300      	movs	r3, #0
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7d1b      	ldrb	r3, [r3, #20]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d119      	bne.n	8002244 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7b1b      	ldrb	r3, [r3, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	3b01      	subs	r3, #1
 800221e:	035a      	lsls	r2, r3, #13
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	e00b      	b.n	8002244 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	430a      	orrs	r2, r1
 8002256:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	4b28      	ldr	r3, [pc, #160]	; (8002300 <HAL_ADC_Init+0x1a8>)
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	430b      	orrs	r3, r1
 800226a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002274:	d003      	beq.n	800227e <HAL_ADC_Init+0x126>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d104      	bne.n	8002288 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	3b01      	subs	r3, #1
 8002284:	051b      	lsls	r3, r3, #20
 8002286:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	430a      	orrs	r2, r1
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <HAL_ADC_Init+0x1ac>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d10b      	bne.n	80022c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022c2:	e018      	b.n	80022f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	f023 0312 	bic.w	r3, r3, #18
 80022cc:	f043 0210 	orr.w	r2, r3, #16
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022e4:	e007      	b.n	80022f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	f043 0210 	orr.w	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	ffe1f7fd 	.word	0xffe1f7fd
 8002304:	ff1f0efe 	.word	0xff1f0efe

08002308 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x20>
 8002324:	2302      	movs	r3, #2
 8002326:	e0dc      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x1da>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b06      	cmp	r3, #6
 8002336:	d81c      	bhi.n	8002372 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	3b05      	subs	r3, #5
 800234a:	221f      	movs	r2, #31
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	4019      	ands	r1, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	3b05      	subs	r3, #5
 8002364:	fa00 f203 	lsl.w	r2, r0, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	635a      	str	r2, [r3, #52]	; 0x34
 8002370:	e03c      	b.n	80023ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d81c      	bhi.n	80023b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b23      	subs	r3, #35	; 0x23
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	4019      	ands	r1, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	3b23      	subs	r3, #35	; 0x23
 80023a6:	fa00 f203 	lsl.w	r2, r0, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
 80023b2:	e01b      	b.n	80023ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	3b41      	subs	r3, #65	; 0x41
 80023c6:	221f      	movs	r2, #31
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	4019      	ands	r1, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	3b41      	subs	r3, #65	; 0x41
 80023e0:	fa00 f203 	lsl.w	r2, r0, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b09      	cmp	r3, #9
 80023f2:	d91c      	bls.n	800242e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68d9      	ldr	r1, [r3, #12]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	3b1e      	subs	r3, #30
 8002406:	2207      	movs	r2, #7
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	4019      	ands	r1, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6898      	ldr	r0, [r3, #8]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	3b1e      	subs	r3, #30
 8002420:	fa00 f203 	lsl.w	r2, r0, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	60da      	str	r2, [r3, #12]
 800242c:	e019      	b.n	8002462 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6919      	ldr	r1, [r3, #16]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	2207      	movs	r2, #7
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	4019      	ands	r1, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	6898      	ldr	r0, [r3, #8]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4413      	add	r3, r2
 8002456:	fa00 f203 	lsl.w	r2, r0, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b10      	cmp	r3, #16
 8002468:	d003      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800246e:	2b11      	cmp	r3, #17
 8002470:	d132      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <HAL_ADC_ConfigChannel+0x1e4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d125      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d126      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002498:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b10      	cmp	r3, #16
 80024a0:	d11a      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	0c9a      	lsrs	r2, r3, #18
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024b8:	e002      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	3b01      	subs	r3, #1
 80024be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f9      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x1b2>
 80024c6:	e007      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	f043 0220 	orr.w	r2, r3, #32
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	40012400 	.word	0x40012400
 80024f0:	20000018 	.word	0x20000018
 80024f4:	431bde83 	.word	0x431bde83

080024f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d12e      	bne.n	8002570 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002522:	f7ff fdeb 	bl	80020fc <HAL_GetTick>
 8002526:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002528:	e01b      	b.n	8002562 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800252a:	f7ff fde7 	bl	80020fc <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d914      	bls.n	8002562 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d10d      	bne.n	8002562 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	f043 0210 	orr.w	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e007      	b.n	8002572 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d0dc      	beq.n	800252a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ae:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <__NVIC_GetPriorityGrouping+0x18>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 0307 	and.w	r3, r3, #7
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db0b      	blt.n	800260a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4906      	ldr	r1, [pc, #24]	; (8002614 <__NVIC_EnableIRQ+0x34>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2001      	movs	r0, #1
 8002602:	fa00 f202 	lsl.w	r2, r0, r2
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100

08002618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	2b00      	cmp	r3, #0
 800262a:	db0a      	blt.n	8002642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	490c      	ldr	r1, [pc, #48]	; (8002664 <__NVIC_SetPriority+0x4c>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	440b      	add	r3, r1
 800263c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002640:	e00a      	b.n	8002658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4908      	ldr	r1, [pc, #32]	; (8002668 <__NVIC_SetPriority+0x50>)
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3b04      	subs	r3, #4
 8002650:	0112      	lsls	r2, r2, #4
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	440b      	add	r3, r1
 8002656:	761a      	strb	r2, [r3, #24]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000e100 	.word	0xe000e100
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f1c3 0307 	rsb	r3, r3, #7
 8002686:	2b04      	cmp	r3, #4
 8002688:	bf28      	it	cs
 800268a:	2304      	movcs	r3, #4
 800268c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3304      	adds	r3, #4
 8002692:	2b06      	cmp	r3, #6
 8002694:	d902      	bls.n	800269c <NVIC_EncodePriority+0x30>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3b03      	subs	r3, #3
 800269a:	e000      	b.n	800269e <NVIC_EncodePriority+0x32>
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	401a      	ands	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43d9      	mvns	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	4313      	orrs	r3, r2
         );
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3724      	adds	r7, #36	; 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e0:	d301      	bcc.n	80026e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00f      	b.n	8002706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <SysTick_Config+0x40>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ee:	210f      	movs	r1, #15
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	f7ff ff90 	bl	8002618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <SysTick_Config+0x40>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <SysTick_Config+0x40>)
 8002700:	2207      	movs	r2, #7
 8002702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	e000e010 	.word	0xe000e010

08002714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ff2d 	bl	800257c <__NVIC_SetPriorityGrouping>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800273c:	f7ff ff42 	bl	80025c4 <__NVIC_GetPriorityGrouping>
 8002740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7ff ff90 	bl	800266c <NVIC_EncodePriority>
 800274c:	4602      	mov	r2, r0
 800274e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff5f 	bl	8002618 <__NVIC_SetPriority>
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff35 	bl	80025e0 <__NVIC_EnableIRQ>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ffa2 	bl	80026d0 <SysTick_Config>
 800278c:	4603      	mov	r3, r0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002798:	b480      	push	{r7}
 800279a:	b08b      	sub	sp, #44	; 0x2c
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027a2:	2300      	movs	r3, #0
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027aa:	e169      	b.n	8002a80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027ac:	2201      	movs	r2, #1
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 8158 	bne.w	8002a7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4a9a      	ldr	r2, [pc, #616]	; (8002a38 <HAL_GPIO_Init+0x2a0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d05e      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 80027d4:	4a98      	ldr	r2, [pc, #608]	; (8002a38 <HAL_GPIO_Init+0x2a0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d875      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 80027da:	4a98      	ldr	r2, [pc, #608]	; (8002a3c <HAL_GPIO_Init+0x2a4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d058      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 80027e0:	4a96      	ldr	r2, [pc, #600]	; (8002a3c <HAL_GPIO_Init+0x2a4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d86f      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 80027e6:	4a96      	ldr	r2, [pc, #600]	; (8002a40 <HAL_GPIO_Init+0x2a8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d052      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 80027ec:	4a94      	ldr	r2, [pc, #592]	; (8002a40 <HAL_GPIO_Init+0x2a8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d869      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 80027f2:	4a94      	ldr	r2, [pc, #592]	; (8002a44 <HAL_GPIO_Init+0x2ac>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d04c      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 80027f8:	4a92      	ldr	r2, [pc, #584]	; (8002a44 <HAL_GPIO_Init+0x2ac>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d863      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 80027fe:	4a92      	ldr	r2, [pc, #584]	; (8002a48 <HAL_GPIO_Init+0x2b0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d046      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 8002804:	4a90      	ldr	r2, [pc, #576]	; (8002a48 <HAL_GPIO_Init+0x2b0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d85d      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 800280a:	2b12      	cmp	r3, #18
 800280c:	d82a      	bhi.n	8002864 <HAL_GPIO_Init+0xcc>
 800280e:	2b12      	cmp	r3, #18
 8002810:	d859      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 8002812:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <HAL_GPIO_Init+0x80>)
 8002814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002818:	08002893 	.word	0x08002893
 800281c:	0800286d 	.word	0x0800286d
 8002820:	0800287f 	.word	0x0800287f
 8002824:	080028c1 	.word	0x080028c1
 8002828:	080028c7 	.word	0x080028c7
 800282c:	080028c7 	.word	0x080028c7
 8002830:	080028c7 	.word	0x080028c7
 8002834:	080028c7 	.word	0x080028c7
 8002838:	080028c7 	.word	0x080028c7
 800283c:	080028c7 	.word	0x080028c7
 8002840:	080028c7 	.word	0x080028c7
 8002844:	080028c7 	.word	0x080028c7
 8002848:	080028c7 	.word	0x080028c7
 800284c:	080028c7 	.word	0x080028c7
 8002850:	080028c7 	.word	0x080028c7
 8002854:	080028c7 	.word	0x080028c7
 8002858:	080028c7 	.word	0x080028c7
 800285c:	08002875 	.word	0x08002875
 8002860:	08002889 	.word	0x08002889
 8002864:	4a79      	ldr	r2, [pc, #484]	; (8002a4c <HAL_GPIO_Init+0x2b4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800286a:	e02c      	b.n	80028c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	623b      	str	r3, [r7, #32]
          break;
 8002872:	e029      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	3304      	adds	r3, #4
 800287a:	623b      	str	r3, [r7, #32]
          break;
 800287c:	e024      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	3308      	adds	r3, #8
 8002884:	623b      	str	r3, [r7, #32]
          break;
 8002886:	e01f      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	330c      	adds	r3, #12
 800288e:	623b      	str	r3, [r7, #32]
          break;
 8002890:	e01a      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800289a:	2304      	movs	r3, #4
 800289c:	623b      	str	r3, [r7, #32]
          break;
 800289e:	e013      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a8:	2308      	movs	r3, #8
 80028aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	611a      	str	r2, [r3, #16]
          break;
 80028b2:	e009      	b.n	80028c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b4:	2308      	movs	r3, #8
 80028b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	615a      	str	r2, [r3, #20]
          break;
 80028be:	e003      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
          break;
 80028c4:	e000      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          break;
 80028c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2bff      	cmp	r3, #255	; 0xff
 80028cc:	d801      	bhi.n	80028d2 <HAL_GPIO_Init+0x13a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	e001      	b.n	80028d6 <HAL_GPIO_Init+0x13e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2bff      	cmp	r3, #255	; 0xff
 80028dc:	d802      	bhi.n	80028e4 <HAL_GPIO_Init+0x14c>
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	e002      	b.n	80028ea <HAL_GPIO_Init+0x152>
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	3b08      	subs	r3, #8
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	210f      	movs	r1, #15
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	fa01 f303 	lsl.w	r3, r1, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	401a      	ands	r2, r3
 80028fc:	6a39      	ldr	r1, [r7, #32]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	431a      	orrs	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80b1 	beq.w	8002a7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002918:	4b4d      	ldr	r3, [pc, #308]	; (8002a50 <HAL_GPIO_Init+0x2b8>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a4c      	ldr	r2, [pc, #304]	; (8002a50 <HAL_GPIO_Init+0x2b8>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b4a      	ldr	r3, [pc, #296]	; (8002a50 <HAL_GPIO_Init+0x2b8>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002930:	4a48      	ldr	r2, [pc, #288]	; (8002a54 <HAL_GPIO_Init+0x2bc>)
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	3302      	adds	r3, #2
 8002938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	220f      	movs	r2, #15
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4013      	ands	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a40      	ldr	r2, [pc, #256]	; (8002a58 <HAL_GPIO_Init+0x2c0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d013      	beq.n	8002984 <HAL_GPIO_Init+0x1ec>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3f      	ldr	r2, [pc, #252]	; (8002a5c <HAL_GPIO_Init+0x2c4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00d      	beq.n	8002980 <HAL_GPIO_Init+0x1e8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a3e      	ldr	r2, [pc, #248]	; (8002a60 <HAL_GPIO_Init+0x2c8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <HAL_GPIO_Init+0x1e4>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a3d      	ldr	r2, [pc, #244]	; (8002a64 <HAL_GPIO_Init+0x2cc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d101      	bne.n	8002978 <HAL_GPIO_Init+0x1e0>
 8002974:	2303      	movs	r3, #3
 8002976:	e006      	b.n	8002986 <HAL_GPIO_Init+0x1ee>
 8002978:	2304      	movs	r3, #4
 800297a:	e004      	b.n	8002986 <HAL_GPIO_Init+0x1ee>
 800297c:	2302      	movs	r3, #2
 800297e:	e002      	b.n	8002986 <HAL_GPIO_Init+0x1ee>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_GPIO_Init+0x1ee>
 8002984:	2300      	movs	r3, #0
 8002986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002988:	f002 0203 	and.w	r2, r2, #3
 800298c:	0092      	lsls	r2, r2, #2
 800298e:	4093      	lsls	r3, r2
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002996:	492f      	ldr	r1, [pc, #188]	; (8002a54 <HAL_GPIO_Init+0x2bc>)
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d006      	beq.n	80029be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029b0:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	492c      	ldr	r1, [pc, #176]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	608b      	str	r3, [r1, #8]
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029be:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	4928      	ldr	r1, [pc, #160]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d006      	beq.n	80029e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029d8:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	4922      	ldr	r1, [pc, #136]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60cb      	str	r3, [r1, #12]
 80029e4:	e006      	b.n	80029f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029e6:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	491e      	ldr	r1, [pc, #120]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d006      	beq.n	8002a0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	4918      	ldr	r1, [pc, #96]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	4914      	ldr	r1, [pc, #80]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d021      	beq.n	8002a6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	490e      	ldr	r1, [pc, #56]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]
 8002a34:	e021      	b.n	8002a7a <HAL_GPIO_Init+0x2e2>
 8002a36:	bf00      	nop
 8002a38:	10320000 	.word	0x10320000
 8002a3c:	10310000 	.word	0x10310000
 8002a40:	10220000 	.word	0x10220000
 8002a44:	10210000 	.word	0x10210000
 8002a48:	10120000 	.word	0x10120000
 8002a4c:	10110000 	.word	0x10110000
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40010800 	.word	0x40010800
 8002a5c:	40010c00 	.word	0x40010c00
 8002a60:	40011000 	.word	0x40011000
 8002a64:	40011400 	.word	0x40011400
 8002a68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_GPIO_Init+0x304>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	4909      	ldr	r1, [pc, #36]	; (8002a9c <HAL_GPIO_Init+0x304>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f47f ae8e 	bne.w	80027ac <HAL_GPIO_Init+0x14>
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	372c      	adds	r7, #44	; 0x2c
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	40010400 	.word	0x40010400

08002aa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e001      	b.n	8002ac2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	807b      	strh	r3, [r7, #2]
 8002ada:	4613      	mov	r3, r2
 8002adc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ade:	787b      	ldrb	r3, [r7, #1]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae4:	887a      	ldrh	r2, [r7, #2]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002aea:	e003      	b.n	8002af4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aec:	887b      	ldrh	r3, [r7, #2]
 8002aee:	041a      	lsls	r2, r3, #16
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	611a      	str	r2, [r3, #16]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d006      	beq.n	8002b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b16:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe f8d6 	bl	8000cd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40010400 	.word	0x40010400

08002b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e12b      	b.n	8002d9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe fe90 	bl	800187c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2224      	movs	r2, #36	; 0x24
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b94:	f001 feaa 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8002b98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4a81      	ldr	r2, [pc, #516]	; (8002da4 <HAL_I2C_Init+0x274>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d807      	bhi.n	8002bb4 <HAL_I2C_Init+0x84>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4a80      	ldr	r2, [pc, #512]	; (8002da8 <HAL_I2C_Init+0x278>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	bf94      	ite	ls
 8002bac:	2301      	movls	r3, #1
 8002bae:	2300      	movhi	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e006      	b.n	8002bc2 <HAL_I2C_Init+0x92>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a7d      	ldr	r2, [pc, #500]	; (8002dac <HAL_I2C_Init+0x27c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	bf94      	ite	ls
 8002bbc:	2301      	movls	r3, #1
 8002bbe:	2300      	movhi	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0e7      	b.n	8002d9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4a78      	ldr	r2, [pc, #480]	; (8002db0 <HAL_I2C_Init+0x280>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	0c9b      	lsrs	r3, r3, #18
 8002bd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4a6a      	ldr	r2, [pc, #424]	; (8002da4 <HAL_I2C_Init+0x274>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d802      	bhi.n	8002c04 <HAL_I2C_Init+0xd4>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	3301      	adds	r3, #1
 8002c02:	e009      	b.n	8002c18 <HAL_I2C_Init+0xe8>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	4a69      	ldr	r2, [pc, #420]	; (8002db4 <HAL_I2C_Init+0x284>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	3301      	adds	r3, #1
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	495c      	ldr	r1, [pc, #368]	; (8002da4 <HAL_I2C_Init+0x274>)
 8002c34:	428b      	cmp	r3, r1
 8002c36:	d819      	bhi.n	8002c6c <HAL_I2C_Init+0x13c>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1e59      	subs	r1, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c46:	1c59      	adds	r1, r3, #1
 8002c48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c4c:	400b      	ands	r3, r1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_I2C_Init+0x138>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1e59      	subs	r1, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c60:	3301      	adds	r3, #1
 8002c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c66:	e051      	b.n	8002d0c <HAL_I2C_Init+0x1dc>
 8002c68:	2304      	movs	r3, #4
 8002c6a:	e04f      	b.n	8002d0c <HAL_I2C_Init+0x1dc>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d111      	bne.n	8002c98 <HAL_I2C_Init+0x168>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1e58      	subs	r0, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6859      	ldr	r1, [r3, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	440b      	add	r3, r1
 8002c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf0c      	ite	eq
 8002c90:	2301      	moveq	r3, #1
 8002c92:	2300      	movne	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	e012      	b.n	8002cbe <HAL_I2C_Init+0x18e>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1e58      	subs	r0, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	0099      	lsls	r1, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_I2C_Init+0x196>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e022      	b.n	8002d0c <HAL_I2C_Init+0x1dc>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10e      	bne.n	8002cec <HAL_I2C_Init+0x1bc>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1e58      	subs	r0, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	440b      	add	r3, r1
 8002cdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cea:	e00f      	b.n	8002d0c <HAL_I2C_Init+0x1dc>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1e58      	subs	r0, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	0099      	lsls	r1, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d02:	3301      	adds	r3, #1
 8002d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	6809      	ldr	r1, [r1, #0]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69da      	ldr	r2, [r3, #28]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6911      	ldr	r1, [r2, #16]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68d2      	ldr	r2, [r2, #12]
 8002d46:	4311      	orrs	r1, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	000186a0 	.word	0x000186a0
 8002da8:	001e847f 	.word	0x001e847f
 8002dac:	003d08ff 	.word	0x003d08ff
 8002db0:	431bde83 	.word	0x431bde83
 8002db4:	10624dd3 	.word	0x10624dd3

08002db8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	817b      	strh	r3, [r7, #10]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dcc:	f7ff f996 	bl	80020fc <HAL_GetTick>
 8002dd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	f040 80e0 	bne.w	8002fa0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2319      	movs	r3, #25
 8002de6:	2201      	movs	r2, #1
 8002de8:	4970      	ldr	r1, [pc, #448]	; (8002fac <HAL_I2C_Master_Transmit+0x1f4>)
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 ff7e 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
 8002df8:	e0d3      	b.n	8002fa2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_I2C_Master_Transmit+0x50>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e0cc      	b.n	8002fa2 <HAL_I2C_Master_Transmit+0x1ea>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d007      	beq.n	8002e2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2221      	movs	r2, #33	; 0x21
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2210      	movs	r2, #16
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	893a      	ldrh	r2, [r7, #8]
 8002e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4a50      	ldr	r2, [pc, #320]	; (8002fb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e70:	8979      	ldrh	r1, [r7, #10]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	6a3a      	ldr	r2, [r7, #32]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fd38 	bl	80038ec <I2C_MasterRequestWrite>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e08d      	b.n	8002fa2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e9c:	e066      	b.n	8002f6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	6a39      	ldr	r1, [r7, #32]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f001 f83c 	bl	8003f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d107      	bne.n	8002ec6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e06b      	b.n	8002fa2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	781a      	ldrb	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d11b      	bne.n	8002f40 <HAL_I2C_Master_Transmit+0x188>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d017      	beq.n	8002f40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	6a39      	ldr	r1, [r7, #32]
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f001 f833 	bl	8003fb0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00d      	beq.n	8002f6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d107      	bne.n	8002f68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e01a      	b.n	8002fa2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d194      	bne.n	8002e9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	00100002 	.word	0x00100002
 8002fb0:	ffff0000 	.word	0xffff0000

08002fb4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	817b      	strh	r3, [r7, #10]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	813b      	strh	r3, [r7, #8]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fce:	f7ff f895 	bl	80020fc <HAL_GetTick>
 8002fd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	f040 80d9 	bne.w	8003194 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	2319      	movs	r3, #25
 8002fe8:	2201      	movs	r2, #1
 8002fea:	496d      	ldr	r1, [pc, #436]	; (80031a0 <HAL_I2C_Mem_Write+0x1ec>)
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fe7d 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e0cc      	b.n	8003196 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_I2C_Mem_Write+0x56>
 8003006:	2302      	movs	r3, #2
 8003008:	e0c5      	b.n	8003196 <HAL_I2C_Mem_Write+0x1e2>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d007      	beq.n	8003030 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800303e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2221      	movs	r2, #33	; 0x21
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2240      	movs	r2, #64	; 0x40
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a3a      	ldr	r2, [r7, #32]
 800305a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003060:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4a4d      	ldr	r2, [pc, #308]	; (80031a4 <HAL_I2C_Mem_Write+0x1f0>)
 8003070:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003072:	88f8      	ldrh	r0, [r7, #6]
 8003074:	893a      	ldrh	r2, [r7, #8]
 8003076:	8979      	ldrh	r1, [r7, #10]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	4603      	mov	r3, r0
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fcb4 	bl	80039f0 <I2C_RequestMemoryWrite>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d052      	beq.n	8003134 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e081      	b.n	8003196 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 ff42 	bl	8003f20 <I2C_WaitOnTXEFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d107      	bne.n	80030ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e06b      	b.n	8003196 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d11b      	bne.n	8003134 <HAL_I2C_Mem_Write+0x180>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	d017      	beq.n	8003134 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1aa      	bne.n	8003092 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 ff35 	bl	8003fb0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00d      	beq.n	8003168 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	2b04      	cmp	r3, #4
 8003152:	d107      	bne.n	8003164 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003162:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e016      	b.n	8003196 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	00100002 	.word	0x00100002
 80031a4:	ffff0000 	.word	0xffff0000

080031a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	; 0x30
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	4608      	mov	r0, r1
 80031b2:	4611      	mov	r1, r2
 80031b4:	461a      	mov	r2, r3
 80031b6:	4603      	mov	r3, r0
 80031b8:	817b      	strh	r3, [r7, #10]
 80031ba:	460b      	mov	r3, r1
 80031bc:	813b      	strh	r3, [r7, #8]
 80031be:	4613      	mov	r3, r2
 80031c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031c6:	f7fe ff99 	bl	80020fc <HAL_GetTick>
 80031ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	f040 8250 	bne.w	800367a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	2319      	movs	r3, #25
 80031e0:	2201      	movs	r2, #1
 80031e2:	4982      	ldr	r1, [pc, #520]	; (80033ec <HAL_I2C_Mem_Read+0x244>)
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 fd81 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
 80031f2:	e243      	b.n	800367c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_I2C_Mem_Read+0x5a>
 80031fe:	2302      	movs	r3, #2
 8003200:	e23c      	b.n	800367c <HAL_I2C_Mem_Read+0x4d4>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d007      	beq.n	8003228 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003236:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2222      	movs	r2, #34	; 0x22
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2240      	movs	r2, #64	; 0x40
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003252:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003258:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4a62      	ldr	r2, [pc, #392]	; (80033f0 <HAL_I2C_Mem_Read+0x248>)
 8003268:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800326a:	88f8      	ldrh	r0, [r7, #6]
 800326c:	893a      	ldrh	r2, [r7, #8]
 800326e:	8979      	ldrh	r1, [r7, #10]
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	4603      	mov	r3, r0
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fc4e 	bl	8003b1c <I2C_RequestMemoryRead>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e1f8      	b.n	800367c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328e:	2b00      	cmp	r3, #0
 8003290:	d113      	bne.n	80032ba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	e1cc      	b.n	8003654 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d11e      	bne.n	8003300 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032d2:	b672      	cpsid	i
}
 80032d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032fc:	b662      	cpsie	i
}
 80032fe:	e035      	b.n	800336c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	2b02      	cmp	r3, #2
 8003306:	d11e      	bne.n	8003346 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003316:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003318:	b672      	cpsid	i
}
 800331a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003340:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003342:	b662      	cpsie	i
}
 8003344:	e012      	b.n	800336c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003354:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800336c:	e172      	b.n	8003654 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	2b03      	cmp	r3, #3
 8003374:	f200 811f 	bhi.w	80035b6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	2b01      	cmp	r3, #1
 800337e:	d123      	bne.n	80033c8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003382:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fe5b 	bl	8004040 <I2C_WaitOnRXNEFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e173      	b.n	800367c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033c6:	e145      	b.n	8003654 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d152      	bne.n	8003476 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d6:	2200      	movs	r2, #0
 80033d8:	4906      	ldr	r1, [pc, #24]	; (80033f4 <HAL_I2C_Mem_Read+0x24c>)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fc86 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e148      	b.n	800367c <HAL_I2C_Mem_Read+0x4d4>
 80033ea:	bf00      	nop
 80033ec:	00100002 	.word	0x00100002
 80033f0:	ffff0000 	.word	0xffff0000
 80033f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033f8:	b672      	cpsid	i
}
 80033fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800343e:	b662      	cpsie	i
}
 8003440:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003474:	e0ee      	b.n	8003654 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	2200      	movs	r2, #0
 800347e:	4981      	ldr	r1, [pc, #516]	; (8003684 <HAL_I2C_Mem_Read+0x4dc>)
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 fc33 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0f5      	b.n	800367c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034a0:	b672      	cpsid	i
}
 80034a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034d6:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <HAL_I2C_Mem_Read+0x4e0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	08db      	lsrs	r3, r3, #3
 80034dc:	4a6b      	ldr	r2, [pc, #428]	; (800368c <HAL_I2C_Mem_Read+0x4e4>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	0a1a      	lsrs	r2, r3, #8
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00da      	lsls	r2, r3, #3
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d118      	bne.n	800352e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800351e:	b662      	cpsie	i
}
 8003520:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e0a6      	b.n	800367c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b04      	cmp	r3, #4
 800353a:	d1d9      	bne.n	80034f0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800357e:	b662      	cpsie	i
}
 8003580:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035b4:	e04e      	b.n	8003654 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fd40 	bl	8004040 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e058      	b.n	800367c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b04      	cmp	r3, #4
 8003608:	d124      	bne.n	8003654 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	2b03      	cmp	r3, #3
 8003610:	d107      	bne.n	8003622 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003620:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	f47f ae88 	bne.w	800336e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3728      	adds	r7, #40	; 0x28
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	00010004 	.word	0x00010004
 8003688:	20000018 	.word	0x20000018
 800368c:	14f8b589 	.word	0x14f8b589

08003690 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	; 0x28
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	460b      	mov	r3, r1
 800369e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80036a0:	f7fe fd2c 	bl	80020fc <HAL_GetTick>
 80036a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	f040 8111 	bne.w	80038da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	2319      	movs	r3, #25
 80036be:	2201      	movs	r2, #1
 80036c0:	4988      	ldr	r1, [pc, #544]	; (80038e4 <HAL_I2C_IsDeviceReady+0x254>)
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 fb12 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80036ce:	2302      	movs	r3, #2
 80036d0:	e104      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_I2C_IsDeviceReady+0x50>
 80036dc:	2302      	movs	r3, #2
 80036de:	e0fd      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x24c>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d007      	beq.n	8003706 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003714:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2224      	movs	r2, #36	; 0x24
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a70      	ldr	r2, [pc, #448]	; (80038e8 <HAL_I2C_IsDeviceReady+0x258>)
 8003728:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003738:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2200      	movs	r2, #0
 8003742:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 fad0 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003760:	d103      	bne.n	800376a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0b6      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800376e:	897b      	ldrh	r3, [r7, #10]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800377c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800377e:	f7fe fcbd 	bl	80020fc <HAL_GetTick>
 8003782:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b02      	cmp	r3, #2
 8003790:	bf0c      	ite	eq
 8003792:	2301      	moveq	r3, #1
 8003794:	2300      	movne	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037b2:	e025      	b.n	8003800 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fe fca2 	bl	80020fc <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <HAL_I2C_IsDeviceReady+0x13a>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	22a0      	movs	r2, #160	; 0xa0
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b02      	cmp	r3, #2
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2ba0      	cmp	r3, #160	; 0xa0
 800380a:	d005      	beq.n	8003818 <HAL_I2C_IsDeviceReady+0x188>
 800380c:	7dfb      	ldrb	r3, [r7, #23]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <HAL_I2C_IsDeviceReady+0x188>
 8003812:	7dbb      	ldrb	r3, [r7, #22]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0cd      	beq.n	80037b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d129      	bne.n	8003882 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2319      	movs	r3, #25
 800385a:	2201      	movs	r2, #1
 800385c:	4921      	ldr	r1, [pc, #132]	; (80038e4 <HAL_I2C_IsDeviceReady+0x254>)
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fa44 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e036      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	e02c      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003890:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800389a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2319      	movs	r3, #25
 80038a2:	2201      	movs	r2, #1
 80038a4:	490f      	ldr	r1, [pc, #60]	; (80038e4 <HAL_I2C_IsDeviceReady+0x254>)
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fa20 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e012      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	3301      	adds	r3, #1
 80038ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	f4ff af32 	bcc.w	800372a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
  }
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	00100002 	.word	0x00100002
 80038e8:	ffff0000 	.word	0xffff0000

080038ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	460b      	mov	r3, r1
 80038fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d006      	beq.n	8003916 <I2C_MasterRequestWrite+0x2a>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d003      	beq.n	8003916 <I2C_MasterRequestWrite+0x2a>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003914:	d108      	bne.n	8003928 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e00b      	b.n	8003940 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	2b12      	cmp	r3, #18
 800392e:	d107      	bne.n	8003940 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800393e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f9cd 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00d      	beq.n	8003974 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003966:	d103      	bne.n	8003970 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e035      	b.n	80039e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800397c:	d108      	bne.n	8003990 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800397e:	897b      	ldrh	r3, [r7, #10]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800398c:	611a      	str	r2, [r3, #16]
 800398e:	e01b      	b.n	80039c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003990:	897b      	ldrh	r3, [r7, #10]
 8003992:	11db      	asrs	r3, r3, #7
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f003 0306 	and.w	r3, r3, #6
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f063 030f 	orn	r3, r3, #15
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	490e      	ldr	r1, [pc, #56]	; (80039e8 <I2C_MasterRequestWrite+0xfc>)
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 fa16 	bl	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e010      	b.n	80039e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039be:	897b      	ldrh	r3, [r7, #10]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4907      	ldr	r1, [pc, #28]	; (80039ec <I2C_MasterRequestWrite+0x100>)
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fa06 	bl	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	00010008 	.word	0x00010008
 80039ec:	00010002 	.word	0x00010002

080039f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	461a      	mov	r2, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	817b      	strh	r3, [r7, #10]
 8003a02:	460b      	mov	r3, r1
 8003a04:	813b      	strh	r3, [r7, #8]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f960 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00d      	beq.n	8003a4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a40:	d103      	bne.n	8003a4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e05f      	b.n	8003b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a4e:	897b      	ldrh	r3, [r7, #10]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	6a3a      	ldr	r2, [r7, #32]
 8003a62:	492d      	ldr	r1, [pc, #180]	; (8003b18 <I2C_RequestMemoryWrite+0x128>)
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f9bb 	bl	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e04c      	b.n	8003b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8c:	6a39      	ldr	r1, [r7, #32]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fa46 	bl	8003f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d107      	bne.n	8003ab2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e02b      	b.n	8003b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d105      	bne.n	8003ac8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003abc:	893b      	ldrh	r3, [r7, #8]
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	611a      	str	r2, [r3, #16]
 8003ac6:	e021      	b.n	8003b0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ac8:	893b      	ldrh	r3, [r7, #8]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad8:	6a39      	ldr	r1, [r7, #32]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fa20 	bl	8003f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d107      	bne.n	8003afe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e005      	b.n	8003b0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b02:	893b      	ldrh	r3, [r7, #8]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	00010002 	.word	0x00010002

08003b1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	4608      	mov	r0, r1
 8003b26:	4611      	mov	r1, r2
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	817b      	strh	r3, [r7, #10]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	813b      	strh	r3, [r7, #8]
 8003b32:	4613      	mov	r3, r2
 8003b34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f8c2 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00d      	beq.n	8003b8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7c:	d103      	bne.n	8003b86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0aa      	b.n	8003ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b8a:	897b      	ldrh	r3, [r7, #10]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	6a3a      	ldr	r2, [r7, #32]
 8003b9e:	4952      	ldr	r1, [pc, #328]	; (8003ce8 <I2C_RequestMemoryRead+0x1cc>)
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f91d 	bl	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e097      	b.n	8003ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc8:	6a39      	ldr	r1, [r7, #32]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f9a8 	bl	8003f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d107      	bne.n	8003bee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e076      	b.n	8003ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d105      	bne.n	8003c04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bf8:	893b      	ldrh	r3, [r7, #8]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	611a      	str	r2, [r3, #16]
 8003c02:	e021      	b.n	8003c48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c04:	893b      	ldrh	r3, [r7, #8]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	6a39      	ldr	r1, [r7, #32]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f982 	bl	8003f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d107      	bne.n	8003c3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e050      	b.n	8003ce0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c3e:	893b      	ldrh	r3, [r7, #8]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4a:	6a39      	ldr	r1, [r7, #32]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f967 	bl	8003f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00d      	beq.n	8003c74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d107      	bne.n	8003c70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e035      	b.n	8003ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f82b 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00d      	beq.n	8003cb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003caa:	d103      	bne.n	8003cb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e013      	b.n	8003ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cb8:	897b      	ldrh	r3, [r7, #10]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	6a3a      	ldr	r2, [r7, #32]
 8003ccc:	4906      	ldr	r1, [pc, #24]	; (8003ce8 <I2C_RequestMemoryRead+0x1cc>)
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f886 	bl	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	00010002 	.word	0x00010002

08003cec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cfc:	e048      	b.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d044      	beq.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d06:	f7fe f9f9 	bl	80020fc <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d302      	bcc.n	8003d1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d139      	bne.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	0c1b      	lsrs	r3, r3, #16
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10d      	bne.n	8003d42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	43da      	mvns	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4013      	ands	r3, r2
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	e00c      	b.n	8003d5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	43da      	mvns	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d116      	bne.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e023      	b.n	8003dd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d10d      	bne.n	8003db6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	43da      	mvns	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4013      	ands	r3, r2
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	e00c      	b.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d093      	beq.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dee:	e071      	b.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfe:	d123      	bne.n	8003e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f043 0204 	orr.w	r2, r3, #4
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e067      	b.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d041      	beq.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e50:	f7fe f954 	bl	80020fc <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d302      	bcc.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d136      	bne.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10c      	bne.n	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e00b      	b.n	8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	43da      	mvns	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e021      	b.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10c      	bne.n	8003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf14      	ite	ne
 8003ef0:	2301      	movne	r3, #1
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e00b      	b.n	8003f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	43da      	mvns	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4013      	ands	r3, r2
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf14      	ite	ne
 8003f0a:	2301      	movne	r3, #1
 8003f0c:	2300      	moveq	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f47f af6d 	bne.w	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f2c:	e034      	b.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f8e3 	bl	80040fa <I2C_IsAcknowledgeFailed>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e034      	b.n	8003fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d028      	beq.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f46:	f7fe f8d9 	bl	80020fc <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d302      	bcc.n	8003f5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d11d      	bne.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	2b80      	cmp	r3, #128	; 0x80
 8003f68:	d016      	beq.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f043 0220 	orr.w	r2, r3, #32
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e007      	b.n	8003fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa2:	2b80      	cmp	r3, #128	; 0x80
 8003fa4:	d1c3      	bne.n	8003f2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fbc:	e034      	b.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f89b 	bl	80040fa <I2C_IsAcknowledgeFailed>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e034      	b.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d028      	beq.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd6:	f7fe f891 	bl	80020fc <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d11d      	bne.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d016      	beq.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	f043 0220 	orr.w	r2, r3, #32
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e007      	b.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b04      	cmp	r3, #4
 8004034:	d1c3      	bne.n	8003fbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800404c:	e049      	b.n	80040e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b10      	cmp	r3, #16
 800405a:	d119      	bne.n	8004090 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0210 	mvn.w	r2, #16
 8004064:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e030      	b.n	80040f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004090:	f7fe f834 	bl	80020fc <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	429a      	cmp	r2, r3
 800409e:	d302      	bcc.n	80040a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d11d      	bne.n	80040e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b0:	2b40      	cmp	r3, #64	; 0x40
 80040b2:	d016      	beq.n	80040e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e007      	b.n	80040f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d1ae      	bne.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004110:	d11b      	bne.n	800414a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800411a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f043 0204 	orr.w	r2, r3, #4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr
	...

08004158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e272      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8087 	beq.w	8004286 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004178:	4b92      	ldr	r3, [pc, #584]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b04      	cmp	r3, #4
 8004182:	d00c      	beq.n	800419e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004184:	4b8f      	ldr	r3, [pc, #572]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 030c 	and.w	r3, r3, #12
 800418c:	2b08      	cmp	r3, #8
 800418e:	d112      	bne.n	80041b6 <HAL_RCC_OscConfig+0x5e>
 8004190:	4b8c      	ldr	r3, [pc, #560]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419c:	d10b      	bne.n	80041b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800419e:	4b89      	ldr	r3, [pc, #548]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d06c      	beq.n	8004284 <HAL_RCC_OscConfig+0x12c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d168      	bne.n	8004284 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e24c      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041be:	d106      	bne.n	80041ce <HAL_RCC_OscConfig+0x76>
 80041c0:	4b80      	ldr	r3, [pc, #512]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a7f      	ldr	r2, [pc, #508]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 80041c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	e02e      	b.n	800422c <HAL_RCC_OscConfig+0xd4>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x98>
 80041d6:	4b7b      	ldr	r3, [pc, #492]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a7a      	ldr	r2, [pc, #488]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	4b78      	ldr	r3, [pc, #480]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a77      	ldr	r2, [pc, #476]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 80041e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	e01d      	b.n	800422c <HAL_RCC_OscConfig+0xd4>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041f8:	d10c      	bne.n	8004214 <HAL_RCC_OscConfig+0xbc>
 80041fa:	4b72      	ldr	r3, [pc, #456]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a71      	ldr	r2, [pc, #452]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 8004200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	4b6f      	ldr	r3, [pc, #444]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a6e      	ldr	r2, [pc, #440]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 800420c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	e00b      	b.n	800422c <HAL_RCC_OscConfig+0xd4>
 8004214:	4b6b      	ldr	r3, [pc, #428]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a6a      	ldr	r2, [pc, #424]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 800421a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	4b68      	ldr	r3, [pc, #416]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a67      	ldr	r2, [pc, #412]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 8004226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800422a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d013      	beq.n	800425c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004234:	f7fd ff62 	bl	80020fc <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800423c:	f7fd ff5e 	bl	80020fc <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b64      	cmp	r3, #100	; 0x64
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e200      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424e:	4b5d      	ldr	r3, [pc, #372]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0xe4>
 800425a:	e014      	b.n	8004286 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425c:	f7fd ff4e 	bl	80020fc <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004264:	f7fd ff4a 	bl	80020fc <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b64      	cmp	r3, #100	; 0x64
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e1ec      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004276:	4b53      	ldr	r3, [pc, #332]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x10c>
 8004282:	e000      	b.n	8004286 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d063      	beq.n	800435a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004292:	4b4c      	ldr	r3, [pc, #304]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00b      	beq.n	80042b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800429e:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d11c      	bne.n	80042e4 <HAL_RCC_OscConfig+0x18c>
 80042aa:	4b46      	ldr	r3, [pc, #280]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d116      	bne.n	80042e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042b6:	4b43      	ldr	r3, [pc, #268]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <HAL_RCC_OscConfig+0x176>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d001      	beq.n	80042ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e1c0      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ce:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4939      	ldr	r1, [pc, #228]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e2:	e03a      	b.n	800435a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d020      	beq.n	800432e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ec:	4b36      	ldr	r3, [pc, #216]	; (80043c8 <HAL_RCC_OscConfig+0x270>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f2:	f7fd ff03 	bl	80020fc <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042fa:	f7fd feff 	bl	80020fc <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e1a1      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430c:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004318:	4b2a      	ldr	r3, [pc, #168]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4927      	ldr	r1, [pc, #156]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 8004328:	4313      	orrs	r3, r2
 800432a:	600b      	str	r3, [r1, #0]
 800432c:	e015      	b.n	800435a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800432e:	4b26      	ldr	r3, [pc, #152]	; (80043c8 <HAL_RCC_OscConfig+0x270>)
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fd fee2 	bl	80020fc <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433c:	f7fd fede 	bl	80020fc <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e180      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434e:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d03a      	beq.n	80043dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d019      	beq.n	80043a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800436e:	4b17      	ldr	r3, [pc, #92]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 8004370:	2201      	movs	r2, #1
 8004372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004374:	f7fd fec2 	bl	80020fc <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800437c:	f7fd febe 	bl	80020fc <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e160      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <HAL_RCC_OscConfig+0x26c>)
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800439a:	2001      	movs	r0, #1
 800439c:	f000 faba 	bl	8004914 <RCC_Delay>
 80043a0:	e01c      	b.n	80043dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a2:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a8:	f7fd fea8 	bl	80020fc <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ae:	e00f      	b.n	80043d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b0:	f7fd fea4 	bl	80020fc <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d908      	bls.n	80043d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e146      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	42420000 	.word	0x42420000
 80043cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	4b92      	ldr	r3, [pc, #584]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e9      	bne.n	80043b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80a6 	beq.w	8004536 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ee:	4b8b      	ldr	r3, [pc, #556]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10d      	bne.n	8004416 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	4b88      	ldr	r3, [pc, #544]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	4a87      	ldr	r2, [pc, #540]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 8004400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004404:	61d3      	str	r3, [r2, #28]
 8004406:	4b85      	ldr	r3, [pc, #532]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004416:	4b82      	ldr	r3, [pc, #520]	; (8004620 <HAL_RCC_OscConfig+0x4c8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d118      	bne.n	8004454 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004422:	4b7f      	ldr	r3, [pc, #508]	; (8004620 <HAL_RCC_OscConfig+0x4c8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a7e      	ldr	r2, [pc, #504]	; (8004620 <HAL_RCC_OscConfig+0x4c8>)
 8004428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800442e:	f7fd fe65 	bl	80020fc <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004436:	f7fd fe61 	bl	80020fc <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b64      	cmp	r3, #100	; 0x64
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e103      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004448:	4b75      	ldr	r3, [pc, #468]	; (8004620 <HAL_RCC_OscConfig+0x4c8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d106      	bne.n	800446a <HAL_RCC_OscConfig+0x312>
 800445c:	4b6f      	ldr	r3, [pc, #444]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	4a6e      	ldr	r2, [pc, #440]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	6213      	str	r3, [r2, #32]
 8004468:	e02d      	b.n	80044c6 <HAL_RCC_OscConfig+0x36e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10c      	bne.n	800448c <HAL_RCC_OscConfig+0x334>
 8004472:	4b6a      	ldr	r3, [pc, #424]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	4a69      	ldr	r2, [pc, #420]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	6213      	str	r3, [r2, #32]
 800447e:	4b67      	ldr	r3, [pc, #412]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	4a66      	ldr	r2, [pc, #408]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	6213      	str	r3, [r2, #32]
 800448a:	e01c      	b.n	80044c6 <HAL_RCC_OscConfig+0x36e>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b05      	cmp	r3, #5
 8004492:	d10c      	bne.n	80044ae <HAL_RCC_OscConfig+0x356>
 8004494:	4b61      	ldr	r3, [pc, #388]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	4a60      	ldr	r2, [pc, #384]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 800449a:	f043 0304 	orr.w	r3, r3, #4
 800449e:	6213      	str	r3, [r2, #32]
 80044a0:	4b5e      	ldr	r3, [pc, #376]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4a5d      	ldr	r2, [pc, #372]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6213      	str	r3, [r2, #32]
 80044ac:	e00b      	b.n	80044c6 <HAL_RCC_OscConfig+0x36e>
 80044ae:	4b5b      	ldr	r3, [pc, #364]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	4a5a      	ldr	r2, [pc, #360]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	6213      	str	r3, [r2, #32]
 80044ba:	4b58      	ldr	r3, [pc, #352]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	4a57      	ldr	r2, [pc, #348]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 80044c0:	f023 0304 	bic.w	r3, r3, #4
 80044c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d015      	beq.n	80044fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ce:	f7fd fe15 	bl	80020fc <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	e00a      	b.n	80044ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d6:	f7fd fe11 	bl	80020fc <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e0b1      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ec:	4b4b      	ldr	r3, [pc, #300]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ee      	beq.n	80044d6 <HAL_RCC_OscConfig+0x37e>
 80044f8:	e014      	b.n	8004524 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fa:	f7fd fdff 	bl	80020fc <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004500:	e00a      	b.n	8004518 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7fd fdfb 	bl	80020fc <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e09b      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004518:	4b40      	ldr	r3, [pc, #256]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1ee      	bne.n	8004502 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004524:	7dfb      	ldrb	r3, [r7, #23]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d105      	bne.n	8004536 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452a:	4b3c      	ldr	r3, [pc, #240]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	4a3b      	ldr	r2, [pc, #236]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 8004530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004534:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 8087 	beq.w	800464e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004540:	4b36      	ldr	r3, [pc, #216]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 030c 	and.w	r3, r3, #12
 8004548:	2b08      	cmp	r3, #8
 800454a:	d061      	beq.n	8004610 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d146      	bne.n	80045e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004554:	4b33      	ldr	r3, [pc, #204]	; (8004624 <HAL_RCC_OscConfig+0x4cc>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455a:	f7fd fdcf 	bl	80020fc <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004562:	f7fd fdcb 	bl	80020fc <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e06d      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004574:	4b29      	ldr	r3, [pc, #164]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f0      	bne.n	8004562 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004588:	d108      	bne.n	800459c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	4921      	ldr	r1, [pc, #132]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800459c:	4b1f      	ldr	r3, [pc, #124]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a19      	ldr	r1, [r3, #32]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	430b      	orrs	r3, r1
 80045ae:	491b      	ldr	r1, [pc, #108]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b4:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <HAL_RCC_OscConfig+0x4cc>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ba:	f7fd fd9f 	bl	80020fc <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fd fd9b 	bl	80020fc <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e03d      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045d4:	4b11      	ldr	r3, [pc, #68]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x46a>
 80045e0:	e035      	b.n	800464e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <HAL_RCC_OscConfig+0x4cc>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e8:	f7fd fd88 	bl	80020fc <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fd fd84 	bl	80020fc <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e026      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <HAL_RCC_OscConfig+0x4c4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x498>
 800460e:	e01e      	b.n	800464e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d107      	bne.n	8004628 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e019      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
 800461c:	40021000 	.word	0x40021000
 8004620:	40007000 	.word	0x40007000
 8004624:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_RCC_OscConfig+0x500>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	429a      	cmp	r2, r3
 800463a:	d106      	bne.n	800464a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d001      	beq.n	800464e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000

0800465c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0d0      	b.n	8004812 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004670:	4b6a      	ldr	r3, [pc, #424]	; (800481c <HAL_RCC_ClockConfig+0x1c0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d910      	bls.n	80046a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b67      	ldr	r3, [pc, #412]	; (800481c <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 0207 	bic.w	r2, r3, #7
 8004686:	4965      	ldr	r1, [pc, #404]	; (800481c <HAL_RCC_ClockConfig+0x1c0>)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b63      	ldr	r3, [pc, #396]	; (800481c <HAL_RCC_ClockConfig+0x1c0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0b8      	b.n	8004812 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d020      	beq.n	80046ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046b8:	4b59      	ldr	r3, [pc, #356]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4a58      	ldr	r2, [pc, #352]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80046be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046d0:	4b53      	ldr	r3, [pc, #332]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	4a52      	ldr	r2, [pc, #328]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80046d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80046da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046dc:	4b50      	ldr	r3, [pc, #320]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	494d      	ldr	r1, [pc, #308]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d040      	beq.n	800477c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d107      	bne.n	8004712 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	4b47      	ldr	r3, [pc, #284]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d115      	bne.n	800473a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e07f      	b.n	8004812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d107      	bne.n	800472a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471a:	4b41      	ldr	r3, [pc, #260]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e073      	b.n	8004812 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472a:	4b3d      	ldr	r3, [pc, #244]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e06b      	b.n	8004812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800473a:	4b39      	ldr	r3, [pc, #228]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f023 0203 	bic.w	r2, r3, #3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4936      	ldr	r1, [pc, #216]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800474c:	f7fd fcd6 	bl	80020fc <HAL_GetTick>
 8004750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004752:	e00a      	b.n	800476a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004754:	f7fd fcd2 	bl	80020fc <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e053      	b.n	8004812 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476a:	4b2d      	ldr	r3, [pc, #180]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f003 020c 	and.w	r2, r3, #12
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	429a      	cmp	r2, r3
 800477a:	d1eb      	bne.n	8004754 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800477c:	4b27      	ldr	r3, [pc, #156]	; (800481c <HAL_RCC_ClockConfig+0x1c0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d210      	bcs.n	80047ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b24      	ldr	r3, [pc, #144]	; (800481c <HAL_RCC_ClockConfig+0x1c0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 0207 	bic.w	r2, r3, #7
 8004792:	4922      	ldr	r1, [pc, #136]	; (800481c <HAL_RCC_ClockConfig+0x1c0>)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b20      	ldr	r3, [pc, #128]	; (800481c <HAL_RCC_ClockConfig+0x1c0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e032      	b.n	8004812 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b8:	4b19      	ldr	r3, [pc, #100]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4916      	ldr	r1, [pc, #88]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047d6:	4b12      	ldr	r3, [pc, #72]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	490e      	ldr	r1, [pc, #56]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047ea:	f000 f821 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 80047ee:	4602      	mov	r2, r0
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	490a      	ldr	r1, [pc, #40]	; (8004824 <HAL_RCC_ClockConfig+0x1c8>)
 80047fc:	5ccb      	ldrb	r3, [r1, r3]
 80047fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004802:	4a09      	ldr	r2, [pc, #36]	; (8004828 <HAL_RCC_ClockConfig+0x1cc>)
 8004804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004806:	4b09      	ldr	r3, [pc, #36]	; (800482c <HAL_RCC_ClockConfig+0x1d0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7fd fc34 	bl	8002078 <HAL_InitTick>

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40022000 	.word	0x40022000
 8004820:	40021000 	.word	0x40021000
 8004824:	080065d8 	.word	0x080065d8
 8004828:	20000018 	.word	0x20000018
 800482c:	20000020 	.word	0x20000020

08004830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	2300      	movs	r3, #0
 8004844:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800484a:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b04      	cmp	r3, #4
 8004858:	d002      	beq.n	8004860 <HAL_RCC_GetSysClockFreq+0x30>
 800485a:	2b08      	cmp	r3, #8
 800485c:	d003      	beq.n	8004866 <HAL_RCC_GetSysClockFreq+0x36>
 800485e:	e027      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004860:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004862:	613b      	str	r3, [r7, #16]
      break;
 8004864:	e027      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	0c9b      	lsrs	r3, r3, #18
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	4a17      	ldr	r2, [pc, #92]	; (80048cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004870:	5cd3      	ldrb	r3, [r2, r3]
 8004872:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d010      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800487e:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	0c5b      	lsrs	r3, r3, #17
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	4a11      	ldr	r2, [pc, #68]	; (80048d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800488a:	5cd3      	ldrb	r3, [r2, r3]
 800488c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a0d      	ldr	r2, [pc, #52]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004892:	fb03 f202 	mul.w	r2, r3, r2
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	e004      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a0c      	ldr	r2, [pc, #48]	; (80048d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048a4:	fb02 f303 	mul.w	r3, r2, r3
 80048a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	613b      	str	r3, [r7, #16]
      break;
 80048ae:	e002      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80048b2:	613b      	str	r3, [r7, #16]
      break;
 80048b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048b6:	693b      	ldr	r3, [r7, #16]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000
 80048c8:	007a1200 	.word	0x007a1200
 80048cc:	080065f0 	.word	0x080065f0
 80048d0:	08006600 	.word	0x08006600
 80048d4:	003d0900 	.word	0x003d0900

080048d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048dc:	4b02      	ldr	r3, [pc, #8]	; (80048e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80048de:	681b      	ldr	r3, [r3, #0]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	20000018 	.word	0x20000018

080048ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048f0:	f7ff fff2 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4903      	ldr	r1, [pc, #12]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40021000 	.word	0x40021000
 8004910:	080065e8 	.word	0x080065e8

08004914 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800491c:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <RCC_Delay+0x34>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a0a      	ldr	r2, [pc, #40]	; (800494c <RCC_Delay+0x38>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	0a5b      	lsrs	r3, r3, #9
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004930:	bf00      	nop
  }
  while (Delay --);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1e5a      	subs	r2, r3, #1
 8004936:	60fa      	str	r2, [r7, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1f9      	bne.n	8004930 <RCC_Delay+0x1c>
}
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr
 8004948:	20000018 	.word	0x20000018
 800494c:	10624dd3 	.word	0x10624dd3

08004950 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d07d      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800496c:	2300      	movs	r3, #0
 800496e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004970:	4b4f      	ldr	r3, [pc, #316]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10d      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800497c:	4b4c      	ldr	r3, [pc, #304]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	4a4b      	ldr	r2, [pc, #300]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004986:	61d3      	str	r3, [r2, #28]
 8004988:	4b49      	ldr	r3, [pc, #292]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004994:	2301      	movs	r3, #1
 8004996:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004998:	4b46      	ldr	r3, [pc, #280]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d118      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a4:	4b43      	ldr	r3, [pc, #268]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a42      	ldr	r2, [pc, #264]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b0:	f7fd fba4 	bl	80020fc <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b6:	e008      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b8:	f7fd fba0 	bl	80020fc <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b64      	cmp	r3, #100	; 0x64
 80049c4:	d901      	bls.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e06d      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ca:	4b3a      	ldr	r3, [pc, #232]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049d6:	4b36      	ldr	r3, [pc, #216]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d02e      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d027      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049f4:	4b2e      	ldr	r3, [pc, #184]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049fe:	4b2e      	ldr	r3, [pc, #184]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a04:	4b2c      	ldr	r3, [pc, #176]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a0a:	4a29      	ldr	r2, [pc, #164]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d014      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1a:	f7fd fb6f 	bl	80020fc <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a20:	e00a      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a22:	f7fd fb6b 	bl	80020fc <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e036      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a38:	4b1d      	ldr	r3, [pc, #116]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0ee      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a44:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4917      	ldr	r1, [pc, #92]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d105      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5c:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	4a13      	ldr	r2, [pc, #76]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a74:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	490b      	ldr	r1, [pc, #44]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a92:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	4904      	ldr	r1, [pc, #16]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	42420440 	.word	0x42420440

08004abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e041      	b.n	8004b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fc ff46 	bl	8001974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f000 fcb2 	bl	8005464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d001      	beq.n	8004b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e03a      	b.n	8004bea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <HAL_TIM_Base_Start_IT+0x98>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00e      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x58>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9e:	d009      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x58>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x58>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <HAL_TIM_Base_Start_IT+0xa0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d111      	bne.n	8004bd8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b06      	cmp	r3, #6
 8004bc4:	d010      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0201 	orr.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd6:	e007      	b.n	8004be8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800

08004c00 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e041      	b.n	8004c96 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f839 	bl	8004c9e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	f000 fc10 	bl	8005464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_TIM_OC_Start_IT+0x28>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	bf14      	ite	ne
 8004cd0:	2301      	movne	r3, #1
 8004cd2:	2300      	moveq	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	e022      	b.n	8004d1e <HAL_TIM_OC_Start_IT+0x6e>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d109      	bne.n	8004cf2 <HAL_TIM_OC_Start_IT+0x42>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	bf14      	ite	ne
 8004cea:	2301      	movne	r3, #1
 8004cec:	2300      	moveq	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	e015      	b.n	8004d1e <HAL_TIM_OC_Start_IT+0x6e>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d109      	bne.n	8004d0c <HAL_TIM_OC_Start_IT+0x5c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e008      	b.n	8004d1e <HAL_TIM_OC_Start_IT+0x6e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	bf14      	ite	ne
 8004d18:	2301      	movne	r3, #1
 8004d1a:	2300      	moveq	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0a9      	b.n	8004e7a <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <HAL_TIM_OC_Start_IT+0x86>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d34:	e013      	b.n	8004d5e <HAL_TIM_OC_Start_IT+0xae>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d104      	bne.n	8004d46 <HAL_TIM_OC_Start_IT+0x96>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d44:	e00b      	b.n	8004d5e <HAL_TIM_OC_Start_IT+0xae>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d104      	bne.n	8004d56 <HAL_TIM_OC_Start_IT+0xa6>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d54:	e003      	b.n	8004d5e <HAL_TIM_OC_Start_IT+0xae>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b0c      	cmp	r3, #12
 8004d62:	d841      	bhi.n	8004de8 <HAL_TIM_OC_Start_IT+0x138>
 8004d64:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <HAL_TIM_OC_Start_IT+0xbc>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08004de9 	.word	0x08004de9
 8004d74:	08004de9 	.word	0x08004de9
 8004d78:	08004de9 	.word	0x08004de9
 8004d7c:	08004db3 	.word	0x08004db3
 8004d80:	08004de9 	.word	0x08004de9
 8004d84:	08004de9 	.word	0x08004de9
 8004d88:	08004de9 	.word	0x08004de9
 8004d8c:	08004dc5 	.word	0x08004dc5
 8004d90:	08004de9 	.word	0x08004de9
 8004d94:	08004de9 	.word	0x08004de9
 8004d98:	08004de9 	.word	0x08004de9
 8004d9c:	08004dd7 	.word	0x08004dd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0202 	orr.w	r2, r2, #2
 8004dae:	60da      	str	r2, [r3, #12]
      break;
 8004db0:	e01d      	b.n	8004dee <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0204 	orr.w	r2, r2, #4
 8004dc0:	60da      	str	r2, [r3, #12]
      break;
 8004dc2:	e014      	b.n	8004dee <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0208 	orr.w	r2, r2, #8
 8004dd2:	60da      	str	r2, [r3, #12]
      break;
 8004dd4:	e00b      	b.n	8004dee <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0210 	orr.w	r2, r2, #16
 8004de4:	60da      	str	r2, [r3, #12]
      break;
 8004de6:	e002      	b.n	8004dee <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      break;
 8004dec:	bf00      	nop
  }

  if (status == HAL_OK)
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d141      	bne.n	8004e78 <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	6839      	ldr	r1, [r7, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fdbd 	bl	800597c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <HAL_TIM_OC_Start_IT+0x1d4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d107      	bne.n	8004e1c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <HAL_TIM_OC_Start_IT+0x1d4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00e      	beq.n	8004e44 <HAL_TIM_OC_Start_IT+0x194>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2e:	d009      	beq.n	8004e44 <HAL_TIM_OC_Start_IT+0x194>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <HAL_TIM_OC_Start_IT+0x1d8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <HAL_TIM_OC_Start_IT+0x194>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a13      	ldr	r2, [pc, #76]	; (8004e8c <HAL_TIM_OC_Start_IT+0x1dc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d111      	bne.n	8004e68 <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b06      	cmp	r3, #6
 8004e54:	d010      	beq.n	8004e78 <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0201 	orr.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e66:	e007      	b.n	8004e78 <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0201 	orr.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	40000800 	.word	0x40000800

08004e90 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b0c      	cmp	r3, #12
 8004ea2:	d841      	bhi.n	8004f28 <HAL_TIM_OC_Stop_IT+0x98>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <HAL_TIM_OC_Stop_IT+0x1c>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004f29 	.word	0x08004f29
 8004eb4:	08004f29 	.word	0x08004f29
 8004eb8:	08004f29 	.word	0x08004f29
 8004ebc:	08004ef3 	.word	0x08004ef3
 8004ec0:	08004f29 	.word	0x08004f29
 8004ec4:	08004f29 	.word	0x08004f29
 8004ec8:	08004f29 	.word	0x08004f29
 8004ecc:	08004f05 	.word	0x08004f05
 8004ed0:	08004f29 	.word	0x08004f29
 8004ed4:	08004f29 	.word	0x08004f29
 8004ed8:	08004f29 	.word	0x08004f29
 8004edc:	08004f17 	.word	0x08004f17
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0202 	bic.w	r2, r2, #2
 8004eee:	60da      	str	r2, [r3, #12]
      break;
 8004ef0:	e01d      	b.n	8004f2e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0204 	bic.w	r2, r2, #4
 8004f00:	60da      	str	r2, [r3, #12]
      break;
 8004f02:	e014      	b.n	8004f2e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0208 	bic.w	r2, r2, #8
 8004f12:	60da      	str	r2, [r3, #12]
      break;
 8004f14:	e00b      	b.n	8004f2e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0210 	bic.w	r2, r2, #16
 8004f24:	60da      	str	r2, [r3, #12]
      break;
 8004f26:	e002      	b.n	8004f2e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d157      	bne.n	8004fe4 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	6839      	ldr	r1, [r7, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fd1d 	bl	800597c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a2a      	ldr	r2, [pc, #168]	; (8004ff0 <HAL_TIM_OC_Stop_IT+0x160>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d117      	bne.n	8004f7c <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a1a      	ldr	r2, [r3, #32]
 8004f52:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10f      	bne.n	8004f7c <HAL_TIM_OC_Stop_IT+0xec>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a1a      	ldr	r2, [r3, #32]
 8004f62:	f240 4344 	movw	r3, #1092	; 0x444
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d107      	bne.n	8004f7c <HAL_TIM_OC_Stop_IT+0xec>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f7a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a1a      	ldr	r2, [r3, #32]
 8004f82:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10f      	bne.n	8004fac <HAL_TIM_OC_Stop_IT+0x11c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6a1a      	ldr	r2, [r3, #32]
 8004f92:	f240 4344 	movw	r3, #1092	; 0x444
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d107      	bne.n	8004fac <HAL_TIM_OC_Stop_IT+0x11c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d104      	bne.n	8004fbc <HAL_TIM_OC_Stop_IT+0x12c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fba:	e013      	b.n	8004fe4 <HAL_TIM_OC_Stop_IT+0x154>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d104      	bne.n	8004fcc <HAL_TIM_OC_Stop_IT+0x13c>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fca:	e00b      	b.n	8004fe4 <HAL_TIM_OC_Stop_IT+0x154>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d104      	bne.n	8004fdc <HAL_TIM_OC_Stop_IT+0x14c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fda:	e003      	b.n	8004fe4 <HAL_TIM_OC_Stop_IT+0x154>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40012c00 	.word	0x40012c00

08004ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d020      	beq.n	8005058 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01b      	beq.n	8005058 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0202 	mvn.w	r2, #2
 8005028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f9f4 	bl	800542c <HAL_TIM_IC_CaptureCallback>
 8005044:	e005      	b.n	8005052 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f9e7 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f9f6 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d020      	beq.n	80050a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01b      	beq.n	80050a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0204 	mvn.w	r2, #4
 8005074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2202      	movs	r2, #2
 800507a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f9ce 	bl	800542c <HAL_TIM_IC_CaptureCallback>
 8005090:	e005      	b.n	800509e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f9c1 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f9d0 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d020      	beq.n	80050f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01b      	beq.n	80050f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0208 	mvn.w	r2, #8
 80050c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2204      	movs	r2, #4
 80050c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f9a8 	bl	800542c <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f99b 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f9aa 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d020      	beq.n	800513c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0210 	mvn.w	r2, #16
 800510c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2208      	movs	r2, #8
 8005112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f982 	bl	800542c <HAL_TIM_IC_CaptureCallback>
 8005128:	e005      	b.n	8005136 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f975 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f984 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00c      	beq.n	8005160 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0201 	mvn.w	r2, #1
 8005158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fb fe80 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800517c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fc87 	bl	8005a92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00c      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f954 	bl	8005450 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00c      	beq.n	80051cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0220 	mvn.w	r2, #32
 80051c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fc5a 	bl	8005a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e048      	b.n	8005284 <HAL_TIM_OC_ConfigChannel+0xb0>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b0c      	cmp	r3, #12
 80051fe:	d839      	bhi.n	8005274 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005200:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	0800523d 	.word	0x0800523d
 800520c:	08005275 	.word	0x08005275
 8005210:	08005275 	.word	0x08005275
 8005214:	08005275 	.word	0x08005275
 8005218:	0800524b 	.word	0x0800524b
 800521c:	08005275 	.word	0x08005275
 8005220:	08005275 	.word	0x08005275
 8005224:	08005275 	.word	0x08005275
 8005228:	08005259 	.word	0x08005259
 800522c:	08005275 	.word	0x08005275
 8005230:	08005275 	.word	0x08005275
 8005234:	08005275 	.word	0x08005275
 8005238:	08005267 	.word	0x08005267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f97c 	bl	8005540 <TIM_OC1_SetConfig>
      break;
 8005248:	e017      	b.n	800527a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	4618      	mov	r0, r3
 8005252:	f000 f9db 	bl	800560c <TIM_OC2_SetConfig>
      break;
 8005256:	e010      	b.n	800527a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fa3e 	bl	80056e0 <TIM_OC3_SetConfig>
      break;
 8005264:	e009      	b.n	800527a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	4618      	mov	r0, r3
 800526e:	f000 faa1 	bl	80057b4 <TIM_OC4_SetConfig>
      break;
 8005272:	e002      	b.n	800527a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	75fb      	strb	r3, [r7, #23]
      break;
 8005278:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005282:	7dfb      	ldrb	r3, [r7, #23]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_TIM_ConfigClockSource+0x1c>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e0b4      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x186>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e0:	d03e      	beq.n	8005360 <HAL_TIM_ConfigClockSource+0xd4>
 80052e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e6:	f200 8087 	bhi.w	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 80052ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ee:	f000 8086 	beq.w	80053fe <HAL_TIM_ConfigClockSource+0x172>
 80052f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f6:	d87f      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 80052f8:	2b70      	cmp	r3, #112	; 0x70
 80052fa:	d01a      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0xa6>
 80052fc:	2b70      	cmp	r3, #112	; 0x70
 80052fe:	d87b      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005300:	2b60      	cmp	r3, #96	; 0x60
 8005302:	d050      	beq.n	80053a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005304:	2b60      	cmp	r3, #96	; 0x60
 8005306:	d877      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005308:	2b50      	cmp	r3, #80	; 0x50
 800530a:	d03c      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0xfa>
 800530c:	2b50      	cmp	r3, #80	; 0x50
 800530e:	d873      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005310:	2b40      	cmp	r3, #64	; 0x40
 8005312:	d058      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d86f      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005318:	2b30      	cmp	r3, #48	; 0x30
 800531a:	d064      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x15a>
 800531c:	2b30      	cmp	r3, #48	; 0x30
 800531e:	d86b      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005320:	2b20      	cmp	r3, #32
 8005322:	d060      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005324:	2b20      	cmp	r3, #32
 8005326:	d867      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d05c      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x15a>
 800532c:	2b10      	cmp	r3, #16
 800532e:	d05a      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005330:	e062      	b.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6818      	ldr	r0, [r3, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	6899      	ldr	r1, [r3, #8]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f000 fafc 	bl	800593e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	609a      	str	r2, [r3, #8]
      break;
 800535e:	e04f      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	6899      	ldr	r1, [r3, #8]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f000 fae5 	bl	800593e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005382:	609a      	str	r2, [r3, #8]
      break;
 8005384:	e03c      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6859      	ldr	r1, [r3, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	461a      	mov	r2, r3
 8005394:	f000 fa5c 	bl	8005850 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2150      	movs	r1, #80	; 0x50
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fab3 	bl	800590a <TIM_ITRx_SetConfig>
      break;
 80053a4:	e02c      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6859      	ldr	r1, [r3, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f000 fa7a 	bl	80058ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2160      	movs	r1, #96	; 0x60
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 faa3 	bl	800590a <TIM_ITRx_SetConfig>
      break;
 80053c4:	e01c      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6859      	ldr	r1, [r3, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f000 fa3c 	bl	8005850 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2140      	movs	r1, #64	; 0x40
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fa93 	bl	800590a <TIM_ITRx_SetConfig>
      break;
 80053e4:	e00c      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f000 fa8a 	bl	800590a <TIM_ITRx_SetConfig>
      break;
 80053f6:	e003      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]
      break;
 80053fc:	e000      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005410:	7bfb      	ldrb	r3, [r7, #15]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr

0800542c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr

0800543e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr

08005450 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr
	...

08005464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a2f      	ldr	r2, [pc, #188]	; (8005534 <TIM_Base_SetConfig+0xd0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00b      	beq.n	8005494 <TIM_Base_SetConfig+0x30>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005482:	d007      	beq.n	8005494 <TIM_Base_SetConfig+0x30>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a2c      	ldr	r2, [pc, #176]	; (8005538 <TIM_Base_SetConfig+0xd4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_Base_SetConfig+0x30>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a2b      	ldr	r2, [pc, #172]	; (800553c <TIM_Base_SetConfig+0xd8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d108      	bne.n	80054a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a22      	ldr	r2, [pc, #136]	; (8005534 <TIM_Base_SetConfig+0xd0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <TIM_Base_SetConfig+0x62>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b4:	d007      	beq.n	80054c6 <TIM_Base_SetConfig+0x62>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1f      	ldr	r2, [pc, #124]	; (8005538 <TIM_Base_SetConfig+0xd4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d003      	beq.n	80054c6 <TIM_Base_SetConfig+0x62>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a1e      	ldr	r2, [pc, #120]	; (800553c <TIM_Base_SetConfig+0xd8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d108      	bne.n	80054d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a0d      	ldr	r2, [pc, #52]	; (8005534 <TIM_Base_SetConfig+0xd0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d103      	bne.n	800550c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f023 0201 	bic.w	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	611a      	str	r2, [r3, #16]
  }
}
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr
 8005534:	40012c00 	.word	0x40012c00
 8005538:	40000400 	.word	0x40000400
 800553c:	40000800 	.word	0x40000800

08005540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f023 0201 	bic.w	r2, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0303 	bic.w	r3, r3, #3
 8005576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f023 0302 	bic.w	r3, r3, #2
 8005588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <TIM_OC1_SetConfig+0xc8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d10c      	bne.n	80055b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f023 0308 	bic.w	r3, r3, #8
 80055a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f023 0304 	bic.w	r3, r3, #4
 80055b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a13      	ldr	r2, [pc, #76]	; (8005608 <TIM_OC1_SetConfig+0xc8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d111      	bne.n	80055e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	621a      	str	r2, [r3, #32]
}
 80055fc:	bf00      	nop
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40012c00 	.word	0x40012c00

0800560c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	f023 0210 	bic.w	r2, r3, #16
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	021b      	lsls	r3, r3, #8
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f023 0320 	bic.w	r3, r3, #32
 8005656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a1d      	ldr	r2, [pc, #116]	; (80056dc <TIM_OC2_SetConfig+0xd0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d10d      	bne.n	8005688 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005686:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a14      	ldr	r2, [pc, #80]	; (80056dc <TIM_OC2_SetConfig+0xd0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d113      	bne.n	80056b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800569e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr
 80056dc:	40012c00 	.word	0x40012c00

080056e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a1d      	ldr	r2, [pc, #116]	; (80057b0 <TIM_OC3_SetConfig+0xd0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d10d      	bne.n	800575a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005744:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <TIM_OC3_SetConfig+0xd0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d113      	bne.n	800578a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	621a      	str	r2, [r3, #32]
}
 80057a4:	bf00      	nop
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40012c00 	.word	0x40012c00

080057b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	031b      	lsls	r3, r3, #12
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a0f      	ldr	r2, [pc, #60]	; (800584c <TIM_OC4_SetConfig+0x98>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d109      	bne.n	8005828 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800581a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	019b      	lsls	r3, r3, #6
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr
 800584c:	40012c00 	.word	0x40012c00

08005850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f023 0201 	bic.w	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800587a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f023 030a 	bic.w	r3, r3, #10
 800588c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	621a      	str	r2, [r3, #32]
}
 80058a2:	bf00      	nop
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr

080058ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f023 0210 	bic.w	r2, r3, #16
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	031b      	lsls	r3, r3, #12
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	621a      	str	r2, [r3, #32]
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	bc80      	pop	{r7}
 8005908:	4770      	bx	lr

0800590a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800590a:	b480      	push	{r7}
 800590c:	b085      	sub	sp, #20
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	f043 0307 	orr.w	r3, r3, #7
 800592c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	609a      	str	r2, [r3, #8]
}
 8005934:	bf00      	nop
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr

0800593e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800593e:	b480      	push	{r7}
 8005940:	b087      	sub	sp, #28
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
 800594a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005958:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	021a      	lsls	r2, r3, #8
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	431a      	orrs	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	4313      	orrs	r3, r2
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	609a      	str	r2, [r3, #8]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	2201      	movs	r2, #1
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a1a      	ldr	r2, [r3, #32]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	43db      	mvns	r3, r3
 800599e:	401a      	ands	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1a      	ldr	r2, [r3, #32]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	fa01 f303 	lsl.w	r3, r1, r3
 80059b4:	431a      	orrs	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d8:	2302      	movs	r3, #2
 80059da:	e046      	b.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00e      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a28:	d009      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a12      	ldr	r2, [pc, #72]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d004      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a10      	ldr	r2, [pc, #64]	; (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d10c      	bne.n	8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bc80      	pop	{r7}
 8005a72:	4770      	bx	lr
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800

08005a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr

08005a92 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr

08005aa4 <__errno>:
 8005aa4:	4b01      	ldr	r3, [pc, #4]	; (8005aac <__errno+0x8>)
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	20000028 	.word	0x20000028

08005ab0 <__libc_init_array>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	2600      	movs	r6, #0
 8005ab4:	4d0c      	ldr	r5, [pc, #48]	; (8005ae8 <__libc_init_array+0x38>)
 8005ab6:	4c0d      	ldr	r4, [pc, #52]	; (8005aec <__libc_init_array+0x3c>)
 8005ab8:	1b64      	subs	r4, r4, r5
 8005aba:	10a4      	asrs	r4, r4, #2
 8005abc:	42a6      	cmp	r6, r4
 8005abe:	d109      	bne.n	8005ad4 <__libc_init_array+0x24>
 8005ac0:	f000 fc9c 	bl	80063fc <_init>
 8005ac4:	2600      	movs	r6, #0
 8005ac6:	4d0a      	ldr	r5, [pc, #40]	; (8005af0 <__libc_init_array+0x40>)
 8005ac8:	4c0a      	ldr	r4, [pc, #40]	; (8005af4 <__libc_init_array+0x44>)
 8005aca:	1b64      	subs	r4, r4, r5
 8005acc:	10a4      	asrs	r4, r4, #2
 8005ace:	42a6      	cmp	r6, r4
 8005ad0:	d105      	bne.n	8005ade <__libc_init_array+0x2e>
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad8:	4798      	blx	r3
 8005ada:	3601      	adds	r6, #1
 8005adc:	e7ee      	b.n	8005abc <__libc_init_array+0xc>
 8005ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae2:	4798      	blx	r3
 8005ae4:	3601      	adds	r6, #1
 8005ae6:	e7f2      	b.n	8005ace <__libc_init_array+0x1e>
 8005ae8:	08006638 	.word	0x08006638
 8005aec:	08006638 	.word	0x08006638
 8005af0:	08006638 	.word	0x08006638
 8005af4:	0800663c 	.word	0x0800663c

08005af8 <memset>:
 8005af8:	4603      	mov	r3, r0
 8005afa:	4402      	add	r2, r0
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d100      	bne.n	8005b02 <memset+0xa>
 8005b00:	4770      	bx	lr
 8005b02:	f803 1b01 	strb.w	r1, [r3], #1
 8005b06:	e7f9      	b.n	8005afc <memset+0x4>

08005b08 <siprintf>:
 8005b08:	b40e      	push	{r1, r2, r3}
 8005b0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b0e:	b500      	push	{lr}
 8005b10:	b09c      	sub	sp, #112	; 0x70
 8005b12:	ab1d      	add	r3, sp, #116	; 0x74
 8005b14:	9002      	str	r0, [sp, #8]
 8005b16:	9006      	str	r0, [sp, #24]
 8005b18:	9107      	str	r1, [sp, #28]
 8005b1a:	9104      	str	r1, [sp, #16]
 8005b1c:	4808      	ldr	r0, [pc, #32]	; (8005b40 <siprintf+0x38>)
 8005b1e:	4909      	ldr	r1, [pc, #36]	; (8005b44 <siprintf+0x3c>)
 8005b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b24:	9105      	str	r1, [sp, #20]
 8005b26:	6800      	ldr	r0, [r0, #0]
 8005b28:	a902      	add	r1, sp, #8
 8005b2a:	9301      	str	r3, [sp, #4]
 8005b2c:	f000 f868 	bl	8005c00 <_svfiprintf_r>
 8005b30:	2200      	movs	r2, #0
 8005b32:	9b02      	ldr	r3, [sp, #8]
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	b01c      	add	sp, #112	; 0x70
 8005b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b3c:	b003      	add	sp, #12
 8005b3e:	4770      	bx	lr
 8005b40:	20000028 	.word	0x20000028
 8005b44:	ffff0208 	.word	0xffff0208

08005b48 <__ssputs_r>:
 8005b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b4c:	688e      	ldr	r6, [r1, #8]
 8005b4e:	4682      	mov	sl, r0
 8005b50:	429e      	cmp	r6, r3
 8005b52:	460c      	mov	r4, r1
 8005b54:	4690      	mov	r8, r2
 8005b56:	461f      	mov	r7, r3
 8005b58:	d838      	bhi.n	8005bcc <__ssputs_r+0x84>
 8005b5a:	898a      	ldrh	r2, [r1, #12]
 8005b5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b60:	d032      	beq.n	8005bc8 <__ssputs_r+0x80>
 8005b62:	6825      	ldr	r5, [r4, #0]
 8005b64:	6909      	ldr	r1, [r1, #16]
 8005b66:	3301      	adds	r3, #1
 8005b68:	eba5 0901 	sub.w	r9, r5, r1
 8005b6c:	6965      	ldr	r5, [r4, #20]
 8005b6e:	444b      	add	r3, r9
 8005b70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b78:	106d      	asrs	r5, r5, #1
 8005b7a:	429d      	cmp	r5, r3
 8005b7c:	bf38      	it	cc
 8005b7e:	461d      	movcc	r5, r3
 8005b80:	0553      	lsls	r3, r2, #21
 8005b82:	d531      	bpl.n	8005be8 <__ssputs_r+0xa0>
 8005b84:	4629      	mov	r1, r5
 8005b86:	f000 fb6f 	bl	8006268 <_malloc_r>
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	b950      	cbnz	r0, 8005ba4 <__ssputs_r+0x5c>
 8005b8e:	230c      	movs	r3, #12
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	f8ca 3000 	str.w	r3, [sl]
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b9e:	81a3      	strh	r3, [r4, #12]
 8005ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba4:	464a      	mov	r2, r9
 8005ba6:	6921      	ldr	r1, [r4, #16]
 8005ba8:	f000 face 	bl	8006148 <memcpy>
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	6126      	str	r6, [r4, #16]
 8005bba:	444e      	add	r6, r9
 8005bbc:	6026      	str	r6, [r4, #0]
 8005bbe:	463e      	mov	r6, r7
 8005bc0:	6165      	str	r5, [r4, #20]
 8005bc2:	eba5 0509 	sub.w	r5, r5, r9
 8005bc6:	60a5      	str	r5, [r4, #8]
 8005bc8:	42be      	cmp	r6, r7
 8005bca:	d900      	bls.n	8005bce <__ssputs_r+0x86>
 8005bcc:	463e      	mov	r6, r7
 8005bce:	4632      	mov	r2, r6
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	6820      	ldr	r0, [r4, #0]
 8005bd4:	f000 fac6 	bl	8006164 <memmove>
 8005bd8:	68a3      	ldr	r3, [r4, #8]
 8005bda:	2000      	movs	r0, #0
 8005bdc:	1b9b      	subs	r3, r3, r6
 8005bde:	60a3      	str	r3, [r4, #8]
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	4433      	add	r3, r6
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	e7db      	b.n	8005ba0 <__ssputs_r+0x58>
 8005be8:	462a      	mov	r2, r5
 8005bea:	f000 fbb1 	bl	8006350 <_realloc_r>
 8005bee:	4606      	mov	r6, r0
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d1e1      	bne.n	8005bb8 <__ssputs_r+0x70>
 8005bf4:	4650      	mov	r0, sl
 8005bf6:	6921      	ldr	r1, [r4, #16]
 8005bf8:	f000 face 	bl	8006198 <_free_r>
 8005bfc:	e7c7      	b.n	8005b8e <__ssputs_r+0x46>
	...

08005c00 <_svfiprintf_r>:
 8005c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c04:	4698      	mov	r8, r3
 8005c06:	898b      	ldrh	r3, [r1, #12]
 8005c08:	4607      	mov	r7, r0
 8005c0a:	061b      	lsls	r3, r3, #24
 8005c0c:	460d      	mov	r5, r1
 8005c0e:	4614      	mov	r4, r2
 8005c10:	b09d      	sub	sp, #116	; 0x74
 8005c12:	d50e      	bpl.n	8005c32 <_svfiprintf_r+0x32>
 8005c14:	690b      	ldr	r3, [r1, #16]
 8005c16:	b963      	cbnz	r3, 8005c32 <_svfiprintf_r+0x32>
 8005c18:	2140      	movs	r1, #64	; 0x40
 8005c1a:	f000 fb25 	bl	8006268 <_malloc_r>
 8005c1e:	6028      	str	r0, [r5, #0]
 8005c20:	6128      	str	r0, [r5, #16]
 8005c22:	b920      	cbnz	r0, 8005c2e <_svfiprintf_r+0x2e>
 8005c24:	230c      	movs	r3, #12
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2c:	e0d1      	b.n	8005dd2 <_svfiprintf_r+0x1d2>
 8005c2e:	2340      	movs	r3, #64	; 0x40
 8005c30:	616b      	str	r3, [r5, #20]
 8005c32:	2300      	movs	r3, #0
 8005c34:	9309      	str	r3, [sp, #36]	; 0x24
 8005c36:	2320      	movs	r3, #32
 8005c38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c3c:	2330      	movs	r3, #48	; 0x30
 8005c3e:	f04f 0901 	mov.w	r9, #1
 8005c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005dec <_svfiprintf_r+0x1ec>
 8005c4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c4e:	4623      	mov	r3, r4
 8005c50:	469a      	mov	sl, r3
 8005c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c56:	b10a      	cbz	r2, 8005c5c <_svfiprintf_r+0x5c>
 8005c58:	2a25      	cmp	r2, #37	; 0x25
 8005c5a:	d1f9      	bne.n	8005c50 <_svfiprintf_r+0x50>
 8005c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8005c60:	d00b      	beq.n	8005c7a <_svfiprintf_r+0x7a>
 8005c62:	465b      	mov	r3, fp
 8005c64:	4622      	mov	r2, r4
 8005c66:	4629      	mov	r1, r5
 8005c68:	4638      	mov	r0, r7
 8005c6a:	f7ff ff6d 	bl	8005b48 <__ssputs_r>
 8005c6e:	3001      	adds	r0, #1
 8005c70:	f000 80aa 	beq.w	8005dc8 <_svfiprintf_r+0x1c8>
 8005c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c76:	445a      	add	r2, fp
 8005c78:	9209      	str	r2, [sp, #36]	; 0x24
 8005c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 80a2 	beq.w	8005dc8 <_svfiprintf_r+0x1c8>
 8005c84:	2300      	movs	r3, #0
 8005c86:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c8e:	f10a 0a01 	add.w	sl, sl, #1
 8005c92:	9304      	str	r3, [sp, #16]
 8005c94:	9307      	str	r3, [sp, #28]
 8005c96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c9a:	931a      	str	r3, [sp, #104]	; 0x68
 8005c9c:	4654      	mov	r4, sl
 8005c9e:	2205      	movs	r2, #5
 8005ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca4:	4851      	ldr	r0, [pc, #324]	; (8005dec <_svfiprintf_r+0x1ec>)
 8005ca6:	f000 fa41 	bl	800612c <memchr>
 8005caa:	9a04      	ldr	r2, [sp, #16]
 8005cac:	b9d8      	cbnz	r0, 8005ce6 <_svfiprintf_r+0xe6>
 8005cae:	06d0      	lsls	r0, r2, #27
 8005cb0:	bf44      	itt	mi
 8005cb2:	2320      	movmi	r3, #32
 8005cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cb8:	0711      	lsls	r1, r2, #28
 8005cba:	bf44      	itt	mi
 8005cbc:	232b      	movmi	r3, #43	; 0x2b
 8005cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc8:	d015      	beq.n	8005cf6 <_svfiprintf_r+0xf6>
 8005cca:	4654      	mov	r4, sl
 8005ccc:	2000      	movs	r0, #0
 8005cce:	f04f 0c0a 	mov.w	ip, #10
 8005cd2:	9a07      	ldr	r2, [sp, #28]
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cda:	3b30      	subs	r3, #48	; 0x30
 8005cdc:	2b09      	cmp	r3, #9
 8005cde:	d94e      	bls.n	8005d7e <_svfiprintf_r+0x17e>
 8005ce0:	b1b0      	cbz	r0, 8005d10 <_svfiprintf_r+0x110>
 8005ce2:	9207      	str	r2, [sp, #28]
 8005ce4:	e014      	b.n	8005d10 <_svfiprintf_r+0x110>
 8005ce6:	eba0 0308 	sub.w	r3, r0, r8
 8005cea:	fa09 f303 	lsl.w	r3, r9, r3
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	46a2      	mov	sl, r4
 8005cf2:	9304      	str	r3, [sp, #16]
 8005cf4:	e7d2      	b.n	8005c9c <_svfiprintf_r+0x9c>
 8005cf6:	9b03      	ldr	r3, [sp, #12]
 8005cf8:	1d19      	adds	r1, r3, #4
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	9103      	str	r1, [sp, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	bfbb      	ittet	lt
 8005d02:	425b      	neglt	r3, r3
 8005d04:	f042 0202 	orrlt.w	r2, r2, #2
 8005d08:	9307      	strge	r3, [sp, #28]
 8005d0a:	9307      	strlt	r3, [sp, #28]
 8005d0c:	bfb8      	it	lt
 8005d0e:	9204      	strlt	r2, [sp, #16]
 8005d10:	7823      	ldrb	r3, [r4, #0]
 8005d12:	2b2e      	cmp	r3, #46	; 0x2e
 8005d14:	d10c      	bne.n	8005d30 <_svfiprintf_r+0x130>
 8005d16:	7863      	ldrb	r3, [r4, #1]
 8005d18:	2b2a      	cmp	r3, #42	; 0x2a
 8005d1a:	d135      	bne.n	8005d88 <_svfiprintf_r+0x188>
 8005d1c:	9b03      	ldr	r3, [sp, #12]
 8005d1e:	3402      	adds	r4, #2
 8005d20:	1d1a      	adds	r2, r3, #4
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	9203      	str	r2, [sp, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	bfb8      	it	lt
 8005d2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d2e:	9305      	str	r3, [sp, #20]
 8005d30:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005df0 <_svfiprintf_r+0x1f0>
 8005d34:	2203      	movs	r2, #3
 8005d36:	4650      	mov	r0, sl
 8005d38:	7821      	ldrb	r1, [r4, #0]
 8005d3a:	f000 f9f7 	bl	800612c <memchr>
 8005d3e:	b140      	cbz	r0, 8005d52 <_svfiprintf_r+0x152>
 8005d40:	2340      	movs	r3, #64	; 0x40
 8005d42:	eba0 000a 	sub.w	r0, r0, sl
 8005d46:	fa03 f000 	lsl.w	r0, r3, r0
 8005d4a:	9b04      	ldr	r3, [sp, #16]
 8005d4c:	3401      	adds	r4, #1
 8005d4e:	4303      	orrs	r3, r0
 8005d50:	9304      	str	r3, [sp, #16]
 8005d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d56:	2206      	movs	r2, #6
 8005d58:	4826      	ldr	r0, [pc, #152]	; (8005df4 <_svfiprintf_r+0x1f4>)
 8005d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d5e:	f000 f9e5 	bl	800612c <memchr>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d038      	beq.n	8005dd8 <_svfiprintf_r+0x1d8>
 8005d66:	4b24      	ldr	r3, [pc, #144]	; (8005df8 <_svfiprintf_r+0x1f8>)
 8005d68:	bb1b      	cbnz	r3, 8005db2 <_svfiprintf_r+0x1b2>
 8005d6a:	9b03      	ldr	r3, [sp, #12]
 8005d6c:	3307      	adds	r3, #7
 8005d6e:	f023 0307 	bic.w	r3, r3, #7
 8005d72:	3308      	adds	r3, #8
 8005d74:	9303      	str	r3, [sp, #12]
 8005d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d78:	4433      	add	r3, r6
 8005d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d7c:	e767      	b.n	8005c4e <_svfiprintf_r+0x4e>
 8005d7e:	460c      	mov	r4, r1
 8005d80:	2001      	movs	r0, #1
 8005d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d86:	e7a5      	b.n	8005cd4 <_svfiprintf_r+0xd4>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f04f 0c0a 	mov.w	ip, #10
 8005d8e:	4619      	mov	r1, r3
 8005d90:	3401      	adds	r4, #1
 8005d92:	9305      	str	r3, [sp, #20]
 8005d94:	4620      	mov	r0, r4
 8005d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d9a:	3a30      	subs	r2, #48	; 0x30
 8005d9c:	2a09      	cmp	r2, #9
 8005d9e:	d903      	bls.n	8005da8 <_svfiprintf_r+0x1a8>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0c5      	beq.n	8005d30 <_svfiprintf_r+0x130>
 8005da4:	9105      	str	r1, [sp, #20]
 8005da6:	e7c3      	b.n	8005d30 <_svfiprintf_r+0x130>
 8005da8:	4604      	mov	r4, r0
 8005daa:	2301      	movs	r3, #1
 8005dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8005db0:	e7f0      	b.n	8005d94 <_svfiprintf_r+0x194>
 8005db2:	ab03      	add	r3, sp, #12
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	462a      	mov	r2, r5
 8005db8:	4638      	mov	r0, r7
 8005dba:	4b10      	ldr	r3, [pc, #64]	; (8005dfc <_svfiprintf_r+0x1fc>)
 8005dbc:	a904      	add	r1, sp, #16
 8005dbe:	f3af 8000 	nop.w
 8005dc2:	1c42      	adds	r2, r0, #1
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	d1d6      	bne.n	8005d76 <_svfiprintf_r+0x176>
 8005dc8:	89ab      	ldrh	r3, [r5, #12]
 8005dca:	065b      	lsls	r3, r3, #25
 8005dcc:	f53f af2c 	bmi.w	8005c28 <_svfiprintf_r+0x28>
 8005dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dd2:	b01d      	add	sp, #116	; 0x74
 8005dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd8:	ab03      	add	r3, sp, #12
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	462a      	mov	r2, r5
 8005dde:	4638      	mov	r0, r7
 8005de0:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <_svfiprintf_r+0x1fc>)
 8005de2:	a904      	add	r1, sp, #16
 8005de4:	f000 f87c 	bl	8005ee0 <_printf_i>
 8005de8:	e7eb      	b.n	8005dc2 <_svfiprintf_r+0x1c2>
 8005dea:	bf00      	nop
 8005dec:	08006602 	.word	0x08006602
 8005df0:	08006608 	.word	0x08006608
 8005df4:	0800660c 	.word	0x0800660c
 8005df8:	00000000 	.word	0x00000000
 8005dfc:	08005b49 	.word	0x08005b49

08005e00 <_printf_common>:
 8005e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e04:	4616      	mov	r6, r2
 8005e06:	4699      	mov	r9, r3
 8005e08:	688a      	ldr	r2, [r1, #8]
 8005e0a:	690b      	ldr	r3, [r1, #16]
 8005e0c:	4607      	mov	r7, r0
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	bfb8      	it	lt
 8005e12:	4613      	movlt	r3, r2
 8005e14:	6033      	str	r3, [r6, #0]
 8005e16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e20:	b10a      	cbz	r2, 8005e26 <_printf_common+0x26>
 8005e22:	3301      	adds	r3, #1
 8005e24:	6033      	str	r3, [r6, #0]
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	0699      	lsls	r1, r3, #26
 8005e2a:	bf42      	ittt	mi
 8005e2c:	6833      	ldrmi	r3, [r6, #0]
 8005e2e:	3302      	addmi	r3, #2
 8005e30:	6033      	strmi	r3, [r6, #0]
 8005e32:	6825      	ldr	r5, [r4, #0]
 8005e34:	f015 0506 	ands.w	r5, r5, #6
 8005e38:	d106      	bne.n	8005e48 <_printf_common+0x48>
 8005e3a:	f104 0a19 	add.w	sl, r4, #25
 8005e3e:	68e3      	ldr	r3, [r4, #12]
 8005e40:	6832      	ldr	r2, [r6, #0]
 8005e42:	1a9b      	subs	r3, r3, r2
 8005e44:	42ab      	cmp	r3, r5
 8005e46:	dc28      	bgt.n	8005e9a <_printf_common+0x9a>
 8005e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e4c:	1e13      	subs	r3, r2, #0
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	bf18      	it	ne
 8005e52:	2301      	movne	r3, #1
 8005e54:	0692      	lsls	r2, r2, #26
 8005e56:	d42d      	bmi.n	8005eb4 <_printf_common+0xb4>
 8005e58:	4649      	mov	r1, r9
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e60:	47c0      	blx	r8
 8005e62:	3001      	adds	r0, #1
 8005e64:	d020      	beq.n	8005ea8 <_printf_common+0xa8>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	68e5      	ldr	r5, [r4, #12]
 8005e6a:	f003 0306 	and.w	r3, r3, #6
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	bf18      	it	ne
 8005e72:	2500      	movne	r5, #0
 8005e74:	6832      	ldr	r2, [r6, #0]
 8005e76:	f04f 0600 	mov.w	r6, #0
 8005e7a:	68a3      	ldr	r3, [r4, #8]
 8005e7c:	bf08      	it	eq
 8005e7e:	1aad      	subeq	r5, r5, r2
 8005e80:	6922      	ldr	r2, [r4, #16]
 8005e82:	bf08      	it	eq
 8005e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	bfc4      	itt	gt
 8005e8c:	1a9b      	subgt	r3, r3, r2
 8005e8e:	18ed      	addgt	r5, r5, r3
 8005e90:	341a      	adds	r4, #26
 8005e92:	42b5      	cmp	r5, r6
 8005e94:	d11a      	bne.n	8005ecc <_printf_common+0xcc>
 8005e96:	2000      	movs	r0, #0
 8005e98:	e008      	b.n	8005eac <_printf_common+0xac>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4652      	mov	r2, sl
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	47c0      	blx	r8
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d103      	bne.n	8005eb0 <_printf_common+0xb0>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb0:	3501      	adds	r5, #1
 8005eb2:	e7c4      	b.n	8005e3e <_printf_common+0x3e>
 8005eb4:	2030      	movs	r0, #48	; 0x30
 8005eb6:	18e1      	adds	r1, r4, r3
 8005eb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ec2:	4422      	add	r2, r4
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005eca:	e7c5      	b.n	8005e58 <_printf_common+0x58>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4622      	mov	r2, r4
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	47c0      	blx	r8
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d0e6      	beq.n	8005ea8 <_printf_common+0xa8>
 8005eda:	3601      	adds	r6, #1
 8005edc:	e7d9      	b.n	8005e92 <_printf_common+0x92>
	...

08005ee0 <_printf_i>:
 8005ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee4:	7e0f      	ldrb	r7, [r1, #24]
 8005ee6:	4691      	mov	r9, r2
 8005ee8:	2f78      	cmp	r7, #120	; 0x78
 8005eea:	4680      	mov	r8, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	469a      	mov	sl, r3
 8005ef0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ef6:	d807      	bhi.n	8005f08 <_printf_i+0x28>
 8005ef8:	2f62      	cmp	r7, #98	; 0x62
 8005efa:	d80a      	bhi.n	8005f12 <_printf_i+0x32>
 8005efc:	2f00      	cmp	r7, #0
 8005efe:	f000 80d9 	beq.w	80060b4 <_printf_i+0x1d4>
 8005f02:	2f58      	cmp	r7, #88	; 0x58
 8005f04:	f000 80a4 	beq.w	8006050 <_printf_i+0x170>
 8005f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f10:	e03a      	b.n	8005f88 <_printf_i+0xa8>
 8005f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f16:	2b15      	cmp	r3, #21
 8005f18:	d8f6      	bhi.n	8005f08 <_printf_i+0x28>
 8005f1a:	a101      	add	r1, pc, #4	; (adr r1, 8005f20 <_printf_i+0x40>)
 8005f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f20:	08005f79 	.word	0x08005f79
 8005f24:	08005f8d 	.word	0x08005f8d
 8005f28:	08005f09 	.word	0x08005f09
 8005f2c:	08005f09 	.word	0x08005f09
 8005f30:	08005f09 	.word	0x08005f09
 8005f34:	08005f09 	.word	0x08005f09
 8005f38:	08005f8d 	.word	0x08005f8d
 8005f3c:	08005f09 	.word	0x08005f09
 8005f40:	08005f09 	.word	0x08005f09
 8005f44:	08005f09 	.word	0x08005f09
 8005f48:	08005f09 	.word	0x08005f09
 8005f4c:	0800609b 	.word	0x0800609b
 8005f50:	08005fbd 	.word	0x08005fbd
 8005f54:	0800607d 	.word	0x0800607d
 8005f58:	08005f09 	.word	0x08005f09
 8005f5c:	08005f09 	.word	0x08005f09
 8005f60:	080060bd 	.word	0x080060bd
 8005f64:	08005f09 	.word	0x08005f09
 8005f68:	08005fbd 	.word	0x08005fbd
 8005f6c:	08005f09 	.word	0x08005f09
 8005f70:	08005f09 	.word	0x08005f09
 8005f74:	08006085 	.word	0x08006085
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	1d1a      	adds	r2, r3, #4
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	602a      	str	r2, [r5, #0]
 8005f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0a4      	b.n	80060d6 <_printf_i+0x1f6>
 8005f8c:	6820      	ldr	r0, [r4, #0]
 8005f8e:	6829      	ldr	r1, [r5, #0]
 8005f90:	0606      	lsls	r6, r0, #24
 8005f92:	f101 0304 	add.w	r3, r1, #4
 8005f96:	d50a      	bpl.n	8005fae <_printf_i+0xce>
 8005f98:	680e      	ldr	r6, [r1, #0]
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	2e00      	cmp	r6, #0
 8005f9e:	da03      	bge.n	8005fa8 <_printf_i+0xc8>
 8005fa0:	232d      	movs	r3, #45	; 0x2d
 8005fa2:	4276      	negs	r6, r6
 8005fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa8:	230a      	movs	r3, #10
 8005faa:	485e      	ldr	r0, [pc, #376]	; (8006124 <_printf_i+0x244>)
 8005fac:	e019      	b.n	8005fe2 <_printf_i+0x102>
 8005fae:	680e      	ldr	r6, [r1, #0]
 8005fb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fb4:	602b      	str	r3, [r5, #0]
 8005fb6:	bf18      	it	ne
 8005fb8:	b236      	sxthne	r6, r6
 8005fba:	e7ef      	b.n	8005f9c <_printf_i+0xbc>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	6820      	ldr	r0, [r4, #0]
 8005fc0:	1d19      	adds	r1, r3, #4
 8005fc2:	6029      	str	r1, [r5, #0]
 8005fc4:	0601      	lsls	r1, r0, #24
 8005fc6:	d501      	bpl.n	8005fcc <_printf_i+0xec>
 8005fc8:	681e      	ldr	r6, [r3, #0]
 8005fca:	e002      	b.n	8005fd2 <_printf_i+0xf2>
 8005fcc:	0646      	lsls	r6, r0, #25
 8005fce:	d5fb      	bpl.n	8005fc8 <_printf_i+0xe8>
 8005fd0:	881e      	ldrh	r6, [r3, #0]
 8005fd2:	2f6f      	cmp	r7, #111	; 0x6f
 8005fd4:	bf0c      	ite	eq
 8005fd6:	2308      	moveq	r3, #8
 8005fd8:	230a      	movne	r3, #10
 8005fda:	4852      	ldr	r0, [pc, #328]	; (8006124 <_printf_i+0x244>)
 8005fdc:	2100      	movs	r1, #0
 8005fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fe2:	6865      	ldr	r5, [r4, #4]
 8005fe4:	2d00      	cmp	r5, #0
 8005fe6:	bfa8      	it	ge
 8005fe8:	6821      	ldrge	r1, [r4, #0]
 8005fea:	60a5      	str	r5, [r4, #8]
 8005fec:	bfa4      	itt	ge
 8005fee:	f021 0104 	bicge.w	r1, r1, #4
 8005ff2:	6021      	strge	r1, [r4, #0]
 8005ff4:	b90e      	cbnz	r6, 8005ffa <_printf_i+0x11a>
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	d04d      	beq.n	8006096 <_printf_i+0x1b6>
 8005ffa:	4615      	mov	r5, r2
 8005ffc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006000:	fb03 6711 	mls	r7, r3, r1, r6
 8006004:	5dc7      	ldrb	r7, [r0, r7]
 8006006:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800600a:	4637      	mov	r7, r6
 800600c:	42bb      	cmp	r3, r7
 800600e:	460e      	mov	r6, r1
 8006010:	d9f4      	bls.n	8005ffc <_printf_i+0x11c>
 8006012:	2b08      	cmp	r3, #8
 8006014:	d10b      	bne.n	800602e <_printf_i+0x14e>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	07de      	lsls	r6, r3, #31
 800601a:	d508      	bpl.n	800602e <_printf_i+0x14e>
 800601c:	6923      	ldr	r3, [r4, #16]
 800601e:	6861      	ldr	r1, [r4, #4]
 8006020:	4299      	cmp	r1, r3
 8006022:	bfde      	ittt	le
 8006024:	2330      	movle	r3, #48	; 0x30
 8006026:	f805 3c01 	strble.w	r3, [r5, #-1]
 800602a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800602e:	1b52      	subs	r2, r2, r5
 8006030:	6122      	str	r2, [r4, #16]
 8006032:	464b      	mov	r3, r9
 8006034:	4621      	mov	r1, r4
 8006036:	4640      	mov	r0, r8
 8006038:	f8cd a000 	str.w	sl, [sp]
 800603c:	aa03      	add	r2, sp, #12
 800603e:	f7ff fedf 	bl	8005e00 <_printf_common>
 8006042:	3001      	adds	r0, #1
 8006044:	d14c      	bne.n	80060e0 <_printf_i+0x200>
 8006046:	f04f 30ff 	mov.w	r0, #4294967295
 800604a:	b004      	add	sp, #16
 800604c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006050:	4834      	ldr	r0, [pc, #208]	; (8006124 <_printf_i+0x244>)
 8006052:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006056:	6829      	ldr	r1, [r5, #0]
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	f851 6b04 	ldr.w	r6, [r1], #4
 800605e:	6029      	str	r1, [r5, #0]
 8006060:	061d      	lsls	r5, r3, #24
 8006062:	d514      	bpl.n	800608e <_printf_i+0x1ae>
 8006064:	07df      	lsls	r7, r3, #31
 8006066:	bf44      	itt	mi
 8006068:	f043 0320 	orrmi.w	r3, r3, #32
 800606c:	6023      	strmi	r3, [r4, #0]
 800606e:	b91e      	cbnz	r6, 8006078 <_printf_i+0x198>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	f023 0320 	bic.w	r3, r3, #32
 8006076:	6023      	str	r3, [r4, #0]
 8006078:	2310      	movs	r3, #16
 800607a:	e7af      	b.n	8005fdc <_printf_i+0xfc>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	f043 0320 	orr.w	r3, r3, #32
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	2378      	movs	r3, #120	; 0x78
 8006086:	4828      	ldr	r0, [pc, #160]	; (8006128 <_printf_i+0x248>)
 8006088:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800608c:	e7e3      	b.n	8006056 <_printf_i+0x176>
 800608e:	0659      	lsls	r1, r3, #25
 8006090:	bf48      	it	mi
 8006092:	b2b6      	uxthmi	r6, r6
 8006094:	e7e6      	b.n	8006064 <_printf_i+0x184>
 8006096:	4615      	mov	r5, r2
 8006098:	e7bb      	b.n	8006012 <_printf_i+0x132>
 800609a:	682b      	ldr	r3, [r5, #0]
 800609c:	6826      	ldr	r6, [r4, #0]
 800609e:	1d18      	adds	r0, r3, #4
 80060a0:	6961      	ldr	r1, [r4, #20]
 80060a2:	6028      	str	r0, [r5, #0]
 80060a4:	0635      	lsls	r5, r6, #24
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	d501      	bpl.n	80060ae <_printf_i+0x1ce>
 80060aa:	6019      	str	r1, [r3, #0]
 80060ac:	e002      	b.n	80060b4 <_printf_i+0x1d4>
 80060ae:	0670      	lsls	r0, r6, #25
 80060b0:	d5fb      	bpl.n	80060aa <_printf_i+0x1ca>
 80060b2:	8019      	strh	r1, [r3, #0]
 80060b4:	2300      	movs	r3, #0
 80060b6:	4615      	mov	r5, r2
 80060b8:	6123      	str	r3, [r4, #16]
 80060ba:	e7ba      	b.n	8006032 <_printf_i+0x152>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	2100      	movs	r1, #0
 80060c0:	1d1a      	adds	r2, r3, #4
 80060c2:	602a      	str	r2, [r5, #0]
 80060c4:	681d      	ldr	r5, [r3, #0]
 80060c6:	6862      	ldr	r2, [r4, #4]
 80060c8:	4628      	mov	r0, r5
 80060ca:	f000 f82f 	bl	800612c <memchr>
 80060ce:	b108      	cbz	r0, 80060d4 <_printf_i+0x1f4>
 80060d0:	1b40      	subs	r0, r0, r5
 80060d2:	6060      	str	r0, [r4, #4]
 80060d4:	6863      	ldr	r3, [r4, #4]
 80060d6:	6123      	str	r3, [r4, #16]
 80060d8:	2300      	movs	r3, #0
 80060da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060de:	e7a8      	b.n	8006032 <_printf_i+0x152>
 80060e0:	462a      	mov	r2, r5
 80060e2:	4649      	mov	r1, r9
 80060e4:	4640      	mov	r0, r8
 80060e6:	6923      	ldr	r3, [r4, #16]
 80060e8:	47d0      	blx	sl
 80060ea:	3001      	adds	r0, #1
 80060ec:	d0ab      	beq.n	8006046 <_printf_i+0x166>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	079b      	lsls	r3, r3, #30
 80060f2:	d413      	bmi.n	800611c <_printf_i+0x23c>
 80060f4:	68e0      	ldr	r0, [r4, #12]
 80060f6:	9b03      	ldr	r3, [sp, #12]
 80060f8:	4298      	cmp	r0, r3
 80060fa:	bfb8      	it	lt
 80060fc:	4618      	movlt	r0, r3
 80060fe:	e7a4      	b.n	800604a <_printf_i+0x16a>
 8006100:	2301      	movs	r3, #1
 8006102:	4632      	mov	r2, r6
 8006104:	4649      	mov	r1, r9
 8006106:	4640      	mov	r0, r8
 8006108:	47d0      	blx	sl
 800610a:	3001      	adds	r0, #1
 800610c:	d09b      	beq.n	8006046 <_printf_i+0x166>
 800610e:	3501      	adds	r5, #1
 8006110:	68e3      	ldr	r3, [r4, #12]
 8006112:	9903      	ldr	r1, [sp, #12]
 8006114:	1a5b      	subs	r3, r3, r1
 8006116:	42ab      	cmp	r3, r5
 8006118:	dcf2      	bgt.n	8006100 <_printf_i+0x220>
 800611a:	e7eb      	b.n	80060f4 <_printf_i+0x214>
 800611c:	2500      	movs	r5, #0
 800611e:	f104 0619 	add.w	r6, r4, #25
 8006122:	e7f5      	b.n	8006110 <_printf_i+0x230>
 8006124:	08006613 	.word	0x08006613
 8006128:	08006624 	.word	0x08006624

0800612c <memchr>:
 800612c:	4603      	mov	r3, r0
 800612e:	b510      	push	{r4, lr}
 8006130:	b2c9      	uxtb	r1, r1
 8006132:	4402      	add	r2, r0
 8006134:	4293      	cmp	r3, r2
 8006136:	4618      	mov	r0, r3
 8006138:	d101      	bne.n	800613e <memchr+0x12>
 800613a:	2000      	movs	r0, #0
 800613c:	e003      	b.n	8006146 <memchr+0x1a>
 800613e:	7804      	ldrb	r4, [r0, #0]
 8006140:	3301      	adds	r3, #1
 8006142:	428c      	cmp	r4, r1
 8006144:	d1f6      	bne.n	8006134 <memchr+0x8>
 8006146:	bd10      	pop	{r4, pc}

08006148 <memcpy>:
 8006148:	440a      	add	r2, r1
 800614a:	4291      	cmp	r1, r2
 800614c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006150:	d100      	bne.n	8006154 <memcpy+0xc>
 8006152:	4770      	bx	lr
 8006154:	b510      	push	{r4, lr}
 8006156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800615a:	4291      	cmp	r1, r2
 800615c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006160:	d1f9      	bne.n	8006156 <memcpy+0xe>
 8006162:	bd10      	pop	{r4, pc}

08006164 <memmove>:
 8006164:	4288      	cmp	r0, r1
 8006166:	b510      	push	{r4, lr}
 8006168:	eb01 0402 	add.w	r4, r1, r2
 800616c:	d902      	bls.n	8006174 <memmove+0x10>
 800616e:	4284      	cmp	r4, r0
 8006170:	4623      	mov	r3, r4
 8006172:	d807      	bhi.n	8006184 <memmove+0x20>
 8006174:	1e43      	subs	r3, r0, #1
 8006176:	42a1      	cmp	r1, r4
 8006178:	d008      	beq.n	800618c <memmove+0x28>
 800617a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800617e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006182:	e7f8      	b.n	8006176 <memmove+0x12>
 8006184:	4601      	mov	r1, r0
 8006186:	4402      	add	r2, r0
 8006188:	428a      	cmp	r2, r1
 800618a:	d100      	bne.n	800618e <memmove+0x2a>
 800618c:	bd10      	pop	{r4, pc}
 800618e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006196:	e7f7      	b.n	8006188 <memmove+0x24>

08006198 <_free_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	4605      	mov	r5, r0
 800619c:	2900      	cmp	r1, #0
 800619e:	d040      	beq.n	8006222 <_free_r+0x8a>
 80061a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061a4:	1f0c      	subs	r4, r1, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bfb8      	it	lt
 80061aa:	18e4      	addlt	r4, r4, r3
 80061ac:	f000 f910 	bl	80063d0 <__malloc_lock>
 80061b0:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <_free_r+0x8c>)
 80061b2:	6813      	ldr	r3, [r2, #0]
 80061b4:	b933      	cbnz	r3, 80061c4 <_free_r+0x2c>
 80061b6:	6063      	str	r3, [r4, #4]
 80061b8:	6014      	str	r4, [r2, #0]
 80061ba:	4628      	mov	r0, r5
 80061bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061c0:	f000 b90c 	b.w	80063dc <__malloc_unlock>
 80061c4:	42a3      	cmp	r3, r4
 80061c6:	d908      	bls.n	80061da <_free_r+0x42>
 80061c8:	6820      	ldr	r0, [r4, #0]
 80061ca:	1821      	adds	r1, r4, r0
 80061cc:	428b      	cmp	r3, r1
 80061ce:	bf01      	itttt	eq
 80061d0:	6819      	ldreq	r1, [r3, #0]
 80061d2:	685b      	ldreq	r3, [r3, #4]
 80061d4:	1809      	addeq	r1, r1, r0
 80061d6:	6021      	streq	r1, [r4, #0]
 80061d8:	e7ed      	b.n	80061b6 <_free_r+0x1e>
 80061da:	461a      	mov	r2, r3
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	b10b      	cbz	r3, 80061e4 <_free_r+0x4c>
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	d9fa      	bls.n	80061da <_free_r+0x42>
 80061e4:	6811      	ldr	r1, [r2, #0]
 80061e6:	1850      	adds	r0, r2, r1
 80061e8:	42a0      	cmp	r0, r4
 80061ea:	d10b      	bne.n	8006204 <_free_r+0x6c>
 80061ec:	6820      	ldr	r0, [r4, #0]
 80061ee:	4401      	add	r1, r0
 80061f0:	1850      	adds	r0, r2, r1
 80061f2:	4283      	cmp	r3, r0
 80061f4:	6011      	str	r1, [r2, #0]
 80061f6:	d1e0      	bne.n	80061ba <_free_r+0x22>
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	4401      	add	r1, r0
 80061fe:	6011      	str	r1, [r2, #0]
 8006200:	6053      	str	r3, [r2, #4]
 8006202:	e7da      	b.n	80061ba <_free_r+0x22>
 8006204:	d902      	bls.n	800620c <_free_r+0x74>
 8006206:	230c      	movs	r3, #12
 8006208:	602b      	str	r3, [r5, #0]
 800620a:	e7d6      	b.n	80061ba <_free_r+0x22>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	1821      	adds	r1, r4, r0
 8006210:	428b      	cmp	r3, r1
 8006212:	bf01      	itttt	eq
 8006214:	6819      	ldreq	r1, [r3, #0]
 8006216:	685b      	ldreq	r3, [r3, #4]
 8006218:	1809      	addeq	r1, r1, r0
 800621a:	6021      	streq	r1, [r4, #0]
 800621c:	6063      	str	r3, [r4, #4]
 800621e:	6054      	str	r4, [r2, #4]
 8006220:	e7cb      	b.n	80061ba <_free_r+0x22>
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	20000268 	.word	0x20000268

08006228 <sbrk_aligned>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	4e0e      	ldr	r6, [pc, #56]	; (8006264 <sbrk_aligned+0x3c>)
 800622c:	460c      	mov	r4, r1
 800622e:	6831      	ldr	r1, [r6, #0]
 8006230:	4605      	mov	r5, r0
 8006232:	b911      	cbnz	r1, 800623a <sbrk_aligned+0x12>
 8006234:	f000 f8bc 	bl	80063b0 <_sbrk_r>
 8006238:	6030      	str	r0, [r6, #0]
 800623a:	4621      	mov	r1, r4
 800623c:	4628      	mov	r0, r5
 800623e:	f000 f8b7 	bl	80063b0 <_sbrk_r>
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d00a      	beq.n	800625c <sbrk_aligned+0x34>
 8006246:	1cc4      	adds	r4, r0, #3
 8006248:	f024 0403 	bic.w	r4, r4, #3
 800624c:	42a0      	cmp	r0, r4
 800624e:	d007      	beq.n	8006260 <sbrk_aligned+0x38>
 8006250:	1a21      	subs	r1, r4, r0
 8006252:	4628      	mov	r0, r5
 8006254:	f000 f8ac 	bl	80063b0 <_sbrk_r>
 8006258:	3001      	adds	r0, #1
 800625a:	d101      	bne.n	8006260 <sbrk_aligned+0x38>
 800625c:	f04f 34ff 	mov.w	r4, #4294967295
 8006260:	4620      	mov	r0, r4
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	2000026c 	.word	0x2000026c

08006268 <_malloc_r>:
 8006268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626c:	1ccd      	adds	r5, r1, #3
 800626e:	f025 0503 	bic.w	r5, r5, #3
 8006272:	3508      	adds	r5, #8
 8006274:	2d0c      	cmp	r5, #12
 8006276:	bf38      	it	cc
 8006278:	250c      	movcc	r5, #12
 800627a:	2d00      	cmp	r5, #0
 800627c:	4607      	mov	r7, r0
 800627e:	db01      	blt.n	8006284 <_malloc_r+0x1c>
 8006280:	42a9      	cmp	r1, r5
 8006282:	d905      	bls.n	8006290 <_malloc_r+0x28>
 8006284:	230c      	movs	r3, #12
 8006286:	2600      	movs	r6, #0
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	4630      	mov	r0, r6
 800628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006290:	4e2e      	ldr	r6, [pc, #184]	; (800634c <_malloc_r+0xe4>)
 8006292:	f000 f89d 	bl	80063d0 <__malloc_lock>
 8006296:	6833      	ldr	r3, [r6, #0]
 8006298:	461c      	mov	r4, r3
 800629a:	bb34      	cbnz	r4, 80062ea <_malloc_r+0x82>
 800629c:	4629      	mov	r1, r5
 800629e:	4638      	mov	r0, r7
 80062a0:	f7ff ffc2 	bl	8006228 <sbrk_aligned>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	4604      	mov	r4, r0
 80062a8:	d14d      	bne.n	8006346 <_malloc_r+0xde>
 80062aa:	6834      	ldr	r4, [r6, #0]
 80062ac:	4626      	mov	r6, r4
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	d140      	bne.n	8006334 <_malloc_r+0xcc>
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	4631      	mov	r1, r6
 80062b6:	4638      	mov	r0, r7
 80062b8:	eb04 0803 	add.w	r8, r4, r3
 80062bc:	f000 f878 	bl	80063b0 <_sbrk_r>
 80062c0:	4580      	cmp	r8, r0
 80062c2:	d13a      	bne.n	800633a <_malloc_r+0xd2>
 80062c4:	6821      	ldr	r1, [r4, #0]
 80062c6:	3503      	adds	r5, #3
 80062c8:	1a6d      	subs	r5, r5, r1
 80062ca:	f025 0503 	bic.w	r5, r5, #3
 80062ce:	3508      	adds	r5, #8
 80062d0:	2d0c      	cmp	r5, #12
 80062d2:	bf38      	it	cc
 80062d4:	250c      	movcc	r5, #12
 80062d6:	4638      	mov	r0, r7
 80062d8:	4629      	mov	r1, r5
 80062da:	f7ff ffa5 	bl	8006228 <sbrk_aligned>
 80062de:	3001      	adds	r0, #1
 80062e0:	d02b      	beq.n	800633a <_malloc_r+0xd2>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	442b      	add	r3, r5
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	e00e      	b.n	8006308 <_malloc_r+0xa0>
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	1b52      	subs	r2, r2, r5
 80062ee:	d41e      	bmi.n	800632e <_malloc_r+0xc6>
 80062f0:	2a0b      	cmp	r2, #11
 80062f2:	d916      	bls.n	8006322 <_malloc_r+0xba>
 80062f4:	1961      	adds	r1, r4, r5
 80062f6:	42a3      	cmp	r3, r4
 80062f8:	6025      	str	r5, [r4, #0]
 80062fa:	bf18      	it	ne
 80062fc:	6059      	strne	r1, [r3, #4]
 80062fe:	6863      	ldr	r3, [r4, #4]
 8006300:	bf08      	it	eq
 8006302:	6031      	streq	r1, [r6, #0]
 8006304:	5162      	str	r2, [r4, r5]
 8006306:	604b      	str	r3, [r1, #4]
 8006308:	4638      	mov	r0, r7
 800630a:	f104 060b 	add.w	r6, r4, #11
 800630e:	f000 f865 	bl	80063dc <__malloc_unlock>
 8006312:	f026 0607 	bic.w	r6, r6, #7
 8006316:	1d23      	adds	r3, r4, #4
 8006318:	1af2      	subs	r2, r6, r3
 800631a:	d0b6      	beq.n	800628a <_malloc_r+0x22>
 800631c:	1b9b      	subs	r3, r3, r6
 800631e:	50a3      	str	r3, [r4, r2]
 8006320:	e7b3      	b.n	800628a <_malloc_r+0x22>
 8006322:	6862      	ldr	r2, [r4, #4]
 8006324:	42a3      	cmp	r3, r4
 8006326:	bf0c      	ite	eq
 8006328:	6032      	streq	r2, [r6, #0]
 800632a:	605a      	strne	r2, [r3, #4]
 800632c:	e7ec      	b.n	8006308 <_malloc_r+0xa0>
 800632e:	4623      	mov	r3, r4
 8006330:	6864      	ldr	r4, [r4, #4]
 8006332:	e7b2      	b.n	800629a <_malloc_r+0x32>
 8006334:	4634      	mov	r4, r6
 8006336:	6876      	ldr	r6, [r6, #4]
 8006338:	e7b9      	b.n	80062ae <_malloc_r+0x46>
 800633a:	230c      	movs	r3, #12
 800633c:	4638      	mov	r0, r7
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	f000 f84c 	bl	80063dc <__malloc_unlock>
 8006344:	e7a1      	b.n	800628a <_malloc_r+0x22>
 8006346:	6025      	str	r5, [r4, #0]
 8006348:	e7de      	b.n	8006308 <_malloc_r+0xa0>
 800634a:	bf00      	nop
 800634c:	20000268 	.word	0x20000268

08006350 <_realloc_r>:
 8006350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006354:	4680      	mov	r8, r0
 8006356:	4614      	mov	r4, r2
 8006358:	460e      	mov	r6, r1
 800635a:	b921      	cbnz	r1, 8006366 <_realloc_r+0x16>
 800635c:	4611      	mov	r1, r2
 800635e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006362:	f7ff bf81 	b.w	8006268 <_malloc_r>
 8006366:	b92a      	cbnz	r2, 8006374 <_realloc_r+0x24>
 8006368:	f7ff ff16 	bl	8006198 <_free_r>
 800636c:	4625      	mov	r5, r4
 800636e:	4628      	mov	r0, r5
 8006370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006374:	f000 f838 	bl	80063e8 <_malloc_usable_size_r>
 8006378:	4284      	cmp	r4, r0
 800637a:	4607      	mov	r7, r0
 800637c:	d802      	bhi.n	8006384 <_realloc_r+0x34>
 800637e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006382:	d812      	bhi.n	80063aa <_realloc_r+0x5a>
 8006384:	4621      	mov	r1, r4
 8006386:	4640      	mov	r0, r8
 8006388:	f7ff ff6e 	bl	8006268 <_malloc_r>
 800638c:	4605      	mov	r5, r0
 800638e:	2800      	cmp	r0, #0
 8006390:	d0ed      	beq.n	800636e <_realloc_r+0x1e>
 8006392:	42bc      	cmp	r4, r7
 8006394:	4622      	mov	r2, r4
 8006396:	4631      	mov	r1, r6
 8006398:	bf28      	it	cs
 800639a:	463a      	movcs	r2, r7
 800639c:	f7ff fed4 	bl	8006148 <memcpy>
 80063a0:	4631      	mov	r1, r6
 80063a2:	4640      	mov	r0, r8
 80063a4:	f7ff fef8 	bl	8006198 <_free_r>
 80063a8:	e7e1      	b.n	800636e <_realloc_r+0x1e>
 80063aa:	4635      	mov	r5, r6
 80063ac:	e7df      	b.n	800636e <_realloc_r+0x1e>
	...

080063b0 <_sbrk_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	2300      	movs	r3, #0
 80063b4:	4d05      	ldr	r5, [pc, #20]	; (80063cc <_sbrk_r+0x1c>)
 80063b6:	4604      	mov	r4, r0
 80063b8:	4608      	mov	r0, r1
 80063ba:	602b      	str	r3, [r5, #0]
 80063bc:	f7fb fbc2 	bl	8001b44 <_sbrk>
 80063c0:	1c43      	adds	r3, r0, #1
 80063c2:	d102      	bne.n	80063ca <_sbrk_r+0x1a>
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	b103      	cbz	r3, 80063ca <_sbrk_r+0x1a>
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	bd38      	pop	{r3, r4, r5, pc}
 80063cc:	20000270 	.word	0x20000270

080063d0 <__malloc_lock>:
 80063d0:	4801      	ldr	r0, [pc, #4]	; (80063d8 <__malloc_lock+0x8>)
 80063d2:	f000 b811 	b.w	80063f8 <__retarget_lock_acquire_recursive>
 80063d6:	bf00      	nop
 80063d8:	20000274 	.word	0x20000274

080063dc <__malloc_unlock>:
 80063dc:	4801      	ldr	r0, [pc, #4]	; (80063e4 <__malloc_unlock+0x8>)
 80063de:	f000 b80c 	b.w	80063fa <__retarget_lock_release_recursive>
 80063e2:	bf00      	nop
 80063e4:	20000274 	.word	0x20000274

080063e8 <_malloc_usable_size_r>:
 80063e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ec:	1f18      	subs	r0, r3, #4
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bfbc      	itt	lt
 80063f2:	580b      	ldrlt	r3, [r1, r0]
 80063f4:	18c0      	addlt	r0, r0, r3
 80063f6:	4770      	bx	lr

080063f8 <__retarget_lock_acquire_recursive>:
 80063f8:	4770      	bx	lr

080063fa <__retarget_lock_release_recursive>:
 80063fa:	4770      	bx	lr

080063fc <_init>:
 80063fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fe:	bf00      	nop
 8006400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006402:	bc08      	pop	{r3}
 8006404:	469e      	mov	lr, r3
 8006406:	4770      	bx	lr

08006408 <_fini>:
 8006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640a:	bf00      	nop
 800640c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640e:	bc08      	pop	{r3}
 8006410:	469e      	mov	lr, r3
 8006412:	4770      	bx	lr
